/*
################
Global Variables
################
*/
var slotPositionHolder = [];
var globalRunningOrder = mx.get_running_order();
// checks to make sure rider switched gates
var currentTimingGates = [];
var mainEvent = false;
var racingEvent = false;
const crowdConstantBaseVol = 1.5;
// p and r store location of rider(s)
var p = [], r = [];

const globalFinishLaps = mx.get_finish_laps();
const globalFinishTime = mx.get_finish_time();

const undefinedTime = 999999999;

const normalLapLength = mx.normal_lap_length;
const firstLapLength = mx.first_lap_length;

// true = track is in stadium, false = track is not in stadium
/*
I would recommend just keeping this false even if inside a stadium if you plan
on having multiple variants of the crash sounds that way you can get multiple reactions.
Then just change the coordinates at which to play the crash sounds in bleacherSoundPositions.

If you do not care about just one sound playing, you can set it to true and everyone will hear
the same one sound at their respective camera position on the track.
*/
const stadium = false;

// Coordinates of each bleacher
const bleacherSoundPositions = [
  [501.216370, 0.000000, 89.343277],
  [401.438477, 0.000000, 89.981873],
  [175.382095, 0.000000, 177.147705],
  [96.677391, 0.000000, 251.701660],
  [665.066406, 0.000000, 282.699982],
  [663.629700, 0.000000, 424.943176],
  [564.827332, 0.000000, 593.606628],
  [413.560547, 0.000000, 594.283997],
  [237.951218, 0.000000, 584.044800]
];
const numOfBleachers = bleacherSoundPositions.length;

determineMainEvent();

// An array of objects to hold each crowd member property and the individual coordinates of each member
const race_event_crowd = [
  {coords: [[56.668068,0.000000,339.100342]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/tw1.png"},
  {coords: [[96.465622,0.000000,228.782822]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/blue.png"},
  {coords: [[404.335052,11.500000,78.787910]], size: 5.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/liz.png"},
  {coords: [[620.161255,0.000000,132.784134],[606.727722,0.000000,109.642570],[660.052185,0.000000,466.246521],[305.507935,0.000000,105.902184],[239.582687,0.000000,130.172623],[70.060242,0.000000,307.828918],[32.064861,0.000000,324.591583],[284.099060,0.000000,572.637756],[308.030731,0.000000,596.343811],[460.020172,0.000000,589.077698],[616.705322,0.000000,577.337280],[652.121460,0.000000,190.968887],[567.231567,0.000000,112.287567],[464.618408,0.000000,104.724220],[314.676605,0.000000,84.066147]], size: 7.000000, aspect: 2.000000, png: "@os2022bgsxobj/billboards/crowd/g3.png"},
  {coords: [[645.520081,0.000000,519.914612],[617.976440,0.000000,140.618988],[89.715950,1.750000,269.490631],[376.968933,7.750000,82.914581],[393.119385,5.500000,88.803993],[520.020752,6.750000,85.220688],[496.181305,4.250000,91.110100],[529.115417,4.250000,91.110100],[509.140686,3.000000,94.054810],[475.373993,0.500000,99.944221],[173.553696,4.250000,181.474762],[170.884445,3.000000,188.308441],[242.862808,7.750000,589.204529],[257.096893,6.750000,567.092163],[252.130234,6.750000,573.182068],[232.315552,3.000000,583.500244],[233.488998,1.750000,577.402222],[413.693268,6.750000,598.405701],[389.419006,6.750000,598.593872],[444.919861,5.500000,595.218811],[407.730072,5.500000,595.507141],[434.661438,3.000000,589.408752],[423.225586,3.000000,589.497375],[441.423035,0.500000,583.466736],[590.494690,1.750000,585.751160],[544.139404,1.750000,586.110535],[673.601746,9.000000,415.200043],[670.629456,7.750000,408.491577],[667.721375,6.750000,417.412964],[664.810486,5.500000,425.644989],[661.862671,4.250000,424.903687],[658.821350,3.000000,401.399017],[655.978394,1.750000,426.160187],[634.212463,0.000000,142.358826],[218.341599,0.000000,150.712357],[22.597816,0.000000,358.647766],[151.739014,0.000000,560.938904]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/rogan.png"},
  {coords: [[79.739441,6.750000,262.809357],[89.836288,6.750000,252.712524],[77.946548,5.500000,268.766693],[96.215240,5.500000,250.498032],[389.155426,4.250000,91.748695],[374.816925,3.000000,94.693405],[517.240234,3.000000,94.054810],[147.926926,9.000000,190.443726],[158.598160,4.250000,196.430267],[675.187805,9.000000,309.301361],[666.181641,5.500000,267.455963],[654.463440,0.500000,282.223358],[654.527527,0.500000,297.826813],[253.829315,9.000000,580.417114],[234.393524,7.750000,599.589172],[261.736267,6.750000,561.403564],[227.397491,4.250000,594.189758],[246.849304,3.000000,565.679688],[244.270767,3.000000,568.841370],[410.101196,7.750000,601.378296],[398.479980,6.750000,598.523621],[437.056396,0.500000,583.500549],[587.145081,7.750000,600.501099],[548.699768,7.750000,600.799194],[566.221069,5.500000,594.773743],[673.751465,9.000000,451.631805],[667.663269,6.750000,403.276031],[664.739380,5.500000,408.342621],[661.946167,4.250000,445.215240],[652.954956,0.500000,407.006348],[653.054565,0.500000,431.240204],[256.576111,0.000000,121.522530],[249.871048,0.000000,109.229904],[306.225616,0.000000,93.425102],[458.207153,0.000000,92.626869],[656.166321,0.000000,155.367142],[660.476746,0.000000,194.799316],[359.263550,0.000000,602.308655],[363.757660,0.000000,587.069580],[298.925842,0.000000,582.102600],[183.044174,0.000000,589.399231],[135.181763,0.000000,548.168335]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/5.png"},
  {coords: [[252.094025,0.000000,118.097397],[81.114662,0.000000,294.993530],[37.234299,0.000000,336.178040],[519.602844,0.000000,579.711304],[649.712891,0.000000,165.593582],[331.860901,0.000000,83.695984],[156.545547,0.000000,216.354004],[75.966843,0.000000,491.747192],[86.304199,7.750000,252.080185],[79.452934,4.250000,271.424744],[114.654068,3.000000,240.388123],[118.802307,1.750000,240.404327],[376.700531,6.750000,85.859283],[405.698639,6.750000,85.859283],[420.619598,6.750000,85.859283],[370.389069,1.750000,97.638107],[375.491089,0.500000,100.582817],[426.660767,0.500000,100.582817],[479.152954,7.750000,82.275986],[505.107574,6.750000,85.220688],[470.445038,4.250000,91.110100],[479.795227,0.500000,99.944221],[165.266907,6.750000,181.432663],[169.972397,5.500000,180.891617],[187.400665,4.250000,167.627838],[172.471359,0.500000,195.050400],[675.090027,9.000000,285.511200],[666.286865,5.500000,293.064484],[660.226196,3.000000,251.399384],[231.593506,6.750000,598.363220],[249.535751,5.500000,571.704102],[250.022385,1.750000,557.129761],[388.633026,9.000000,604.489563],[405.162689,3.000000,589.637451],[437.240448,1.750000,586.443970],[559.358276,9.000000,603.661316],[551.904175,5.500000,594.884766],[550.352905,4.250000,591.951965],[670.692322,7.750000,423.786011],[667.789490,6.750000,433.985962],[667.832397,6.750000,444.427887],[661.773682,4.250000,403.248657],[653.100098,0.500000,442.326904]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/g6.png"},
  {coords: [[82.701813,3.000000,272.340302],[103.070938,3.000000,251.971222],[408.333405,3.000000,94.693405],[394.517059,1.750000,97.638107],[489.095459,9.000000,79.331276],[523.142700,7.750000,82.275986],[474.189423,6.750000,85.220688],[500.348541,4.250000,91.110100],[532.958008,3.000000,94.054810],[492.195190,1.750000,96.999512],[511.924896,1.750000,96.999512],[497.052917,0.500000,99.944221],[151.272934,9.000000,187.097717],[154.655914,9.000000,183.714752],[177.534988,7.750000,165.000168],[194.414246,6.750000,152.285385],[173.742462,5.500000,177.121567],[198.397629,4.250000,156.630890],[672.017822,7.750000,254.486526],[669.197876,6.750000,284.847748],[660.376343,3.000000,287.940430],[654.335938,0.500000,251.205002],[242.531784,9.000000,594.269592],[385.085815,5.500000,595.682678],[395.966553,3.000000,589.708740],[563.671997,9.000000,603.627869],[566.029846,7.750000,600.664795],[532.186462,6.750000,597.982422],[574.925964,4.250000,591.761475],[536.405579,4.250000,592.060120],[540.983154,3.000000,589.079834],[661.963928,4.250000,449.530579],[656.037781,1.750000,440.608124],[205.149200,0.000000,152.387192],[232.608047,0.000000,120.617950],[245.379608,0.000000,116.786484],[322.647522,0.000000,92.041595],[315.303864,0.000000,102.258835],[646.845520,0.000000,328.607361],[649.187927,0.000000,537.171692],[478.122498,0.000000,599.820923],[467.585968,0.000000,583.217896],[346.415802,0.000000,590.721191]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/6.png"},
  {coords: [[47.090256,0.000000,306.453827],[295.656219,0.000000,575.887817],[647.577698,0.000000,334.255920],[452.493347,0.000000,105.581314],[94.846909,6.750000,247.701920],[104.744865,5.500000,241.968430],[85.666969,4.250000,265.210724],[103.235893,4.250000,247.641830],[377.317688,9.000000,79.969872],[385.897278,9.000000,79.969872],[408.094604,9.000000,79.969872],[403.694336,7.750000,82.914581],[414.749146,5.500000,88.803993],[408.125916,4.250000,91.748695],[417.902069,3.000000,94.693405],[419.966675,1.750000,97.638107],[530.889221,7.750000,82.275986],[478.238251,6.750000,85.220688],[490.413483,5.500000,88.165398],[510.684509,5.500000,88.165398],[501.961609,0.500000,99.944221],[181.256561,7.750000,161.278610],[150.121262,6.750000,196.578262],[172.470993,6.750000,174.228577],[191.500977,6.750000,155.198639],[160.340546,3.000000,198.852325],[663.320190,4.250000,287.717987],[663.395508,4.250000,306.041473],[660.415649,3.000000,297.504944],[258.851135,7.750000,569.600403],[244.803070,6.750000,582.166260],[228.693634,5.500000,597.259705],[218.347565,4.250000,605.286316],[251.984726,3.000000,559.382874],[406.102753,9.000000,604.354126],[397.630341,9.000000,604.419800],[437.653564,5.500000,595.275146],[406.830658,4.250000,592.569275],[597.420898,7.750000,600.421448],[589.427490,6.750000,597.538635],[670.735291,7.750000,434.247314],[667.851074,6.750000,448.972748],[658.916870,3.000000,424.634796],[655.901794,1.750000,407.520599]], size: 8.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/g5.png"},
  {coords: [[658.408813,0.000000,236.778976],[576.670959,0.000000,102.198685],[346.144348,0.000000,102.198654],[238.543945,0.000000,118.482399],[123.759445,0.000000,218.579391],[498.604431,0.000000,593.903625],[86.059341,0.000000,498.690765],[354.952698,0.000000,580.194153],[96.528488,7.750000,241.855911],[109.030579,4.250000,241.847168],[113.944817,4.250000,236.932938],[92.913315,3.000000,262.128815],[86.794830,1.750000,272.411743],[99.166695,1.750000,260.039917],[92.725365,0.500000,270.645660],[433.271973,6.750000,85.859283],[378.470123,4.250000,91.748695],[434.137115,3.000000,94.693405],[397.084076,0.500000,100.582817],[473.968536,3.000000,94.054810],[520.901123,0.500000,99.944221],[184.600037,5.500000,166.264008],[672.119995,7.750000,279.348145],[669.244812,6.750000,296.268433],[666.226562,5.500000,278.389435],[660.452209,3.000000,306.396210],[257.480957,5.500000,561.962036],[253.752716,4.250000,561.874268],[247.241714,4.250000,569.857727],[239.185410,1.750000,570.417542],[401.918243,5.500000,595.552185],[380.847015,5.500000,595.715515],[413.820496,4.250000,592.515076],[385.997040,4.250000,592.730835],[416.171783,1.750000,586.607300],[581.189331,4.250000,591.712891],[559.554565,3.000000,588.935852],[670.712036,7.750000,428.592407],[667.702026,6.750000,412.704437],[664.756653,5.500000,412.551361],[664.855957,5.500000,436.719421],[664.876221,5.500000,441.648621],[652.975098,0.500000,411.903870],[653.032837,0.500000,425.962372]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/rogan2.png"},
  {coords: [[88.149132,5.500000,258.564117],[82.694626,4.250000,268.183044],[106.266319,3.000000,248.775848],[122.033363,1.750000,237.173279],[433.440613,7.750000,82.914581],[421.090302,5.500000,88.803993],[412.207184,0.500000,100.582817],[499.577728,9.000000,79.331276],[511.795074,9.000000,79.331276],[514.709778,6.750000,85.220688],[532.274658,6.750000,85.220688],[524.040039,4.250000,91.110100],[529.492004,1.750000,96.999512],[526.420288,0.500000,99.944221],[173.462158,7.750000,169.072983],[161.224548,6.750000,185.475006],[672.038147,7.750000,259.425842],[669.069824,6.750000,253.696426],[663.216858,4.250000,262.576355],[237.166443,7.750000,596.189148],[248.557892,0.500000,554.266296],[414.400482,9.000000,604.289795],[445.413300,7.750000,601.104553],[432.284302,6.750000,598.261536],[393.986145,5.500000,595.613647],[420.189270,4.250000,592.465759],[557.999451,6.750000,597.782288],[597.375488,5.500000,594.532227],[545.996399,3.000000,589.040955],[573.246216,1.750000,585.884888],[559.620361,1.750000,585.990540],[549.414612,1.750000,586.069641],[670.612915,7.750000,404.466217],[667.770325,6.750000,429.328644],[664.901062,5.500000,447.681671],[655.863770,1.750000,398.267975],[652.992981,0.500000,416.265106],[242.066406,0.000000,111.977554],[339.373901,0.000000,93.464310],[598.738586,0.000000,129.591293],[641.204102,0.000000,179.719635],[654.933533,0.000000,175.409256],[646.606445,0.000000,354.446411],[652.078857,0.000000,496.303986],[633.678406,0.000000,554.101501],[343.336517,0.000000,578.710510],[287.683899,0.000000,583.677612],[192.859924,0.000000,596.885376],[147.479889,0.000000,565.728943]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/1.png"},
  {coords: [[99.147598,6.750000,243.401245],[115.876556,1.750000,243.330078],[401.523071,6.750000,85.859283],[384.435272,5.500000,88.803993],[409.318542,5.500000,88.803993],[400.698029,1.750000,97.638107],[414.007538,1.750000,97.638107],[433.574707,1.750000,97.638107],[479.464355,9.000000,79.331276],[483.887238,9.000000,79.331276],[505.705963,9.000000,79.331276],[500.172699,7.750000,82.275986],[482.547546,6.750000,85.220688],[509.736237,6.750000,85.220688],[494.972748,3.000000,94.054810],[478.860199,1.750000,96.999512],[525.279053,1.750000,96.999512],[471.230438,0.500000,99.944221],[192.130753,7.750000,150.404434],[161.330490,5.500000,189.533493],[186.134521,3.000000,173.058411],[177.786102,1.750000,185.571243],[184.387482,1.750000,178.969879],[194.777786,1.750000,168.579590],[198.481308,1.750000,164.876083],[675.011902,9.000000,266.498260],[666.145325,5.500000,258.615784],[663.286255,4.250000,279.465698],[654.400452,0.500000,266.905792],[241.705536,5.500000,581.305115],[224.711517,4.250000,597.483154],[226.835983,3.000000,590.219055],[426.679626,6.750000,598.304993],[544.102051,6.750000,597.890015],[591.035400,5.500000,594.581360],[561.778503,5.500000,594.808167],[557.452759,4.250000,591.896912],[658.933533,3.000000,428.695435],[658.957581,3.000000,434.545319],[656.067688,1.750000,447.889282],[264.657196,0.000000,108.326973],[55.203720,0.000000,301.337097],[68.134903,0.000000,494.027924],[145.722107,0.000000,554.692810],[187.868240,0.000000,593.805725],[166.954819,0.000000,586.142822],[327.876404,0.000000,603.544128],[484.168304,0.000000,581.194031],[645.090027,0.000000,426.817688],[643.653015,0.000000,194.056152]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/2.png"},
  {coords: [[84.613922,9.000000,249.606003],[102.927162,9.000000,231.292816],[82.726135,5.500000,263.987122],[99.933083,5.500000,246.780197],[96.192192,4.250000,254.685516],[85.815979,3.000000,269.226135],[119.687744,0.500000,243.683334],[395.851929,7.750000,82.914581],[417.349396,7.750000,82.914581],[413.675629,4.250000,91.748695],[408.582367,1.750000,97.638107],[516.849060,5.500000,88.165398],[512.503662,4.250000,91.110100],[499.329895,3.000000,94.054810],[521.842346,3.000000,94.054810],[527.338623,3.000000,94.054810],[184.521637,9.000000,153.849091],[180.481247,5.500000,170.382782],[163.178207,3.000000,196.014679],[179.330353,3.000000,179.862564],[189.009109,3.000000,170.183823],[195.625885,3.000000,163.567062],[169.469162,0.500000,198.052612],[672.193115,7.750000,297.139740],[666.306335,5.500000,297.792969],[666.364441,5.500000,311.929230],[657.509888,1.750000,306.975983],[260.376648,9.000000,572.389099],[253.970535,7.750000,575.584778],[227.427139,7.750000,608.130981],[222.494919,5.500000,604.860229],[219.323669,5.500000,608.748657],[237.711685,4.250000,581.542969],[241.780121,1.750000,567.236084],[227.517105,0.500000,580.065491],[219.543091,0.500000,589.842834],[410.253967,9.000000,604.321960],[418.076111,3.000000,589.537292],[390.603790,1.750000,586.805481],[405.394226,0.500000,583.746033],[547.792664,9.000000,603.750977],[540.762695,9.000000,603.805481],[539.102600,6.750000,597.928772],[556.388672,5.500000,594.849976],[534.552917,5.500000,595.019287],[578.565979,3.000000,588.788452],[586.067627,1.750000,585.785461],[554.061462,1.750000,586.033630],[667.806396,6.750000,438.102905],[664.836487,5.500000,431.980927],[664.937805,5.500000,456.625275],[661.752319,4.250000,398.044037]], size: 8.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/groupsit.png"},
  {coords: [[110.249596,5.500000,236.463715],[100.325020,4.250000,250.552704],[122.323799,3.000000,232.718414],[105.714844,1.750000,253.491776],[414.672394,9.000000,79.969872],[431.690979,9.000000,79.969872],[420.361938,4.250000,91.748695],[424.820374,4.250000,91.748695],[384.482635,3.000000,94.693405],[374.963531,1.750000,97.638107],[387.171509,1.750000,97.638107],[380.425354,0.500000,100.582817],[488.420532,7.750000,82.275986],[474.837982,5.500000,88.165398],[495.362457,5.500000,88.165398],[506.228180,5.500000,88.165398],[513.200623,3.000000,94.054810],[187.875214,9.000000,150.495529],[164.867294,7.750000,177.667816],[166.170227,4.250000,188.858215],[195.245117,4.250000,159.783386],[175.853851,3.000000,183.339050],[181.486115,1.750000,181.871231],[191.826797,1.750000,171.530579],[675.107117,9.000000,289.659027],[675.133240,9.000000,296.027161],[672.267883,7.750000,315.338928],[669.099670,6.750000,260.947754],[663.200134,4.250000,258.502441],[657.357910,1.750000,270.005219],[657.426270,1.750000,286.639984],[657.448730,1.750000,292.092285],[257.060974,4.250000,557.817810],[229.927948,4.250000,591.087036],[389.206940,5.500000,595.650696],[441.971893,3.000000,589.352051],[441.398254,1.750000,586.411682],[427.610229,1.750000,586.518616],[567.344849,6.750000,597.709839],[589.203979,3.000000,588.705994],[552.287903,3.000000,588.992188],[673.646912,9.000000,426.197449],[673.681763,9.000000,434.674377],[661.735107,4.250000,393.853455],[659.050415,3.000000,457.130249],[141.051834,0.000000,549.974609],[502.737488,0.000000,579.324402],[637.974548,0.000000,553.586609],[661.454712,0.000000,483.823395],[667.324585,0.000000,471.631775],[665.744141,0.000000,382.452087],[662.357666,0.000000,230.282166],[641.135193,0.000000,170.001221],[649.037170,0.000000,140.199387],[336.569702,0.000000,87.820404]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/4.png"},
  {coords: [[79.948776,9.000000,254.271149],[91.199432,5.500000,255.513840],[117.085770,4.250000,233.791992],[92.581665,1.750000,266.624908],[420.090302,9.000000,79.969872],[382.518616,7.750000,82.914581],[380.868256,6.750000,85.859283],[385.269348,6.750000,85.859283],[379.952148,5.500000,88.803993],[433.550598,5.500000,88.803993],[429.722351,3.000000,94.693405],[492.828583,7.750000,82.275986],[500.509186,6.750000,85.220688],[172.644897,9.000000,165.725815],[148.335342,7.750000,194.199738],[170.410370,4.250000,184.618088],[190.982727,4.250000,164.045776],[167.519684,1.750000,195.837631],[669.166809,6.750000,277.286346],[669.221619,6.750000,290.625092],[666.109924,5.500000,249.996918],[666.126526,5.500000,254.043076],[663.166260,4.250000,250.264038],[663.361755,4.250000,297.829529],[660.355835,3.000000,282.937836],[245.638046,5.500000,576.483276],[234.188751,5.500000,590.521851],[242.494659,4.250000,575.678345],[221.592102,4.250000,601.308044],[238.918900,3.000000,575.403564],[235.977264,3.000000,579.010437],[225.321808,1.750000,587.416443],[219.194427,1.750000,594.929565],[216.503876,1.750000,598.228577],[239.438873,0.500000,565.447571],[383.326416,9.000000,604.530701],[445.872437,6.750000,598.156189],[427.625549,5.500000,595.352844],[568.526001,9.000000,603.590271],[574.254761,7.750000,600.601074],[539.378601,7.750000,600.871460],[562.243042,6.750000,597.749390],[664.721741,5.500000,404.046509],[661.880737,4.250000,429.294952],[658.841614,3.000000,406.323883],[658.896057,3.000000,419.569977],[658.989441,3.000000,442.299835],[656.020752,1.750000,436.468018],[20.941399,0.000000,353.553284],[170.402039,0.000000,578.421631],[330.022369,0.000000,593.096741],[512.897217,0.000000,580.453491],[655.584778,0.000000,551.329041],[651.972412,0.000000,500.982056],[667.456909,0.000000,373.826080],[645.105469,0.000000,359.771759],[657.508911,0.000000,321.747162],[644.701050,0.000000,219.010742],[635.245178,0.000000,121.973404],[277.508606,0.000000,104.335869]], size: 6.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/3.png"},
  {coords: [[293.396484,0.000000,105.583801],[554.638733,0.000000,109.628006],[595.028809,0.000000,116.333069],[607.321411,0.000000,132.776443],[659.168640,0.000000,332.240295],[647.035706,0.000000,374.067139],[660.445862,0.000000,503.379181],[367.019623,0.000000,577.454163],[338.283600,0.000000,594.695740],[312.740509,0.000000,581.924194],[159.162476,0.000000,569.791504],[116.697067,0.000000,545.525696],[43.899223,0.000000,322.662537],[140.963089,0.000000,233.900238],[215.996094,0.000000,133.324036],[107.135788,9.000000,227.084198],[102.021729,6.750000,240.527130],[111.216850,6.750000,231.332031],[120.980080,4.250000,229.897690],[119.426559,3.000000,235.615646],[388.606873,3.000000,94.693405],[416.415802,0.500000,100.582817],[486.887146,6.750000,85.220688],[525.407349,6.750000,85.220688],[486.085876,5.500000,88.165398],[491.885895,4.250000,91.110100],[503.466980,3.000000,94.054810],[485.770477,1.750000,96.999512],[165.823883,9.000000,172.546799],[157.770294,6.750000,188.929260],[178.127563,6.750000,168.572037],[166.928818,5.500000,183.935181],[669.265625,6.750000,301.338898],[666.269836,5.500000,288.920288],[663.303711,4.250000,283.715179],[660.330261,3.000000,276.712585],[657.283691,1.750000,251.931259],[657.393860,1.750000,278.752380],[234.996689,9.000000,603.508789],[237.502304,6.750000,591.118103],[252.639664,5.500000,567.898193],[254.599396,3.000000,556.176880],[241.601318,3.000000,572.114502],[398.540100,7.750000,601.467957],[422.552032,5.500000,595.392212],[444.402069,4.250000,592.278015],[432.228333,4.250000,592.372375],[432.487579,1.750000,586.480774],[401.143555,0.500000,583.778992],[391.553955,0.500000,583.853333],[584.120056,9.000000,603.469360],[571.555115,6.750000,597.677185],[593.767395,4.250000,591.615356],[589.101685,4.250000,591.651550],[584.245544,3.000000,588.744385],[532.383118,3.000000,589.146484],[570.872375,0.500000,582.958496],[673.569458,9.000000,407.343811],[673.664062,9.000000,430.357574],[673.722290,9.000000,444.531891],[670.770569,7.750000,442.837067],[667.683350,6.750000,408.162201],[661.838440,4.250000,419.000854],[661.990540,4.250000,456.005890],[655.960815,1.750000,421.886230],[653.015442,0.500000,421.730103]], size: 7.000000, aspect: 2.000000, png: "@os2022bgsxobj/billboards/crowd/g1.png"},
  {coords: [[231.641388,0.000000,143.541306],[650.867004,0.000000,202.290741],[330.204376,0.000000,95.573814],[441.137360,0.000000,97.952408],[585.292480,0.000000,108.225021],[637.671509,0.000000,162.071487],[661.829041,0.000000,158.797791],[659.232544,0.000000,211.628311],[658.329529,0.000000,344.268921],[657.765320,0.000000,491.471863],[649.863159,0.000000,510.888123],[657.087830,0.000000,532.223511],[518.124695,0.000000,597.359497],[474.099274,0.000000,581.668396],[459.537018,0.000000,602.890869],[356.924133,0.000000,590.473389],[323.848633,0.000000,584.716187],[316.172424,0.000000,611.470154],[26.169115,0.000000,346.528107],[59.244617,0.000000,307.921234],[201.141861,0.000000,145.591797],[281.967773,0.000000,111.274704],[100.177345,7.750000,238.207062],[108.618484,7.750000,229.765945],[95.765862,3.000000,259.276276],[123.390556,0.500000,239.980530],[126.708580,0.500000,236.662521],[393.511322,6.750000,85.859283],[397.810425,5.500000,88.803993],[403.506317,4.250000,91.748695],[403.964508,3.000000,94.693405],[390.171661,0.500000,100.582817],[432.161865,0.500000,100.582817],[481.502106,4.250000,91.110100],[470.997620,1.750000,96.999512],[516.185852,0.500000,99.944221],[162.943726,9.000000,175.426956],[187.895432,7.750000,154.639740],[168.502243,6.750000,178.197327],[155.964523,5.500000,194.899460],[173.029572,1.750000,190.327759],[181.886490,0.500000,185.635300],[672.000549,7.750000,250.285843],[660.248413,3.000000,256.800446],[657.339783,1.750000,265.589508],[234.732849,6.750000,594.513916],[232.667480,4.250000,587.727966],[229.778900,3.000000,586.610596],[223.832260,3.000000,593.902100],[216.324539,3.000000,603.107666],[227.968262,1.750000,584.171509],[401.744568,9.000000,604.387878],[436.764343,7.750000,601.171631],[422.542938,7.750000,601.281860],[389.366180,7.750000,601.539062],[425.196533,4.250000,592.426880],[411.638275,3.000000,589.587219],[385.400909,3.000000,589.790649],[579.987671,9.000000,603.501404],[592.126099,7.750000,600.462463],[561.370300,7.750000,600.700928],[571.437012,5.500000,594.733276],[547.760254,5.500000,594.916870],[561.504272,4.250000,591.865540],[570.234863,3.000000,588.853027],[583.456360,0.500000,582.860962],[559.057617,0.500000,583.050110],[554.015381,0.500000,583.089172],[661.820801,4.250000,414.709625],[661.901489,4.250000,434.349579]], size: 9.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/g2.png"},
  {coords: [[452.217438,0.000000,96.121719],[352.990906,0.000000,101.314461],[344.072937,0.000000,109.667999],[330.413757,0.000000,109.667999],[340.573486,0.000000,98.266533],[310.658905,0.000000,108.652000],[299.708984,0.000000,109.667969],[273.293793,0.000000,110.571045],[262.795471,0.000000,121.182297],[241.347229,0.000000,137.550705],[212.787186,0.000000,163.062851],[131.170822,0.000000,229.552551],[151.264465,0.000000,224.359802],[123.381714,0.000000,255.741928],[72.244492,0.000000,292.768372],[64.229607,0.000000,315.684143],[49.554462,0.000000,331.826782],[52.263718,0.000000,317.490295],[255.387238,0.000000,550.106812],[196.122223,0.000000,592.439148],[304.605316,0.000000,587.584839],[348.856476,0.000000,581.827820],[470.434296,0.000000,593.229431],[524.732239,0.000000,587.810364],[605.332825,0.000000,577.876160],[645.520081,0.000000,569.409668],[642.698242,0.000000,534.302063],[659.292725,0.000000,520.078369],[644.279175,0.000000,485.196686],[646.537231,0.000000,464.312958],[659.970825,0.000000,387.663635],[647.779175,0.000000,365.763794],[653.084778,0.000000,213.255539],[652.746460,0.000000,180.744598],[643.038208,0.000000,157.264374],[603.076477,0.000000,119.334846],[586.933716,0.000000,122.947197],[547.198303,0.000000,110.868401],[542.570007,0.000000,95.854607],[110.317825,9.000000,223.902176],[106.167686,4.250000,244.710052],[98.635475,3.000000,256.406677],[95.522530,1.750000,263.684052],[109.260490,0.500000,254.110565],[381.578827,9.000000,79.969872],[388.510132,7.750000,82.914581],[429.328918,7.750000,82.914581],[397.512268,6.750000,85.859283],[375.134918,5.500000,88.803993],[371.941437,4.250000,91.748695],[370.326538,3.000000,94.693405],[404.086548,0.500000,100.582817],[504.395294,4.250000,91.110100],[501.838898,1.750000,96.999512],[511.786957,0.500000,99.944221],[186.828934,0.500000,180.692871],[672.248657,7.750000,310.659485],[220.836349,6.750000,611.553101],[230.529556,1.750000,581.030945],[405.433350,7.750000,601.414490],[441.593964,6.750000,598.189392],[417.291473,5.500000,595.432983],[429.495697,3.000000,589.448792],[391.355896,3.000000,589.744446],[578.386169,5.500000,594.679443],[541.458069,4.250000,592.020935],[532.352051,4.250000,592.091553],[566.100037,3.000000,588.885071],[577.995483,1.750000,585.848083],[564.052612,1.750000,585.956177],[658.861145,3.000000,411.083191],[652.916748,0.500000,397.712006]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/9.png"},
  {coords: [[477.370392,0.000000,593.874146],[140.316360,0.000000,558.312500],[174.859375,0.000000,583.824707],[485.520752,0.000000,587.662170],[507.420563,0.000000,583.146729],[632.046082,0.000000,559.666687],[654.848511,0.000000,479.292664],[647.623596,0.000000,383.791748],[644.462830,0.000000,346.990997],[652.138916,0.000000,243.136017],[658.460510,0.000000,170.889160],[648.526794,0.000000,149.215118],[623.691956,0.000000,145.828537],[594.793640,0.000000,125.960625],[577.183655,0.000000,109.027832],[560.025330,0.000000,101.803154],[458.428253,0.000000,99.093887],[359.540405,0.000000,98.416565],[349.606476,0.000000,107.447426],[299.033722,0.000000,98.642303],[259.749512,0.000000,105.866989],[274.424622,0.000000,91.191841],[251.847488,0.000000,126.637962],[132.414490,0.000000,246.296814],[71.004639,0.000000,300.030029],[33.752365,0.000000,344.958588],[36.235847,0.000000,314.931000],[64.457230,0.000000,481.776031],[149.121429,0.000000,577.954590],[211.977402,0.000000,145.988495],[74.791588,5.500000,271.921631],[113.631775,5.500000,233.081543],[401.196045,9.000000,79.969872],[427.278656,5.500000,88.803993],[394.865204,4.250000,91.748695],[379.933685,3.000000,94.693405],[412.406921,3.000000,94.693405],[408.101837,0.500000,100.582817],[529.547607,9.000000,79.331276],[468.553192,7.750000,82.275986],[499.661011,5.500000,88.165398],[477.101349,4.250000,91.110100],[533.421631,4.250000,91.110100],[506.317932,1.750000,96.999512],[168.691040,9.000000,169.679657],[154.787064,6.750000,191.912476],[188.205933,6.750000,158.493683],[176.707184,4.250000,178.321289],[675.069946,9.000000,280.614319],[672.064392,7.750000,265.815002],[672.211182,7.750000,301.535828],[669.126282,6.750000,267.424744],[660.395020,3.000000,292.471130],[654.426147,0.500000,273.158722],[240.303528,7.750000,592.342590],[223.827682,6.750000,607.885315],[225.887573,5.500000,600.700378],[249.441925,3.000000,562.500732],[221.165680,3.000000,597.171692],[236.628937,1.750000,573.552185],[242.216736,0.500000,562.041504],[236.406876,0.500000,569.165283],[418.004059,6.750000,598.372253],[436.519501,4.250000,592.339111],[411.380890,1.750000,586.644409],[553.887085,9.000000,603.703735],[553.753906,6.750000,597.815186],[543.512939,5.500000,594.949768],[539.377686,5.500000,594.981873],[565.657837,4.250000,591.833313],[664.676575,5.500000,393.065338],[661.791809,4.250000,407.660126],[653.079651,0.500000,437.343750],[653.130432,0.500000,449.713470]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/dude.png"},
  {coords: [[279.621979,0.000000,582.348022],[319.533112,0.000000,576.121887],[350.025208,0.000000,577.718323],[493.705200,0.000000,601.824524],[514.139648,0.000000,589.052979],[612.480652,0.000000,571.013245],[625.092529,0.000000,571.013245],[646.006165,0.000000,551.855957],[648.560425,0.000000,526.312805],[649.677979,0.000000,531.421448],[646.325623,0.000000,390.934357],[657.660339,0.000000,366.508789],[654.946350,0.000000,350.225067],[660.534058,0.000000,245.498337],[660.054993,0.000000,202.075058],[663.088257,0.000000,177.010880],[644.409912,0.000000,176.372284],[638.662659,0.000000,148.753815],[587.416870,0.000000,116.665298],[553.093262,0.000000,100.381569],[447.727875,0.000000,98.944763],[350.025513,0.000000,96.390434],[292.713165,0.000000,110.758438],[322.247375,0.000000,98.625458],[259.187836,0.000000,115.228500],[233.006165,0.000000,125.605423],[134.186279,0.000000,238.793198],[51.490459,0.000000,325.639771],[59.791973,0.000000,316.220764],[20.838722,0.000000,330.588776],[72.882812,0.000000,483.528198],[78.797035,7.750000,259.587311],[82.999611,7.750000,255.384750],[106.806061,6.750000,235.742798],[89.551605,0.500000,273.819397],[97.867592,0.500000,265.503448],[425.723907,9.000000,79.969872],[429.345276,4.250000,91.748695],[379.846741,1.750000,97.638107],[420.453766,0.500000,100.582817],[523.284973,9.000000,79.331276],[509.029602,7.750000,82.275986],[514.182068,7.750000,82.275986],[524.512878,5.500000,88.165398],[508.494904,4.250000,91.110100],[496.371490,1.750000,96.999512],[184.452850,6.750000,162.246750],[193.513321,5.500000,157.350754],[191.849106,3.000000,167.343826],[178.817490,0.500000,188.704285],[672.231628,7.750000,306.512024],[669.283447,6.750000,305.682922],[666.245483,5.500000,282.993774],[663.233521,4.250000,266.626831],[256.777252,9.000000,576.802490],[250.783157,9.000000,584.152161],[230.193405,9.000000,609.398315],[240.576385,6.750000,587.348816],[251.001862,4.250000,565.247192],[222.361359,1.750000,591.046387],[437.919067,9.000000,604.107422],[416.657990,7.750000,601.327515],[402.491180,6.750000,598.492554],[394.473450,6.750000,598.554688],[412.168488,5.500000,595.472717],[397.661865,4.250000,592.640381],[404.982086,1.750000,586.694031],[533.305908,7.750000,600.918518],[549.600220,6.750000,597.847412],[586.334412,5.500000,594.617798],[546.041443,4.250000,591.985413],[568.473450,1.750000,585.921875],[667.624573,6.750000,393.848389],[664.918701,5.500000,451.978943],[659.020325,3.000000,449.806152],[655.926636,1.750000,413.557800]], size: 7.000000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/8.png"},
  {coords: [[569.638794,0.000000,106.190018],[307.505371,0.000000,99.643219],[224.195801,0.000000,140.056274],[149.691238,0.000000,220.656647],[129.823395,0.000000,233.751373],[76.315590,0.000000,300.128113],[63.898174,0.000000,302.498505],[46.852432,0.000000,315.367340],[43.578747,0.000000,330.042480],[62.273525,0.000000,475.254852],[343.008301,0.000000,584.531494],[459.069885,0.000000,581.657898],[520.453186,0.000000,588.283264],[509.198273,0.000000,594.748901],[493.553131,0.000000,583.813232],[481.739441,0.000000,575.751221],[600.994690,0.000000,573.586121],[622.781616,0.000000,581.713867],[626.281128,0.000000,564.781006],[651.341736,0.000000,542.994202],[658.115112,0.000000,514.772583],[653.373901,0.000000,519.626648],[653.938538,0.000000,470.070099],[652.809692,0.000000,385.970306],[654.502930,0.000000,373.440002],[652.245117,0.000000,345.670227],[661.049927,0.000000,241.815445],[646.600586,0.000000,226.350113],[648.519531,0.000000,182.776260],[650.551575,0.000000,157.941422],[631.925476,0.000000,147.668823],[600.656128,0.000000,123.059753],[560.581360,0.000000,113.351631],[463.961609,0.000000,93.893257],[443.416412,0.000000,92.312859],[328.160156,0.000000,105.407600],[102.312553,1.750000,256.894043],[102.619293,0.500000,260.751740],[116.534355,0.500000,246.836716],[425.814240,6.750000,85.859283],[405.243958,5.500000,88.803993],[383.726898,4.250000,91.748695],[433.348724,4.250000,91.748695],[393.443237,3.000000,94.693405],[475.447357,9.000000,79.331276],[517.792664,9.000000,79.331276],[533.942932,9.000000,79.331276],[473.050140,7.750000,82.275986],[518.872131,7.750000,82.275986],[480.015442,5.500000,88.165398],[478.208130,3.000000,94.054810],[490.842499,3.000000,94.054810],[492.963837,0.500000,99.944221],[506.445953,0.500000,99.944221],[179.148987,9.000000,159.221741],[156.946045,7.750000,185.589050],[176.638504,5.500000,174.225525],[161.734055,4.250000,193.294373],[179.553268,4.250000,175.475204],[183.958740,4.250000,171.069748],[182.846436,3.000000,176.346481],[194.227646,0.500000,173.294174],[675.210388,9.000000,314.799622],[672.163391,7.750000,289.915314],[666.336121,5.500000,305.048920],[663.339539,4.250000,292.425415],[663.418335,4.250000,311.606934],[660.299683,3.000000,269.283875],[654.479980,0.500000,286.258179],[654.595520,0.500000,314.366028],[252.631653,1.750000,553.930420],[443.256409,9.000000,604.066101],[384.602966,7.750000,601.575989],[436.701630,6.750000,598.227295],[431.915344,5.500000,595.319641],[391.827698,4.250000,592.685608],[400.408325,3.000000,589.674316],[431.542358,0.500000,583.543335],[418.632385,0.500000,583.643433],[580.152893,7.750000,600.555298],[543.473511,7.750000,600.839661],[570.138916,4.250000,591.798584],[593.862244,3.000000,588.669861],[582.022217,1.750000,585.816833],[673.624451,9.000000,420.723389],[670.595398,7.750000,400.207794],[670.752075,7.750000,438.332031],[670.801270,7.750000,450.301453],[667.874756,6.750000,454.736145],[664.780212,5.500000,418.274109],[661.922791,4.250000,439.531769],[658.791382,3.000000,394.095825],[656.000549,1.750000,431.554932],[139.739334,0.000000,206.723022],[131.677292,0.000000,220.372620],[60.445236,0.000000,488.249969],[334.554779,0.000000,583.717407],[321.783203,0.000000,594.892517],[476.798004,0.000000,588.826050],[530.278870,0.000000,576.373779],[609.302979,0.000000,584.356018],[652.885925,0.000000,485.855347],[668.850342,0.000000,484.099243],[652.247375,0.000000,340.099915],[652.885986,0.000000,235.373260],[655.599976,0.000000,224.517441],[646.180969,0.000000,208.712677],[649.693054,0.000000,171.675156],[622.074524,0.000000,123.462540],[264.630798,0.000000,112.925995]], size: 7.500000, aspect: 1.000000, png: "@os2022bgsxobj/billboards/crowd/7.png"},
];

// Add racing event crowd
if (racingEvent && race_event_crowd != undefined) {
  for (var i = 0; i < race_event_crowd.length; i++) {
    for (var j = 0; j < race_event_crowd[i].coords.length; j++) {
      mx.add_billboard(race_event_crowd[i].coords[j][0], race_event_crowd[i].coords[j][1], race_event_crowd[i].coords[j][2], race_event_crowd[i].size, race_event_crowd[i].aspect, race_event_crowd[i].png);
    }
  }
}

/*
################################################################################
## Video screen display
##
################################################################################
*/

/*
 Colors
 ######
 red: honda
 orange: ktm
 yellow: suzuki
 green: kawi
 blue: yamaha
 white: husqvarna
 cyan: tm
 crimson: gasgas
*/
var teamAvatars = {
	active: {color: "blue"},
	aektivco: {color: "blue"},
	bootshouse: {color: "yellow"},
	btosports: {color: "yellow"},
	defenders: {color: "white"},
	galaxy: {color: "orange"},
	impact: {color: "crimson"},
	makani: {color: "green"},
	panicrev: {color: "white"},
	philsxugrc: {color: "crimson"},
	scr: {color: "crimson"},
	sdworks: {color: "red"},
	tsczproduction: {color: "white"},
	vurbmoto: {color: "yellow"},
	yogidesigns: {color: "orange"},
	default: {}
};

var riderAvatars = [
	{avatar: teamAvatars.active, re: /\bjace.*\bwilliams\b/i},
	{avatar: teamAvatars.active, re: /\bjonathan.*\bhernandez\b/i},
	{avatar: teamAvatars.active, re: /\bchase.*\bodom\b/i},
	{avatar: teamAvatars.active, re: /\bchristopher.*\bharris\b/i},
	{avatar: teamAvatars.active, re: /\bjack.*\bgatland\b/i},
	{avatar: teamAvatars.active, re: /\bjohannes.*\bbreindal\b/i},
	{avatar: teamAvatars.active, re: /\bwill.*\bknau\b/i},
	{avatar: teamAvatars.aektivco, re: /\bdanner.*\bbarton\b/i},
	{avatar: teamAvatars.bootshouse, re: /\bbrandon.*\bnigrin\b/i},
	{avatar: teamAvatars.bootshouse, re: /\bchristopher.*\bmcpherson\b/i},
	{avatar: teamAvatars.bootshouse, re: /\bemmanuel.*\bcepeda\b/i},
	{avatar: teamAvatars.btosports, re: /\bilan.*\bcigarro\b/i},
	{avatar: teamAvatars.defenders, re: /\bnicolas.*\bmarchini\b/i},
	{avatar: teamAvatars.defenders, re: /\bpablo.*\bvial\b/i},
	{avatar: teamAvatars.defenders, re: /\bemil.*\bhoule\b/i},
	{avatar: teamAvatars.defenders, re: /\baurelien.*\bbaillif\b/i},
	{avatar: teamAvatars.defenders, re: /\bberre.*\bbrands\b/i},
	{avatar: teamAvatars.galaxy, re: /\blogan.*\bheagney\b/i},
	{avatar: teamAvatars.impact, re: /\bcorentin.*\bjulian\b/i},
	{avatar: teamAvatars.impact, re: /\btyler.*\bmore\b/i},
	{avatar: teamAvatars.impact, re: /\bmaxime.*\bvanderbeek\b/i},
	{avatar: teamAvatars.makani, re: /\bchance.*\bsetser\b/i},
	{avatar: teamAvatars.panicrev, re: /\bhugo.*\bdelzenne\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\bbraden.*\bcarter\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\bmaximus.*\bvohland\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\bgatlin.*\bmorrow\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\bjakob.*\bhubbard\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\berin.*\brockafellow\b/i},
	{avatar: teamAvatars.philsxugrc, re: /\bcaleb.*\bhall\b/i},
	{avatar: teamAvatars.scr, re: /\bjacob.*\bcumbridge\b/i},
	{avatar: teamAvatars.sdworks, re: /\bdavid.*\bsalas\b/i},
	{avatar: teamAvatars.tsczproduction, re: /\btheo.*\bsieciechowicz\b/i},
	{avatar: teamAvatars.tsczproduction, re: /\blois.*\bgorin\b/i},
	{avatar: teamAvatars.tsczproduction, re: /\bnoa.*\bhouque\b/i},
	{avatar: teamAvatars.tsczproduction, re: /\bantoine.*\bmouqueron\b/i},
	{avatar: teamAvatars.vurbmoto, re: /\bzach.*\bfischer\b/i},
	{avatar: teamAvatars.yogidesigns, re: /\baustin.*\bbear\b/i},
	{avatar: teamAvatars.yogidesigns, re: /\bluke.*\bsullivan\b/i},
	{avatar: teamAvatars.yogidesigns, re: /\btrent.*\badams\b/i},
	
	/* catch all - this should be last */
	{avatar: teamAvatars.default, re: /.*/}
];

var brandRegExps = [
  { re: /^crf?[0-9]+/, color: "red" },
  { re: /^fc[0-9]+/, color: "white" },
  { re: /^kx[0-9]+/, color: "green" },
  { re: /^[0-9]+sx/, color: "orange" },
  { re: /^rmz?[0-9]+/, color: "yellow" },
  { re: /^yz[0-9]+/, color: "blue" },
  { re: /./, color: "none" },
];

function getBrandColor(model) {
  var i;

  for (i = 0; i < brandRegExps.length - 1; i++)
    if (model.match(brandRegExps[i].re))
      break;

  return brandRegExps[i].color;
}

var avatarMap = [];
function getAvatar(slot, name) {
  var i;

  if (slot in avatarMap)
    return avatarMap[slot];

  for (i = 0; i < riderAvatars.length; i++)
    if (name.match(riderAvatars[i].re)) {
      avatarMap[slot] = riderAvatars[i].avatar;
      return avatarMap[slot];
    }

  return null;
}


function makeCellMap(font, characters, key) {
	var i, map;

	map = [];

  // * = 9
	key = characters.indexOf(key);

  // for 128 characters set up map for all indexes needed equal to the key
  // map["!"] = *
	for (i = 0; i < 128; i++)
    map[String.fromCharCode(i)] = key;

  // map[characters[i]] = i
  // i = 0
  // map[!] = 0;
  // i = 1
  // map["] = 1;
	for (i = 0; i < characters.length; i++)
    map[characters[i]] = i;

  font.map = map;
}

function getCellCoords(font, character) {
  // if character is not in the font map we created, return
	if (!(character in font.map)) {
    mx.message("Not in map " + character);
  }
  /* return the coords in our font variable
  character = ','
  font.coords[font.map[,]];
  font.map[,] = 11;
  font.coords[11] = [360, 0, 40] */
	return font.coords[font.map[character]];
}

function drawText(font, startX, startY, textToDraw, draw) {
  var i, cellCoords, sourceX, sourceY, destinationX, destinationY, width, height;

  // starting x and y values set to dx and dy
	destinationX = startX;
	destinationY = startY;

  // go through the whole sentence
	for (i = 0; i < textToDraw.length; i++) {
		if (textToDraw[i] == "\n") {
      // reset the destination x to the beginning
			destinationX = startX;
			destinationY += font.line_height / font.height * font.yscale;
			continue;
		}

		if (textToDraw[i] == " ") {
			cellCoords = getCellCoords(font, ","); /* comma about as wide as space */
			destinationX += cellCoords[2] / font.width * font.xscale;
			continue;
		}

    // get cell coordinates of current character from font
		cellCoords = getCellCoords(font, textToDraw[i]);
    //mx.message("character: " + textToDraw[i] + " | coords: [" + cellCoords[0].toString() + ", " + cellCoords[1].toString() + ", " + cellCoords[2].toString() + "]");
    sourceX = cellCoords[0] / font.width * font.xscale + font.xoffset;
		sourceY = cellCoords[1] / font.height * font.yscale + font.yoffset;
		width = cellCoords[2] / font.width * font.xscale;
		height = font.line_height / font.height * font.yscale;
    if (draw) {
      mx.paste_custom_frame(font.tid, 1, sourceX, sourceY, destinationX, destinationY, width, height);
    }
    // new X destination
    destinationX += width - font.overlap / font.width * font.xscale;
	}

  return destinationX - startX;
}

function drawScreenText(f, x, y, s, c) {
  if (!c) {
    drawText(f, x, y, s, true);
    return;
  }
  var w;
  w = drawText(f, x, y, s, false);
  drawText(f, x - w * 0.5, y, s, true);
}

var screenTextureID = mx.read_texture("@os2022bgsxobj/statue/other/timingtower/timingtower.seq");

var numbersFont = {
  tid: screenTextureID,
  xoffset: 0,
  yoffset: 0,
  xscale: 555 / 2048,
  yscale: 410 / 1024,
  width: 2048,
  height: 2048,
  line_height: 283,
  overlap: 0,
  coords: [ [ 0, 0, 223 ], [ 223, 0, 142], [ 365, 0, 217 ], [ 582, 0, 201 ],
  [ 783, 0, 221 ], [ 1004, 0, 207 ], [ 1211, 0, 198], [ 1409, 0, 218 ],
  [ 1627, 0, 204 ], [ 1831, 0, 202 ], [ 0, 283, 99 ], [ 99, 283, 90 ], 
  [ 189, 283, 154 ], [ 343, 283, 132 ], [ 475, 283, 159 ], [ 634, 283, 175 ], 
  [ 809, 283, 187 ], [ 996, 283, 204 ], [ 1200, 283, 175 ], [ 1375, 283, 129 ], 
  [ 1504, 283, 148 ], [ 1652, 283, 75 ], [ 1727, 283, 73 ], [ 1800, 283, 144 ], 
  [ 0, 566, 154 ], [ 154, 566, 135 ], [ 289, 566, 140 ], [ 429, 566, 100 ], 
  [ 533, 566, 138 ], [ 671, 566, 148 ], [ 819, 566, 143 ], [ 962, 566, 133 ], 
  [ 1095, 566, 95 ]]
};

makeCellMap(numbersFont, "0123456789:.FLCHQMEahilnpsufygevt", ".");

var textFont = {
  tid: screenTextureID,
  xoffset: 0,
  yoffset: 0.5,
  xscale: 520 / 2048,
  yscale: 475 / 1024,
  width: 2048,
  height: 2048,
  line_height: 196,
  overlap: 0,
  coords: [ [ 0, 0, 120 ], [ 120, 0, 108 ], [ 228, 0, 108 ], [ 336, 0, 112 ],
  [ 448, 0, 111 ], [ 559, 0, 76 ], [ 635, 0, 109 ], [ 744, 0, 108 ],
  [ 852, 0, 56 ], [ 908, 0, 64 ], [ 972, 0, 108 ], [ 1080, 0, 46 ],
  [ 1126, 0, 164 ], [ 1290, 0, 107 ], [ 1397, 0, 114 ], [ 1511, 0, 111 ],
  [ 1622, 0, 112 ], [ 1734, 0, 79 ], [ 1813, 0, 98 ], [ 0, 196, 88 ],
  [ 88, 196, 98 ], [ 186, 196, 103 ], [ 289, 196, 149 ],[ 438, 196, 103 ],
  [ 541, 196, 101 ], [ 642, 196, 91 ], [ 733, 196, 127 ], [ 860, 196, 118 ],
  [ 978, 196, 135 ], [ 1113, 196, 130 ], [ 1243, 196, 122 ], [ 1365, 196, 103 ],
  [ 1469, 196, 128 ], [ 1606, 196, 124 ], [ 1730, 196, 65 ], [ 1795, 196, 112 ],
  [ 1907, 196, 126 ], [ 0, 392, 118 ], [ 118, 392, 157 ], [ 275, 392, 135 ],
  [ 410, 392, 140 ], [ 550, 392, 130 ], [ 680, 392, 132 ], [ 818, 392, 127 ],
  [ 945, 392, 112 ], [ 1057, 392, 115 ], [ 1172, 392, 119 ], [ 1291, 392, 117 ],
  [ 1408, 392, 164 ], [ 1572, 392, 123 ], [ 1695, 392, 116 ], [ 1811, 392, 114 ],
  [ 1925, 392, 61 ], [ 0, 588, 152 ], [ 152, 588, 118 ], [ 270, 588, 117 ],
  [ 387, 588, 161 ], [ 548, 588, 82 ], [ 630, 588, 129 ], [ 759, 588, 80 ],
  [ 839, 588, 77 ], [ 916, 588, 74 ], [ 990, 588, 80 ], [ 1070, 588, 122 ],
  [ 1192, 588, 116 ], [ 1308, 588, 97 ], [ 1405, 588, 66 ], [ 1471, 588, 72 ],
  [ 1543, 588, 102 ], [ 1645, 588, 65 ], [ 1710, 588, 85 ], [ 1795, 588, 65 ],
  [ 1860, 588, 100 ], [ 0, 784, 80 ], [ 80, 784, 116 ], [ 196, 784, 111 ], 
  [ 307, 784, 90 ], [ 397, 784, 97 ], [ 494, 784, 73 ], [ 567, 784, 70 ], 
  [ 637, 784, 115 ], [ 752, 784, 62 ], [ 814, 784, 117 ], [ 931, 784, 88 ], 
  [ 1019, 784, 112 ], [ 1131, 784, 112 ], [ 1243, 784, 115 ], [ 1358, 784, 113 ], 
  [ 1471, 784, 111 ], [ 1582, 784, 115 ], [ 1697, 784, 113 ], [ 1810, 784, 130 ] ]
};
  
makeCellMap(textFont, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-=+_[]\\|:;\"'<>/?,.~`0123456789",
"*");

var colors = {
	width: 490,
	height: 150,
  XValues: [23, 279, 536, 779],
  YStart: 611,
  YDifference: 79,
  yoffset: 0.2,
  xoffset: 0,
	coords: {
		red: [512, 312],
		orange: [24, 460],
		yellow: [512, 164],
		green: [512, 18],
		blue: [24, 164],
		white: [24, 18],
		cyan: [512, 460],
		crimson: [24, 312],
		get default() {return this.white;}
	}
}

function getCondensedName(name) {
  // trim team name off
  name = name.replace(/\|.*/gm, "");
  // trim beginning and ending white spaces
  name = name.replace(/^\s+|\s+$/gm,"");
  // remove any non-alphabetical characters and spaces except for apostrophes
  name = name.replace(/[^A-Za-z &^\']+/gm, "");
  // trim any final spaces off
  name = name.replace(/\s+$/gm, "");
  
  if (name.length == 0) {
    return "Unknown Rider";
  }

  var nameArray = name.split(" ");
  if (nameArray.length > 1) {
    var lastNameEntry = nameArray[nameArray.length - 1];
    while (lastNameEntry.toLowerCase().match(/(jr\W|jr$)/) || lastNameEntry.toLowerCase().match(/(sr\W|sr$)/)) {
        nameArray.pop();
        lastNameEntry = nameArray[nameArray.length - 1];
        if (nameArray.length == 1) {
          if (nameArray[0].length > 10) {
            nameArray[0] = nameArray[0].substring(0, 10) + ".";
          }
          return nameArray[0].toUpperCase();
        }
    }
    if (nameArray[nameArray.length - 1].length > 10) {
      nameArray[nameArray.length - 1] = nameArray[nameArray.length - 1].substring(0, 10) + ".";
    }
    return nameArray[nameArray.length - 1].toUpperCase();
  }
  if (name.length > 10) {
    name = name.substring(0, 10) + ".";
  }
  return name.toUpperCase();
}

var towerMaxRidersShowing = 5;
var lastScreenUpdate = 0;
var prevHead;
function updateScreen() {
  var riderName, numOfPeopleOnTower;
  var r = globalRunningOrder;
  // Update Qualifying Times
  if (!racingEvent) {

    // copy bestPlayerLaptimes into the sorted array
    var bestPlayerLapsArrSrtd = bestPlayerLaptimes.slice();
    // sort the array
    bestPlayerLapsArrSrtd.sort(function (a, b) {return a[0] - b[0];});

    numOfPeopleOnTower = towerMaxRidersShowing
    if (r.length < towerMaxRidersShowing) {
      numOfPeopleOnTower = r.length;
    }
      
    
    mx.begin_custom_frame(screenTextureID);
    mx.paste_custom_frame(screenTextureID, 0, 0, 0, 0, 0, 1, 1);
    drawHead(548 / 1024, "Qualifying", true);
    var startY = (630 / 1024);
    var colorY = (colors.YStart / 1024);
    for (var i = 0; i < numOfPeopleOnTower; i++) {
      // times are stored in the first column of every row
      var time = bestPlayerLapsArrSrtd[i][0];

      // if no lap, don't display
      if (time != undefinedTime) {
        // slots are stored in the second column of every row
        var slot = bestPlayerLapsArrSrtd[i][1];
        var riderNum = mx.get_rider_number(slot);
        var text = timeToString(time, true) + " | " + riderNum.toString();
        drawBody(startY, text, true);
        colorWork(slot, colorY);
      }
      startY += (79 / 1024);
      colorY += (colors.YDifference / 1024);
    }
    mx.end_custom_frame(screenTextureID);
    return;
  }

  var seconds = mx.seconds;
  if (seconds < lastScreenUpdate) lastScreenUpdate = seconds - 1/8;
  if (seconds - lastScreenUpdate < 1 / 8) return;

  var center = true;
  var head = timeOrLapsRemaining();
  if (!gateDropped || seconds == 0) {
    head = "Main Event";
    if (!mainEvent) {
      if (globalFinishTime / 60 == 6) head = "Heat";
      else head = "LCQ"
    }
  }

  // If there's no need to update the screen then return
  if (prevHead == head && !checkTopFivePositionChange()) return;

  prevHead = head;
  lastScreenUpdate = seconds;
  
  numOfPeopleOnTower = towerMaxRidersShowing;
  if (r.length < towerMaxRidersShowing) {
    numOfPeopleOnTower = r.length;
  }

  mx.begin_custom_frame(screenTextureID);
  // Paste the original texture
  mx.paste_custom_frame(screenTextureID, 0, 0, 0, 0, 0, 1, 1);
  // Draw the head text
  drawHead(548 / 1024, head, center);
  // Update the screen based on the running order
  var startY = (625 / 1024);
  var colorY = (colors.YStart / 1024);
  for (var i = 0; i < numOfPeopleOnTower; i++) {
    var timingGate = r[i].position;
    var slot = r[i].slot;
    if (timingGate > 0) {
      riderName = getCondensedName(mx.get_rider_name(slot));
      // Draw body and color
      drawBody(startY, riderName, true);
      colorWork(slot, colorY);
    }
    startY += (79 / 1024);
    colorY += (colors.YDifference / 1024);
  }
  mx.end_custom_frame(screenTextureID);

}

function drawBody(y, t, c) {
  var coords = [82, 329, 596, 840];
  if (c) coords = [169, 427, 675.5, 917];
  drawScreenText(textFont, coords[0] / 1024, y, t, c);
  drawScreenText(textFont, coords[1] / 1024, y, t, c);
  drawScreenText(textFont, coords[2] / 1024, y, t, c);
  drawScreenText(textFont, coords[3] / 1024, y, t, c);
}

function drawHead(y, t, c) {
  // Northwest coordinates on board in px of where text should be placed
  var coords = [30, 286, 543, 786];
  if (c) coords = [143, 399, 649, 892];
  drawScreenText(numbersFont, coords[0] / 1024, y, t, c);
  drawScreenText(numbersFont, coords[1] / 1024, y, t, c);
  drawScreenText(numbersFont, coords[2] / 1024, y, t, c);
  drawScreenText(numbersFont, coords[3] / 1024, y, t, c);
}

function colorWork(slot, destinationY) {
  var t = {};

  t.color = getBrandColor(mx.get_bike_model(slot));
  t.name = mx.get_rider_name(slot).replace(/\|.*/, "").toUpperCase();
  t.avatar = getAvatar(slot, t.name);

  if ("color" in t.avatar)
    t.color = t.avatar.color;

  var colorCoords = colors.coords[t.color];

  var sourceX = colorCoords[0] / 2048 + colors.xoffset;
  var sourceY = colorCoords[1] / 2048 + colors.yoffset;
  var width = colors.width / 2048;
  var height = colors.height / 2048;
  
  // draw colors
  mx.paste_custom_frame(screenTextureID, 1, sourceX, sourceY, colors.XValues[0] / 1024, destinationY, width, height);
  mx.paste_custom_frame(screenTextureID, 1, sourceX, sourceY, colors.XValues[1] / 1024, destinationY, width, height);
  mx.paste_custom_frame(screenTextureID, 1, sourceX, sourceY, colors.XValues[2] / 1024, destinationY, width, height);
  mx.paste_custom_frame(screenTextureID, 1, sourceX, sourceY, colors.XValues[3] / 1024, destinationY, width, height);
}

var crashSounds = [];
// choose random directories to assign to crashsounds so it's not all the same sound when someone crashes
const crashSoundDirectories = [
  "@os2022bgsxobj/sounds/crashes/crash1.raw",
  "@os2022bgsxobj/sounds/crashes/crash2.raw",
  "@os2022bgsxobj/sounds/crashes/crash3.raw",
  "@os2022bgsxobj/sounds/cheers/roar1.raw",
  "@os2022bgsxobj/sounds/cheers/roar2.raw"
];
const numOfCrashVariants = crashSoundDirectories.length;

addCrashSounds();

function addCrashSounds() {
  if (!stadium) {
    for (var i = 0; i < numOfBleachers; i++) {
      crashSounds.push([]);
      for (var j = 0; j < numOfCrashVariants; j++) {
        crashSounds[i][j] = mx.add_sound(crashSoundDirectories[j]);
        mx.set_sound_freq(crashSounds[i][j], 44100);
        mx.set_sound_pos(crashSounds[i][j], bleacherSoundPositions[i][0], bleacherSoundPositions[i][1], bleacherSoundPositions[i][2]);
      }
    }
    return;
  }

  for (var i = 0; i < numOfCrashVariants; i++) {
    crashSounds[i] = mx.add_sound(crashSoundDirectories[i]);
    mx.set_sound_freq(crashSounds[i], 44100);
  }
}

var setStartDelay = false;
var initializeRiderDown = false;
var riderDownCheckGates = [];
var timesRidersLastCrashed = [];
var startDelay = undefinedTime;
// this number is the top x people the crowd will react to going down
var maxNumRidersDown = 3;
const baseVolFactor = 2.75;

function intializeRiderDownStuff() {
    var r = globalRunningOrder;
    for (var i = 0; i < r.length; i++) {
        timesRidersLastCrashed[r[i].slot] = -1;
        riderDownCheckGates[r[i].slot] = 0;     
    }
    // change the number of riders to cheer for going down if somehow the number is greater than the running order length
    if (r.length < maxNumRidersDown) {
      maxNumRidersDown = r.length;
    }
}

/*
###############################
REWRITE FUNCTION TO WORK WITH ANY NUMBER OF PEOPLE -> DONE
###############################
*/

function isRiderDown() {
  
  var r = globalRunningOrder;
  if (!initializeRiderDown) {
    intializeRiderDownStuff();
    initializeRiderDown = true;
  }
  
  // wait 20 seconds after gate drop until checking for the top 3 riders going down
  if (gateDropped && !setStartDelay) {
    startDelay = gateDropTime + 20;
    setStartDelay = true;
  } 
		
  if (mx.seconds < startDelay) return;

  var seconds = mx.seconds;
  var slotsDownArr = [];
  var sumPositionsDown = 0;

  for (var i = 0; i < maxNumRidersDown; i++) {
    var slot = r[i].slot;
    var timingGate = r[i].position;
    if (mx.get_rider_down(slot) === 1 && timingGate != riderDownCheckGates[slot]) {

      // if rider is down and happened to roll into the next timing gate after their gate check
      if (timingGate === (riderDownCheckGates[slot] + 1) && seconds < (timesRidersLastCrashed[slot] + 4)) {
        riderDownCheckGates[slot] = timingGate;
        return;
      }

      timesRidersLastCrashed[slot] = seconds;
      // store the slot down, and position they're in.
      slotsDownArr[slotsDownArr.length] = [slot, i + 1];
      sumPositionsDown = i + 1;

      // go through again and see if someone's already down and accounted for
      for (var j = 0; j < maxNumRidersDown; j++) {
        if (i == j) continue;
        var slotTwo = r[j].slot;
        var timingGateTwo = r[j].position;
        if (mx.get_rider_down(slotTwo) === 1) {
          // If this is the first time the rider has been caught crashing as well, set their down check gate and time they crashed
          if (timingGateTwo != riderDownCheckGates[slotTwo]) {
            riderDownCheckGates[slotTwo] = timingGateTwo;
            timesRidersLastCrashed[slotTwo] = seconds;
          }
          // store the slot down, and position they're in.  Accumulate sum of positions down
          slotsDownArr[slotsDownArr.length] = [slotTwo, j + 1];
          sumPositionsDown += (j + 1);
        }
      }
      riderDownCheckGates[slot] = timingGate;
    }
  }

  
  const numRidersDown = slotsDownArr.length;
  if (numRidersDown < 1) return;

  var ridersDownTogether = 0;
  var numRidersDownAtSameTime = 0;

  // See how many riders are down at the same time, or same gate
  if (numRidersDown > 1) {
    for (var i = 0; i < numRidersDown; i++) {
      var tg = riderDownCheckGates[slotsDownArr[i][0]];
      
      for (var j = i + 1; j < numRidersDown; j++) {
        var tg2 = riderDownCheckGates[slotsDownArr[j][0]];
        
        /* Have to take the absolute value because the slots down doesn't take into account in which order the riders crashed, just that they crashed and the times
            it happened, and since the gaps can never be less than zero, we can take the absolute value which essentially flip flops the times 
            if someone crashed before the other person */
        if (Math.abs(timesRidersLastCrashed[slotsDownArr[i][0]] - timesRidersLastCrashed[slotsDownArr[j][0]]) <= 2) {
          numRidersDownAtSameTime++;
        }
  
        if (tg === tg2) {
          ridersDownTogether++;
        }
      }
    }
  }

  const avgPositionDown = sumPositionsDown / numRidersDown;
  // volume is determined by what positions are currently down, how many riders are down, how many are down together, how many crashed at the same time
  var volume = (baseVolFactor + ((numRidersDownAtSameTime + ridersDownTogether) / 2)) / (avgPositionDown / numRidersDown);

  playCrashSound(volume);
}

var maxCrashRepetitions = Math.ceil(numOfBleachers / numOfCrashVariants);
var crashVariantCounter = [];
function playCrashSound(multiplier) {
	var volume, randNumber;
	volume = multiplier;
  
	if (!stadium) {
    for (var i = 0; i < numOfCrashVariants; i++) {
      crashVariantCounter[i] = 0;
    }

	  for (var i = 0; i < numOfBleachers; i++) {
      do {
        randNumber = randomIntFromInterval(0, numOfCrashVariants - 1);
      }
      while (crashVariantCounter[randNumber] == maxCrashRepetitions);

      crashVariantCounter[randNumber]++;
	    mx.set_sound_vol(crashSounds[i][randNumber], volume);
	    mx.start_sound(crashSounds[i][randNumber]);
	  }
    return;
	}
		
  // if the sounds are in a stadium, then just play a random variant for all the riders
	randNumber = Math.floor((mx.seconds * 1234) % numOfCrashVariants);
	mx.set_sound_vol(crashSounds[randNumber], volume);
	mx.start_sound(crashSounds[randNumber]);
  
}

var everyRiderFinished = false;
const timeToGiveUp = 30;
// flags to hold whether a person has finished the race or not
var ridersFinishedArr = [];
var timesUntilGiveUpArr = [];
var setUpRiderFinishFlags = false;
var setSecondsAtFirstFinish = false;

function updateRiderFinishFlags() {
  var r = globalRunningOrder;
  var timingGate, slot, riderLapsRemain;

  // stores rider start / finish positions
  for (var i = 0; i < r.length; i++) {
    slot = r[i].slot;
    timingGate = r[i].position;

    if (!setUpRiderFinishFlags) {
      // Set all active slots to unfinished
      ridersFinishedArr[slot] = false;
      if (i == r.length - 1) {
        setUpRiderFinishFlags = true;
      }
    }
    
    // stores rider positions after lap 1
    if (timingGate == firstLapLength && timingGate != currentTimingGates[slot]) {
      riderPositionsAfterL1[slot] = (i + 1);
    } 
      

    // if time has expired
    if (mx.seconds >= gateDropTime + globalFinishTime || globalFinishTime == 0) {
      
      // get laps that remain
      if (globalFinishTime == 0 && globalFinishLaps == 0) {
        // Finish line is now first timing gate
        riderLapsRemain = 1 - globalRunningOrder[0].position;
      }
      else if (globalFinishTime == 0) {
        riderLapsRemain = globalFinishLaps - mx.index_to_lap(globalRunningOrder[0].position);
      }
      else {
        riderLapsRemain = lapsRemaining();
      }
        

      // if first has finished
      if (riderLapsRemain == 0) {

        // set up all times players have to hit the next timing gate except first
        if (!setSecondsAtFirstFinish) {
          for (var j = 0; j < ridersFinishedArr.length; j++) {
            if (j == r[0].slot) continue;
            timesUntilGiveUpArr[j] = mx.seconds + timeToGiveUp;
          }
          setSecondsAtFirstFinish = true;
        }

        if (timingGate != currentTimingGates[slot]) {
          // if rider hit the finish timing gate, set the position they finished and a flag that they have finished
          if ((timingGate - firstLapLength) % normalLapLength == 0 || globalFinishLaps == 0) {
            riderFinishPositions[slot] = (i + 1);
            ridersFinishedArr[slot] = true;
          }

          // if they haven't finished, but hit a new timing gate reset their time to give up
          else if (!ridersFinishedArr[slot]) {
            timesUntilGiveUpArr[slot] = mx.seconds + timeToGiveUp;
          }

          // if they have hit a new timing gate and have finished it means we've incorrectly assumed they've given up, so reset
          else if (ridersFinishedArr[slot]) {
            ridersFinishedArr[slot] = false;
            timesUntilGiveUpArr[slot] = mx.seconds + timeToGiveUp;
            if (everyRiderFinished && displayedAwards) {
              everyRiderFinished = false;
              displayedAwards = false;
            }
          }
        }

        // if current in game time is greater than the riders time to give up, set flag that they have finished
        else if (mx.seconds > timesUntilGiveUpArr[slot] && ridersFinishedArr[slot] == 0) {
          riderFinishPositions[slot] = (i + 1);
          ridersFinishedArr[slot] = true;
        }
      }
      // if first is the only rider and they haven't finished (going back in demos)
      else if (everyRiderFinished) {
        displayedAwards = false;
        ridersFinishedArr[r[0].slot] = false;
        everyRiderFinished = false;
        setSecondsAtFirstFinish = false;
      }
    }
  }
  if (!everyRiderFinished) {
    everyRiderFinished = true;
    for (var i = 0; i < r.length; i++) {
      slot = r[i].slot;
      if (ridersFinishedArr[slot] == false) {
        everyRiderFinished = false;
        break;
      }
    }
  }
}

var firstLapGates = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]; 
var normalLapGates = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]; 
var flaggersArr = [];
var flaggerCount = flaggersArr.length;
var starterIndex = 0;
var finisherIndex = 1;
var firstFlaggerIndex = 2;
var thirtyBoardIndex = firstFlaggerIndex + flaggerCount;
var greenFlagIndex = thirtyBoardIndex + 1;
var whiteFlagIndex = greenFlagIndex + 1;
var checkedFlagIndex = whiteFlagIndex + 1;
var firstYellowFlagIndex;

var starterStartPos = [312.8, 385.2];
var starterEndPos = [284.7, 357.5];
var starterFeetPerSecond = 10.0;
var starterRunVector = [ 0, 0 ];
var starterRunDistance;

movv2(starterRunVector, starterEndPos);
subv2(starterRunVector, starterStartPos);

starterRunDistance = Math.sqrt(dotv2(starterRunVector, starterRunVector));
starterRunDuration = starterRunDistance / starterFeetPerSecond;
starterRunStartTime = 6.5;
starterRunEndTime = starterRunStartTime + starterRunDuration;

function updateStarter() {
	var t = mx.seconds;
	var v = [ 0, 0 ];
	var a, f;


	if (t < starterRunStartTime)
		movv2(v, starterStartPos);
	else if (t > starterRunEndTime) {
		movv2(v, starterEndPos);
		poseAnimate(flaggerIdleAnim, starterIndex, t);
		poseAnimate(flagIdleAnim, thirtyBoardIndex, t);
		return;
	} else {
		movv2(v, starterRunVector);
		scalev2(v, (t - starterRunStartTime) / starterRunDuration);
		addv2(v, starterStartPos);
	}

	a = Math.atan2(starterRunVector[0], starterRunVector[1]) - Math.PI / 2.0;
	a -= Math.PI * 4.0; /* force vertical Y axis */
	mx.move_statue(starterIndex, v[0], 3.9, v[1], a);
	mx.move_statue(thirtyBoardIndex, v[0], 3.9, v[1], a);

	/*
	 turn 0-11
	 show 12-17
	 1st step 18-28
	 run cycle 29-42
	*/

	f = Math.max(0.0, t - 5.0) * 16.0;

	if (f > 42.0)
		f = (f - 29.0) % 13.0 + 29.0;

	poseAnimateFrame(flaggerStartAnim, starterIndex, f);
	poseAnimateFrame(flagStartAnim, thirtyBoardIndex, f);
}

var globalLastLap = 1000000;
var globalHalfwayLap = 1000000;
var gDropTime = -1;

function updateLastLap() {
	var p, l;

	if (globalLastLap < 1000000) {
		/*
		 TODO: incrementally check if the last lap is wrong because of lag.
		 (e.g. leader hits lap x before buzzer but has enough lag that second place
		 temporarily looked like it had the lead and hit lap x after buzzer.)
		*/
		return;
	}

	if (globalFinishTime == 0) {
		globalLastLap = globalFinishLaps;
		globalHalfwayLap = Math.floor(globalLastLap / 2);
		return;
	}

	p = mx.get_running_order_position(0);

	l = mx.index_to_lap(p);

	if (globalHalfwayLap == 1000000 && mx.seconds >= gDropTime + globalFinishTime / 2)
		globalHalfwayLap = l + 1;

	if (globalLastLap == 1000000 && mx.seconds >= gDropTime + globalFinishTime)
		globalLastLap = l + 1 + globalFinishLaps;
}

var lastPlace;
var setLastPlace = false;
var resetLastPlace = false;
function updateFinisher() {
	var p, l, lastLap, timeExpired, nearFinish;

  p = mx.get_running_order_position(0);

  if (p <= firstLapLength - 1 && !setLastPlace) {
    lastPlace = globalRunningOrder.length - 1;
    setLastPlace = true;
    resetLastPlace = false;
  }
  else
    setLastPlace = false;

  if (p > firstLapLength - 1 && globalRunningOrder.length > 1 && !resetLastPlace) {
    var i, j;
    i = 0;
    j = 1;
    while (i == 0) {
      // keep looping until there is a person found with a position > 0
      if (globalRunningOrder[globalRunningOrder.length - j].position > 0) {
        i = 1;
        lastPlace = globalRunningOrder.length - j;
        resetLastPlace = true;
      }
      j++;
    }
  }

	if (gDropTime < 0)
		gDropTime = mx.get_gate_drop_time();

	updateLastLap();

	l = mx.index_to_lap(p + 1);

	lastLap = globalLastLap;

	timeExpired = (mx.seconds >= gDropTime + globalFinishTime);

	nearFinish = (mx.index_to_lap(l) == p);

	if (timeExpired && nearFinish)
		lastLap = Math.min(lastLap, l + globalFinishLaps);

	if (l >= lastLap) {
		/* checkered */
		poseAnimate(flaggerWaveAnim, finisherIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, greenFlagIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, whiteFlagIndex, mx.seconds);
		poseAnimate(flagWaveAnim, checkedFlagIndex, mx.seconds);
	} else if (l == lastLap - 1 && globalRunningOrder[0].position > 0) {
		/* white */
		poseAnimate(flaggerWaveAnim, finisherIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, greenFlagIndex, mx.seconds);
		poseAnimate(flagWaveAnim, whiteFlagIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, checkedFlagIndex, mx.seconds);
	} else if (l == globalHalfwayLap) {
		/* green/white crossed */
		poseAnimate(flaggerCrossedAnim, finisherIndex, mx.seconds);
		poseAnimate(flagCrossedAnim, greenFlagIndex, mx.seconds);
		poseAnimate(flagCrossedAnim2, whiteFlagIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, checkedFlagIndex, mx.seconds);
    // wave green flag until last active rider crosses finish for first lap
	} else if (l == 0 || (globalRunningOrder[lastPlace].position < firstLapLength)) {
		if (p >= firstLapLength + normalLapLength - 2 || p < firstLapLength - 1) {
      // leader came around second lap without everyone crossing the first lap or first hasn't reached the finish on the first lap yet, idleAnimate
			idleAnimate();
			return;
		}
		/* green, first lap */
		poseAnimate(flaggerWaveAnim, finisherIndex, mx.seconds);
		poseAnimate(flagWaveAnim, greenFlagIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, whiteFlagIndex, mx.seconds);
		poseAnimate(flagOnGroundAnim, checkedFlagIndex, mx.seconds);
	} else {
		/* green */
		idleAnimate();
	}
}

function idleAnimate() {
	poseAnimate(flaggerIdleAnim, finisherIndex, mx.seconds);
	poseAnimate(flagIdleAnim, greenFlagIndex, mx.seconds);
	poseAnimate(flagOnGroundAnim, whiteFlagIndex, mx.seconds);
	poseAnimate(flagOnGroundAnim, checkedFlagIndex, mx.seconds);
}

function checkFlaggerGates(f) {
	var i, a;

	a = flaggersArr[f];
	for (i = 0; i < a.length; i++)
		if (yellowGatesArr[a[i]].length > 0)
			return true;

	return false;
}

var statuePosesArr = [];

function poseAnimateFrame(anim, statueIndex, frame) {
	if (!(statueIndex in statuePosesArr))
		statuePosesArr[statueIndex] = { anim:null, frame:-1 };

	if (statuePosesArr[statueIndex].anim === anim
	 && statuePosesArr[statueIndex].frame == frame)
		return;

	statuePosesArr[statueIndex].anim = anim;
	statuePosesArr[statueIndex].frame = frame;

	if ("cached_poses" in anim)
		mx.pose_statue_from_sequence(statueIndex, anim.cached_poses, frame);
	else
		mx.pose_statue(statueIndex, anim.bone_count, anim.rest_centers, anim.poses[frame].centers, anim.poses[frame].rotations);
}

function poseAnimate(anim, statueIndex, seconds) {
	var f;

	f = seconds * anim.fps % (anim.frame_count - 1);

	poseAnimateFrame(anim, statueIndex, f);
}

function cachePoseSequence(anim) {
	if ("cache_pose_sequence" in mx)
		anim.cached_poses = mx.cache_pose_sequence(anim);
}

var activeRiderSlots = null;
var flaggerRiderDown;
var yellowGatesArr;

function initFlaggerStuff() {
	var i;

	activeRiderSlots = mx.get_running_order();
	flaggerRiderDown = [];
	for (i = 0; i < activeRiderSlots.length; i++) {
		activeRiderSlots[i] = activeRiderSlots[i].slot;
		flaggerRiderDown.push([]);
	}

	yellowGatesArr = [];
	for (i = 0; i < firstLapGates.length; i++) {
		yellowGatesArr[firstLapGates[i]] = [];
	}
	for (i = 0; i < normalLapGates.length; i++) {
		yellowGatesArr[normalLapGates[i]] = [];
	}
}

function wrapTimingPosition(t) {
	return firstLapGates.length + (t - firstLapGates.length) % normalLapGates.length;
}

function gateFromTimingPosition(t) {
	if (t < firstLapGates.length)
		return firstLapGates[t];

	return normalLapGates[(t - firstLapGates.length) % normalLapGates.length];
}

function addToArray(a, i) {
	if (a.indexOf(i) == -1)
		a.push(i);
}

function removeFromArray(a, i) {
	var j;

	j = a.indexOf(i);

	if (j >= 0)
		a.splice(j, 1);
}

function checkYellow(i) {
	var j, slot, g;

	if (activeRiderSlots.length <= i)
		return;

	slot = activeRiderSlots[i];

	if (mx.get_rider_down(slot)) {
		if (debugBool && flaggerRiderDown[i].length == 0)
			debugMessage("Slot " + slot.toFixed(0) + " down!");
		g = gateFromTimingPosition(mx.get_timing_position(slot));
		addToArray(yellowGatesArr[g], i);
		addToArray(flaggerRiderDown[i], g);
		
	} else {
		if (debugBool && flaggerRiderDown[i].length > 0)
			debugMessage("Slot " + slot.toFixed(0) + " back up!");
		for (j = 0; j < flaggerRiderDown[i].length; j++) {
			if (debugBool) debugMessage("removing from " + flaggerRiderDown[i][j])
			removeFromArray(yellowGatesArr[flaggerRiderDown[i][j]], i)
		}
		flaggerRiderDown[i].length = 0;
	}
}

var checkYellowProgress = 0;
function checkYellows() {
	var i = checkYellowProgress;

	checkYellow(i++);

	if (i >= activeRiderSlots.length)
		i = 0;

	checkYellowProgress = i;
}

/*
 How many flaggers to update per frame.
 Use flagger count for smoother animation.
 Use smaller number for better FPS.
*/
var flaggersUpdatePerFrame = 1;

var poseFlaggerProgress = 0;
function flaggersFrameHandler(seconds) {
	var i, j, s;
	var n = Math.min(flaggersUpdatePerFrame, flaggerCount);

	if (activeRiderSlots == null)
		initFlaggerStuff();

	try {
		for (j = 0; j < n; j++) {
			i = poseFlaggerProgress;
			poseFlaggerProgress = (i + 1) % flaggerCount;
			s = seconds + i * 0.25; /* small time offset so flaggers won't be synchronized */
			if (checkFlaggerGates(i)) {
				poseAnimate(flaggerWaveAnim, firstFlaggerIndex + i, s);
				poseAnimate(flagWaveAnim, firstYellowFlagIndex + i, s);
			} else {
				poseAnimate(flaggerIdleAnim, firstFlaggerIndex + i, s);
				poseAnimate(flagIdleAnim, firstYellowFlagIndex + i, s);
			}
		}
		updateStarter();
		updateFinisher();
		checkYellows();
	} catch (e) {
		mx.message("flag error: " + e);
	}

	return;
}

/* 2d vector functions */
function movv2(r, a) { r[0] = a[0]; r[1] = a[1]; }
function addv2(r, a) { r[0] += a[0]; r[1] += a[1]; }
function subv2(r, a) { r[0] -= a[0]; r[1] -= a[1]; }
function scalev2(r, a) { r[0] *= a; r[1] *= a; }
function dotv2(a, b) { return a[0] * b[0] + a[1] * b[1]; }

var debugBool = false;
function debugMessage(s) { if (debugBool) mx.message(s); }

/*
################################################################################
## Exported poses
##
################################################################################
*/
var flaggerWaveAnim = 
/* Begin pose exported from flagger.blend (flaggerArmature / Wave) */
{
  bone_count: 12,
  frame_count: 22,
  fps: 16.000000,
  rest_centers: [
    -1.460000, 0.880000, 0.009999,
    1.460000, 0.880000, 0.009999,
    -0.560000, 0.880000, 0.010000,
    0.560000, 0.880000, 0.010000,
    3.610000, 0.880000, -1.170632,
    -0.000000, 1.215542, 0.007747,
    0.000000, -0.880241, 0.000000,
    -0.270000, -2.209999, -0.000001,
    0.270000, -2.210001, -0.000002,
    -0.270000, -0.880000, 0.000000,
    0.270000, -0.880000, -0.000000,
    0.000000, -0.202794, -0.000000,
  ],
  poses: [
    {
      centers: [
      -0.860509, 0.033677, 0.068582,
      0.781312, 0.389414, -0.711351,
      -0.560000, 0.880000, 0.010000,
      0.560000, 0.880000, 0.010000,
      -0.876938, 2.087259, -1.446926,
      0.000000, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.010033, 0.939493, 0.342421, -0.745508, 0.221192, -0.628722, -0.666421, -0.261586, 0.698181,
      -0.425459, 0.657003, -0.622361, 0.904958, 0.304314, -0.297395, -0.005997, -0.689740, -0.724033,
      0.333899, 0.940359, -0.065093, -0.745508, 0.221192, -0.628722, -0.576826, 0.258457, 0.774901,
      0.245903, -0.545096, -0.801500, 0.866398, 0.494367, -0.070402, 0.434611, -0.677106, 0.593836,
      -0.966833, -0.237246, 0.094597, -0.097785, 0.001678, -0.995206, 0.235950, -0.971448, -0.024821,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      ]
    },
    {
      centers: [
      -0.861074, 0.033677, 0.061083,
      0.887092, 0.379705, -0.657911,
      -0.560066, 0.880000, 0.005120,
      0.559891, 0.880000, 0.014878,
      -0.631979, 2.014211, -1.777855,
      -0.000067, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.013016, 0.939493, 0.342321, -0.740003, 0.221192, -0.635193, -0.672478, -0.261586, 0.692348,
      -0.343175, 0.600048, -0.722616, 0.929601, 0.327090, -0.169864, 0.134434, -0.730037, -0.670055,
      0.334454, 0.940359, -0.062181, -0.740003, 0.221192, -0.635193, -0.583556, 0.258457, 0.769846,
      0.363557, -0.555883, -0.747543, 0.855185, 0.517385, 0.031173, 0.369439, -0.650620, 0.663482,
      -0.979850, -0.189830, 0.062111, -0.040155, -0.117396, -0.992273, 0.195655, -0.974773, 0.107408,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999962, -0.000000, 0.008712, 0.000000, 1.000000, 0.000000, -0.008712, 0.000000, 0.999962,
      ]
    },
    {
      centers: [
      -0.862157, 0.033677, 0.043183,
      1.117308, 0.374548, -0.466776,
      -0.560051, 0.880000, -0.006515,
      0.559462, 0.880000, 0.026506,
      0.265931, 1.781886, -2.391962,
      -0.000228, 1.215542, 0.007744,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.020124, 0.939493, 0.341977, -0.726648, 0.221192, -0.650428, -0.686715, -0.261586, 0.678229,
      -0.060184, 0.458582, -0.886612, 0.901343, 0.406620, 0.149132, 0.428904, -0.790166, -0.437812,
      0.335673, 0.940359, -0.055220, -0.726648, 0.221192, -0.650428, -0.599422, 0.258457, 0.757558,
      0.619829, -0.561613, -0.548090, 0.766220, 0.583957, 0.268145, 0.169467, -0.586161, 0.792273,
      -0.991449, 0.003324, -0.130449, 0.120266, -0.364643, -0.923348, -0.050637, -0.931141, 0.361125,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999565, -0.000000, 0.029483, 0.000000, 1.000000, 0.000000, -0.029483, 0.000000, 0.999565,
      ]
    },
    {
      centers: [
      -0.862962, 0.033677, 0.021802,
      1.302000, 0.407736, -0.145034,
      -0.559718, 0.880000, -0.020393,
      0.558633, 0.880000, 0.040363,
      1.734625, 1.447116, -2.460026,
      -0.000420, 1.215542, 0.007736,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.028594, 0.939493, 0.341373, -0.710305, 0.221192, -0.668238, -0.703313, -0.261586, 0.661002,
      0.364972, 0.310594, -0.877682, 0.695293, 0.536011, 0.478812, 0.619163, -0.784999, -0.020325,
      0.336939, 0.940359, -0.046884, -0.710305, 0.221192, -0.668238, -0.618013, 0.258457, 0.742469,
      0.825963, -0.524738, -0.205996, 0.550913, 0.673910, 0.492280, -0.119495, -0.520091, 0.845710,
      -0.800317, 0.274446, -0.533078, 0.330031, -0.540636, -0.773817, -0.500572, -0.795231, 0.342105,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.998528, 0.000000, 0.054246, -0.000000, 1.000000, 0.000000, -0.054246, 0.000000, 0.998528,
      ]
    },
    {
      centers: [
      -0.863229, 0.033677, 0.003888,
      1.352247, 0.470306, 0.155902,
      -0.559174, 0.880000, -0.032004,
      0.557675, 0.880000, 0.051948,
      2.895552, 1.231151, -1.789543,
      -0.000581, 1.215542, 0.007725,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.035672, 0.939493, 0.340706, -0.696284, 0.221192, -0.682835, -0.716880, -0.261586, 0.646263,
      0.690341, 0.237004, -0.683563, 0.401344, 0.660663, 0.634388, 0.601957, -0.712288, 0.360962,
      0.337839, 0.940359, -0.039881, -0.696284, 0.221192, -0.682835, -0.633288, 0.258457, 0.729484,
      0.882857, -0.455216, 0.115505, 0.306880, 0.745345, 0.591849, -0.355511, -0.487072, 0.797730,
      -0.404079, 0.438734, -0.802641, 0.546598, -0.587766, -0.596458, -0.733451, -0.679738, -0.002307,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.997187, 0.000000, 0.074957, -0.000000, 1.000000, 0.000000, -0.074957, 0.000000, 0.997187,
      ]
    },
    {
      centers: [
      -0.863230, 0.033677, -0.003621,
      1.350667, 0.522233, 0.285744,
      -0.558875, 0.880000, -0.036867,
      0.557202, 0.880000, 0.056797,
      3.272115, 1.247740, -1.312855,
      -0.000648, 1.215542, 0.007720,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.038634, 0.939493, 0.340383, -0.690318, 0.221192, -0.688866, -0.722474, -0.261586, 0.640003,
      0.797130, 0.246144, -0.551360, 0.210962, 0.742056, 0.636276, 0.565755, -0.623511, 0.539588,
      0.338173, 0.940359, -0.036941, -0.690318, 0.221192, -0.688866, -0.639610, 0.258457, 0.723947,
      0.881627, -0.397519, 0.254386, 0.176807, 0.777960, 0.602925, -0.437576, -0.486577, 0.756154,
      -0.209110, 0.452463, -0.866920, 0.681887, -0.567970, -0.460913, -0.700930, -0.687523, -0.189760,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.996497, -0.000000, 0.083629, 0.000000, 1.000000, 0.000000, -0.083629, 0.000000, 0.996497,
      ]
    },
    {
      centers: [
      -0.863231, 0.033677, -0.003287,
      1.371664, 0.558679, 0.265004,
      -0.558889, 0.880000, -0.036651,
      0.557224, 0.880000, 0.056581,
      3.267495, 1.274451, -1.385894,
      -0.000645, 1.215542, 0.007720,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.038503, 0.939493, 0.340398, -0.690585, 0.221192, -0.688598, -0.722226, -0.261586, 0.640283,
      0.760870, 0.303690, -0.573454, 0.133138, 0.791866, 0.596006, 0.635099, -0.529831, 0.562074,
      0.338159, 0.940359, -0.037072, -0.690585, 0.221192, -0.688598, -0.639329, 0.258457, 0.724195,
      0.904933, -0.357023, 0.231581, 0.158426, 0.787711, 0.595325, -0.394964, -0.502041, 0.769388,
      -0.184849, 0.269771, -0.945015, 0.726189, -0.610413, -0.316299, -0.662178, -0.744728, -0.083070,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.996529, -0.000000, 0.083243, 0.000000, 1.000000, 0.000000, -0.083243, 0.000000, 0.996529,
      ]
    },
    {
      centers: [
      -0.863237, 0.033677, -0.000947,
      1.403499, 0.598948, 0.177891,
      -0.558986, 0.880000, -0.035136,
      0.557375, 0.880000, 0.055070,
      3.274255, 1.136704, -1.551393,
      -0.000624, 1.215542, 0.007722,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.037580, 0.939493, 0.340501, -0.692448, 0.221192, -0.686724, -0.720488, -0.261586, 0.642238,
      0.648533, 0.375204, -0.662290, 0.086707, 0.827998, 0.553987, 0.756233, -0.416704, 0.504451,
      0.338057, 0.940359, -0.037988, -0.692448, 0.221192, -0.686724, -0.637364, 0.258457, 0.725925,
      0.940137, -0.312280, 0.136468, 0.180045, 0.795115, 0.579117, -0.289354, -0.519879, 0.803741,
      -0.039101, -0.139806, -0.989407, 0.735094, -0.674717, 0.066289, -0.676836, -0.724715, 0.129153,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.996751, -0.000000, 0.080541, 0.000000, 1.000000, 0.000000, -0.080541, 0.000000, 0.996751,
      ]
    },
    {
      centers: [
      -0.863221, 0.033677, 0.005405,
      1.426553, 0.646044, 0.029248,
      -0.559230, 0.880000, -0.031022,
      0.557765, 0.880000, 0.050968,
      3.301679, 1.077683, -1.527178,
      -0.000567, 1.215542, 0.007727,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.035073, 0.939493, 0.340768, -0.697483, 0.221192, -0.681610, -0.715743, -0.261586, 0.647522,
      0.452176, 0.436109, -0.778040, 0.062613, 0.854639, 0.515433, 0.889728, -0.281782, 0.359141,
      0.337768, 0.940359, -0.040475, -0.697483, 0.221192, -0.681610, -0.632005, 0.258457, 0.730595,
      0.965320, -0.259952, -0.024132, 0.231207, 0.808312, 0.541457, -0.121247, -0.528259, 0.840382,
      0.319628, -0.601313, -0.732298, 0.629224, -0.443141, 0.638516, -0.708459, -0.664867, 0.236721,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.997317, -0.000000, 0.073205, 0.000000, 1.000000, 0.000000, -0.073205, 0.000000, 0.997317,
      ]
    },
    {
      centers: [
      -0.863054, 0.033677, 0.017778,
      1.413741, 0.698452, -0.170335,
      -0.559617, 0.880000, -0.023003,
      0.558439, 0.880000, 0.042967,
      3.102849, 1.460974, -1.449601,
      -0.000456, 1.215542, 0.007734,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.030185, 0.939493, 0.341236, -0.707181, 0.221192, -0.671542, -0.706388, -0.261586, 0.657715,
      0.176684, 0.461327, -0.869460, 0.055680, 0.877258, 0.476779, 0.982691, -0.132651, 0.129311,
      0.337154, 0.940359, -0.045312, -0.707181, 0.221192, -0.671542, -0.621468, 0.258457, 0.739579,
      0.950336, -0.201720, -0.237002, 0.293552, 0.833941, 0.467300, 0.103383, -0.513664, 0.851740,
      0.733013, -0.638236, -0.235261, 0.291761, -0.017428, 0.956332, -0.614465, -0.769644, 0.173437,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.998264, -0.000000, 0.058902, 0.000000, 1.000000, 0.000000, -0.058902, 0.000000, 0.998264,
      ]
    },
    {
      centers: [
      -0.862393, 0.033677, 0.038178,
      1.339972, 0.747946, -0.398162,
      -0.560004, 0.880000, -0.009765,
      0.559298, 0.880000, 0.029752,
      2.496991, 1.993935, -1.674748,
      -0.000273, 1.215542, 0.007742,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.022109, 0.939493, 0.341854, -0.722861, 0.221192, -0.654635, -0.690640, -0.261586, 0.674232,
      -0.145176, 0.430269, -0.890950, 0.057931, 0.902642, 0.426476, 0.987709, 0.010301, -0.155968,
      0.335988, 0.940359, -0.053271, -0.722861, 0.221192, -0.654635, -0.603808, 0.258457, 0.754066,
      0.867416, -0.146726, -0.475459, 0.338549, 0.874298, 0.347833, 0.364657, -0.462682, 0.808054,
      0.950892, -0.308716, 0.022354, 0.010569, 0.104563, 0.994462, -0.309344, -0.945389, 0.102691,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999377, -0.000000, 0.035283, 0.000000, 1.000000, 0.000000, -0.035283, 0.000000, 0.999377,
      ]
    },
    {
      centers: [
      -0.860509, 0.033677, 0.068582,
      1.194546, 0.780947, -0.620508,
      -0.560000, 0.880000, 0.010000,
      0.560000, 0.880000, 0.010000,
      1.603539, 2.271290, -2.109886,
      0.000000, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.010033, 0.939493, 0.342421, -0.745508, 0.221192, -0.628722, -0.666421, -0.261586, 0.698181,
      -0.457869, 0.333406, -0.824134, 0.050089, 0.935216, 0.350517, 0.887607, 0.119211, -0.444907,
      0.333899, 0.940359, -0.065093, -0.745508, 0.221192, -0.628722, -0.576826, 0.258457, 0.774901,
      0.705051, -0.110059, -0.700564, 0.332255, 0.924014, 0.189220, 0.626505, -0.366176, 0.688045,
      0.996971, 0.023628, -0.074098, 0.073494, 0.025490, 0.996970, 0.025445, -0.999396, 0.023676,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      ]
    },
    {
      centers: [
      -0.855552, 0.033677, 0.114935,
      0.964743, 0.785027, -0.818330,
      -0.558644, 0.880000, 0.040215,
      0.559723, 0.880000, -0.020245,
      0.432012, 2.227974, -2.427972,
      0.000418, 1.215542, 0.007736,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.008466, 0.939493, 0.342464, -0.778361, 0.221192, -0.587561, -0.627760, -0.261586, 0.733137,
      -0.707727, 0.194974, -0.679049, 0.017018, 0.965590, 0.259511, 0.706282, 0.172107, -0.686692,
      0.329898, 0.940359, -0.083022, -0.778361, 0.221192, -0.587561, -0.534154, 0.258457, 0.804909,
      0.450023, -0.105525, -0.886761, 0.259476, 0.965604, 0.016775, 0.854489, -0.237642, 0.461925,
      0.874905, 0.273546, -0.399641, 0.413453, 0.007817, 0.910492, 0.252186, -0.961827, -0.106260,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.998542, -0.000000, -0.053982, 0.000000, 1.000000, 0.000000, 0.053982, 0.000000, 0.998542,
      ]
    },
    {
      centers: [
      -0.846378, 0.033677, 0.169774,
      0.675120, 0.756252, -0.939862,
      -0.554896, 0.880000, 0.076095,
      0.557259, 0.880000, -0.056236,
      -0.761677, 1.933231, -2.260878,
      0.000915, 1.215542, 0.007693,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.030495, 0.939493, 0.341208, -0.814572, 0.221192, -0.536234, -0.579260, -0.261586, 0.772030,
      -0.871212, 0.055151, -0.487800, -0.042294, 0.981542, 0.186510, 0.489083, 0.183120, -0.852798,
      0.323869, 0.940359, -0.104088, -0.814572, 0.221192, -0.536234, -0.481229, 0.258457, 0.837627,
      0.130957, -0.137497, -0.981807, 0.129289, 0.984247, -0.120594, 0.982922, -0.111144, 0.146671,
      0.533866, 0.410862, -0.739040, 0.779431, 0.099746, 0.618497, 0.327833, -0.906225, -0.266987,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.992995, -0.000000, -0.118153, 0.000000, 1.000000, 0.000000, 0.118153, 0.000000, 0.992995,
      ]
    },
    {
      centers: [
      -0.835991, 0.033677, 0.215171,
      0.431478, 0.712090, -0.961956,
      -0.549985, 0.880000, 0.105909,
      0.553415, 0.880000, -0.086206,
      -1.541011, 1.555545, -1.807899,
      0.001329, 1.215542, 0.007632,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.048852, 0.939493, 0.339067, -0.842305, 0.221192, -0.491525, -0.536783, -0.261586, 0.802145,
      -0.946489, -0.058058, -0.317472, -0.109783, 0.982944, 0.147542, 0.303491, 0.174500, -0.936719,
      0.317785, 0.940359, -0.121402, -0.842305, 0.221192, -0.491525, -0.435357, 0.258457, 0.862360,
      -0.135485, -0.186566, -0.973056, -0.005302, 0.982234, -0.187587, 0.990765, -0.020256, -0.134067,
      0.099435, 0.378408, -0.920283, 0.944009, 0.256518, 0.207476, 0.314580, -0.889385, -0.331714,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.985179, -0.000000, -0.171532, 0.000000, 1.000000, 0.000000, 0.171532, 0.000000, 0.985179,
      ]
    },
    {
      centers: [
      -0.830912, 0.033677, 0.234016,
      0.333837, 0.689243, -0.950935,
      -0.547450, 0.880000, 0.118317,
      0.551325, 0.880000, -0.098696,
      -1.875212, 1.234858, -1.571795,
      0.001501, 1.215542, 0.007600,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.056505, 0.939493, 0.337876, -0.853202, 0.221192, -0.472356, -0.518511, -0.261586, 0.814076,
      -0.962555, -0.115048, -0.245464, -0.150267, 0.980075, 0.129894, 0.225629, 0.161915, -0.960664,
      0.314959, 0.940359, -0.128556, -0.853202, 0.221192, -0.472356, -0.415749, 0.258457, 0.871982,
      -0.241652, -0.211951, -0.946932, -0.065268, 0.977194, -0.202069, 0.968166, 0.012974, -0.249975,
      -0.180041, 0.214594, -0.959966, 0.906722, 0.414569, -0.077382, 0.381366, -0.884354, -0.269216,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.981049, 0.000000, -0.193761, -0.000000, 1.000000, 0.000000, 0.193761, 0.000000, 0.981049,
      ]
    },
    {
      centers: [
      -0.833388, 0.033677, 0.225039,
      0.340753, 0.682757, -0.944987,
      -0.548694, 0.880000, 0.112404,
      0.552357, 0.880000, -0.092743,
      -1.977696, 1.012014, -1.561148,
      0.001419, 1.215542, 0.007616,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.052857, 0.939493, 0.338466, -0.848057, 0.221192, -0.481532, -0.527262, -0.261586, 0.808435,
      -0.967994, -0.089415, -0.234503, -0.107026, 0.992229, 0.063454, 0.227007, 0.086521, -0.970042,
      0.316327, 0.940359, -0.125151, -0.848057, 0.221192, -0.481532, -0.425131, 0.258457, 0.867447,
      -0.235115, -0.219159, -0.946937, -0.013433, 0.974887, -0.222292, 0.971875, -0.039544, -0.232155,
      -0.301652, -0.049698, -0.952122, 0.808079, 0.516651, -0.282984, 0.505979, -0.854752, -0.115689,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.983082, 0.000000, -0.183168, -0.000000, 1.000000, 0.000000, 0.183168, 0.000000, 0.983082,
      ]
    },
    {
      centers: [
      -0.839330, 0.033677, 0.201753,
      0.362889, 0.666094, -0.930234,
      -0.551611, 0.880000, 0.097087,
      0.554725, 0.880000, -0.077331,
      -2.004711, 0.955261, -1.466461,
      0.001206, 1.215542, 0.007653,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.043414, 0.939493, 0.339806, -0.834324, 0.221192, -0.504953, -0.549562, -0.261586, 0.793444,
      -0.976039, 0.018514, -0.216806, 0.036403, 0.996225, -0.078810, 0.214528, -0.084814, -0.973028,
      0.319689, 0.940359, -0.116297, -0.834324, 0.221192, -0.504953, -0.449113, 0.258457, 0.855276,
      -0.213151, -0.237673, -0.947670, 0.122425, 0.955818, -0.267252, 0.969319, -0.172983, -0.174636,
      -0.436398, -0.361738, -0.823834, 0.674295, 0.474742, -0.565639, 0.595721, -0.802351, 0.036741,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.987800, 0.000000, -0.155730, -0.000000, 1.000000, 0.000000, 0.155730, 0.000000, 0.987800,
      ]
    },
    {
      centers: [
      -0.846406, 0.033677, 0.169633,
      0.401754, 0.641576, -0.909940,
      -0.554909, 0.880000, 0.076003,
      0.557268, 0.880000, -0.056143,
      -1.963370, 1.107781, -1.298299,
      0.000914, 1.215542, 0.007693,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.030438, 0.939493, 0.341213, -0.814483, 0.221192, -0.536370, -0.579389, -0.261586, 0.771933,
      -0.956862, 0.193129, -0.217062, 0.245096, 0.937745, -0.246095, 0.156021, -0.288680, -0.944628,
      0.323887, 0.940359, -0.104034, -0.814483, 0.221192, -0.536370, -0.481368, 0.258457, 0.837547,
      -0.172793, -0.264916, -0.948663, 0.309211, 0.899869, -0.307611, 0.935164, -0.346490, -0.073576,
      -0.608506, -0.578214, -0.543497, 0.468373, 0.291177, -0.834172, 0.640584, -0.762158, 0.093637,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.993015, 0.000000, -0.117988, -0.000000, 1.000000, 0.000000, 0.117988, 0.000000, 0.993015,
      ]
    },
    {
      centers: [
      -0.852720, 0.033677, 0.134344,
      0.459362, 0.607360, -0.884847,
      -0.557586, 0.880000, 0.052898,
      0.559119, 0.880000, -0.032957,
      -1.813421, 1.432285, -1.138499,
      0.000594, 1.215542, 0.007724,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.016245, 0.939493, 0.342183, -0.791510, 0.221192, -0.569724, -0.610940, -0.261586, 0.747211,
      -0.882424, 0.395588, -0.254632, 0.467565, 0.797336, -0.381625, 0.052061, -0.455812, -0.888552,
      0.327927, 0.940359, -0.090496, -0.791510, 0.221192, -0.569724, -0.515728, 0.258457, 0.816838,
      -0.110840, -0.302933, -0.946544, 0.507427, 0.801668, -0.315986, 0.854537, -0.515326, 0.064859,
      -0.769439, -0.606414, -0.200565, 0.185119, 0.088807, -0.978695, 0.611306, -0.790175, 0.043927,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.997058, 0.000000, -0.076656, -0.000000, 1.000000, 0.000000, 0.076656, 0.000000, 0.997058,
      ]
    },
    {
      centers: [
      -0.857218, 0.033676, 0.101763,
      0.538378, 0.557741, -0.851684,
      -0.559196, 0.880000, 0.031619,
      0.559968, 0.880000, -0.011634,
      -1.540961, 1.794222, -1.070725,
      0.000299, 1.215542, 0.007742,
      0.000000, -0.880241, 0.000000,
      -0.358990, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      -0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      0.003198, 0.939493, 0.342553, -0.769233, 0.221192, -0.599463, -0.638961, -0.261586, 0.723396,
      -0.750645, 0.569690, -0.334643, 0.658766, 0.606549, -0.445114, -0.050599, -0.554574, -0.830595,
      0.331136, 0.940359, -0.077939, -0.769233, 0.221192, -0.599463, -0.546470, 0.258457, 0.796599,
      -0.023989, -0.358066, -0.933388, 0.680274, 0.678315, -0.277698, 0.732565, -0.641621, 0.227311,
      -0.866784, -0.494218, 0.066584, -0.076993, 0.000709, -0.997032, 0.492704, -0.869338, -0.038666,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, -0.000000, -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999254, 0.000000, -0.038619, -0.000000, 1.000000, 0.000000, 0.038619, 0.000000, 0.999254,
      ]
    },
    {
      centers: [
      -0.860509, 0.033677, 0.068582,
      0.781312, 0.389414, -0.711351,
      -0.560000, 0.880000, 0.010000,
      0.560000, 0.880000, 0.010000,
      -0.876938, 2.087259, -1.446926,
      0.000000, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.010033, 0.939493, 0.342421, -0.745508, 0.221192, -0.628722, -0.666421, -0.261586, 0.698181,
      -0.425459, 0.657003, -0.622361, 0.904958, 0.304314, -0.297395, -0.005997, -0.689740, -0.724033,
      0.333899, 0.940359, -0.065093, -0.745508, 0.221192, -0.628722, -0.576826, 0.258457, 0.774901,
      0.245903, -0.545096, -0.801500, 0.866398, 0.494367, -0.070402, 0.434611, -0.677106, 0.593836,
      -0.966833, -0.237246, 0.094597, -0.097785, 0.001678, -0.995206, 0.235950, -0.971448, -0.024821,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flaggerArmature / Wave) */
cachePoseSequence(flaggerWaveAnim);

var flagWaveAnim =
/* Begin pose exported from flagger.blend (flagArmature / Wave) */
{
  bone_count: 2,
  frame_count: 22,
  fps: 16.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      -0.876938, 2.087259, -1.446926,
      0.292035, 1.144968, -1.427065,
      ],
      rotations: [
      -0.966833, -0.237246, 0.094597, -0.097785, 0.001678, -0.995206, 0.235950, -0.971448, -0.024821,
      -0.960520, -0.199690, -0.193715, 0.186653, 0.053791, -0.980952, 0.206307, -0.978382, -0.014394,
      ]
    },
    {
      centers: [
      -0.631979, 2.014211, -1.777855,
      0.492441, 1.069761, -1.488918,
      ],
      rotations: [
      -0.979850, -0.189830, 0.062111, -0.040155, -0.117396, -0.992273, 0.195655, -0.974773, 0.107408,
      -0.943962, -0.217047, -0.248648, 0.279956, -0.127524, -0.951505, 0.174813, -0.967796, 0.181141,
      ]
    },
    {
      centers: [
      0.265931, 1.781886, -2.391962,
      1.048096, 0.901919, -1.486379,
      ],
      rotations: [
      -0.991449, 0.003324, -0.130449, 0.120266, -0.364643, -0.923348, -0.050637, -0.931141, 0.361125,
      -0.883171, -0.196284, -0.426006, 0.460553, -0.534990, -0.708292, -0.088882, -0.821741, 0.562887,
      ]
    },
    {
      centers: [
      1.734625, 1.447116, -2.460026,
      1.721718, 0.764920, -1.154369,
      ],
      rotations: [
      -0.800317, 0.274446, -0.533078, 0.330031, -0.540636, -0.773817, -0.500572, -0.795231, 0.342105,
      -0.674592, -0.103828, -0.730853, 0.428929, -0.860906, -0.273606, -0.600788, -0.498056, 0.625295,
      ]
    },
    {
      centers: [
      2.895552, 1.231151, -1.789543,
      2.146138, 0.742862, -0.630196,
      ],
      rotations: [
      -0.404079, 0.438734, -0.802641, 0.546598, -0.587766, -0.596458, -0.733451, -0.679738, -0.002307,
      -0.311770, -0.034598, -0.949528, 0.231691, -0.971939, -0.040659, -0.921476, -0.232674, 0.311038,
      ]
    },
    {
      centers: [
      3.272115, 1.247740, -1.312855,
      2.267365, 0.805299, -0.348321,
      ],
      rotations: [
      -0.209110, 0.452463, -0.866920, 0.681887, -0.567970, -0.460913, -0.700930, -0.687523, -0.189760,
      -0.097261, -0.047633, -0.994118, 0.193877, -0.980626, 0.028018, -0.976193, -0.190012, 0.104611,
      ]
    },
    {
      centers: [
      3.267495, 1.274451, -1.385894,
      2.246664, 0.907923, -0.394469,
      ],
      rotations: [
      -0.184850, 0.269771, -0.945015, 0.726189, -0.610413, -0.316299, -0.662178, -0.744728, -0.083070,
      -0.033501, -0.219677, -0.974997, 0.274590, -0.940026, 0.202362, -0.960977, -0.260945, 0.091813,
      ]
    },
    {
      centers: [
      3.274255, 1.136704, -1.551393,
      2.149310, 1.030434, -0.583742,
      ],
      rotations: [
      -0.039101, -0.139806, -0.989407, 0.735094, -0.674717, 0.066289, -0.676836, -0.724715, 0.129153,
      0.123860, -0.548074, -0.827208, 0.322741, -0.766052, 0.555880, -0.938348, -0.335826, 0.082003,
      ]
    },
    {
      centers: [
      3.301679, 1.077683, -1.527178,
      1.946555, 1.147570, -0.865498,
      ],
      rotations: [
      0.319628, -0.601313, -0.732298, 0.629224, -0.443141, 0.638516, -0.708459, -0.664867, 0.236721,
      0.435752, -0.799405, -0.413608, 0.254715, -0.331220, 0.908522, -0.863273, -0.501243, 0.059291,
      ]
    },
    {
      centers: [
      3.102849, 1.460975, -1.449601,
      1.616927, 1.228979, -1.170214,
      ],
      rotations: [
      0.733013, -0.638236, -0.235261, 0.291761, -0.017428, 0.956332, -0.614465, -0.769644, 0.173437,
      0.756252, -0.652404, 0.049518, 0.041208, 0.123026, 0.991547, -0.652982, -0.747819, 0.119923,
      ]
    },
    {
      centers: [
      2.496991, 1.993935, -1.674748,
      1.173019, 1.242756, -1.422754,
      ],
      rotations: [
      0.950891, -0.308716, 0.022354, 0.010569, 0.104563, 0.994462, -0.309344, -0.945389, 0.102691,
      0.942183, -0.287278, 0.172517, -0.079424, 0.308712, 0.947834, -0.325549, -0.906735, 0.268046,
      ]
    },
    {
      centers: [
      1.603539, 2.271290, -2.109886,
      0.667995, 1.164364, -1.568261,
      ],
      rotations: [
      0.996971, 0.023628, -0.074098, 0.073494, 0.025490, 0.996970, 0.025445, -0.999396, 0.023676,
      0.996662, 0.022676, -0.078428, 0.063129, 0.395081, 0.916475, 0.051767, -0.918366, 0.392330,
      ]
    },
    {
      centers: [
      0.432012, 2.227974, -2.427972,
      0.150856, 1.009248, -1.599236,
      ],
      rotations: [
      0.874905, 0.273546, -0.399641, 0.413453, 0.007817, 0.910492, 0.252186, -0.961827, -0.106260,
      0.807518, 0.211402, -0.550657, 0.361533, 0.560252, 0.745260, 0.466056, -0.800892, 0.375985,
      ]
    },
    {
      centers: [
      -0.761677, 1.933231, -2.260878,
      -0.326774, 0.819675, -1.500832,
      ],
      rotations: [
      0.533866, 0.410861, -0.739040, 0.779431, 0.099746, 0.618497, 0.327833, -0.906225, -0.266987,
      0.315009, 0.221723, -0.922826, 0.518404, 0.774271, 0.362989, 0.795001, -0.592742, 0.128960,
      ]
    },
    {
      centers: [
      -1.541011, 1.555546, -1.807899,
      -0.656984, 0.645324, -1.327048,
      ],
      rotations: [
      0.099435, 0.378408, -0.920283, 0.944009, 0.256518, 0.207476, 0.314580, -0.889385, -0.331714,
      -0.209216, 0.029231, -0.977433, 0.387547, 0.920182, -0.055434, 0.897795, -0.390398, -0.203845,
      ]
    },
    {
      centers: [
      -1.875212, 1.234858, -1.571795,
      -0.773101, 0.556938, -1.233217,
      ],
      rotations: [
      -0.180041, 0.214593, -0.959966, 0.906722, 0.414569, -0.077382, 0.381366, -0.884354, -0.269216,
      -0.438085, -0.228094, -0.869514, 0.140218, 0.938094, -0.316730, 0.887930, -0.260677, -0.378982,
      ]
    },
    {
      centers: [
      -1.977696, 1.012014, -1.561148,
      -0.772441, 0.579929, -1.214664,
      ],
      rotations: [
      -0.301652, -0.049698, -0.952122, 0.808079, 0.516651, -0.282984, 0.505979, -0.854752, -0.115689,
      -0.467981, -0.456201, -0.756885, 0.000922, 0.856206, -0.516634, 0.883738, -0.242473, -0.400267,
      ]
    },
    {
      centers: [
      -2.004711, 0.955261, -1.466461,
      -0.759557, 0.687385, -1.179559,
      ],
      rotations: [
      -0.436398, -0.361738, -0.823834, 0.674295, 0.474742, -0.565639, 0.595721, -0.802351, 0.036741,
      -0.522929, -0.627025, -0.577395, -0.040538, 0.694923, -0.717941, 0.851411, -0.352026, -0.388814,
      ]
    },
    {
      centers: [
      -1.963370, 1.107781, -1.298299,
      -0.698638, 0.863675, -1.159561,
      ],
      rotations: [
      -0.608506, -0.578214, -0.543497, 0.468373, 0.291177, -0.834172, 0.640584, -0.762158, 0.093637,
      -0.631499, -0.685905, -0.361584, -0.045064, 0.498011, -0.865999, 0.774066, -0.530583, -0.345403,
      ]
    },
    {
      centers: [
      -1.813421, 1.432285, -1.138499,
      -0.555427, 1.062287, -1.177673,
      ],
      rotations: [
      -0.769439, -0.606414, -0.200565, 0.185119, 0.088807, -0.978695, 0.611306, -0.790175, 0.043927,
      -0.765432, -0.619794, -0.173120, -0.047381, 0.322571, -0.945359, 0.641771, -0.715405, -0.276273,
      ]
    },
    {
      centers: [
      -1.540961, 1.794222, -1.070725,
      -0.324864, 1.212885, -1.236522,
      ],
      rotations: [
      -0.866784, -0.494218, 0.066584, -0.076994, 0.000709, -0.997032, 0.492704, -0.869338, -0.038666,
      -0.879643, -0.470891, -0.067010, -0.034449, 0.203591, -0.978450, 0.474386, -0.858378, -0.195309,
      ]
    },
    {
      centers: [
      -0.876938, 2.087259, -1.446926,
      0.292035, 1.144968, -1.427065,
      ],
      rotations: [
      -0.966833, -0.237246, 0.094597, -0.097785, 0.001678, -0.995206, 0.235950, -0.971448, -0.024821,
      -0.960520, -0.199690, -0.193715, 0.186653, 0.053791, -0.980952, 0.206307, -0.978382, -0.014394,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / Wave) */
cachePoseSequence(flagWaveAnim);

var flaggerStartAnim =
/* Begin pose exported from flagger.blend (flaggerArmature / Start) */
{
  bone_count: 12,
  frame_count: 43,
  fps: 16.000000,
  rest_centers: [
    -1.460000, 0.880000, 0.009999,
    1.460000, 0.880000, 0.009999,
    -0.560000, 0.880000, 0.010000,
    0.560000, 0.880000, 0.010000,
    3.610000, 0.880000, -1.170632,
    -0.000000, 1.215542, 0.007747,
    0.000000, -0.880241, 0.000000,
    -0.270000, -2.209999, -0.000001,
    0.270000, -2.210001, -0.000002,
    -0.270000, -0.880000, 0.000000,
    0.270000, -0.880000, -0.000000,
    0.000000, -0.202794, -0.000000,
  ],
  poses: [
    {
      centers: [
      -1.292943, 1.600030, -0.199169,
      1.316650, 1.449222, -0.375104,
      -0.559448, 1.130000, 0.026787,
      0.560048, 1.130000, -0.006796,
      1.860620, 3.700277, -0.797571,
      0.000232, 1.465542, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.235976, -0.819088, 0.522887, 0.072490, 0.521746, 0.850016, -0.969051, 0.238487, -0.063744,
      -0.278644, 0.917495, -0.283833, 0.900354, 0.146700, -0.409685, -0.334246, -0.369707, -0.866947,
      0.814995, -0.522256, 0.251062, 0.072490, 0.521746, 0.850016, -0.574916, -0.674559, 0.463079,
      0.840669, 0.354690, -0.409231, 0.280899, 0.360471, 0.889470, 0.463002, -0.862702, 0.203405,
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999550, -0.000000, -0.029985, 0.000000, 1.000000, 0.000000, 0.029985, 0.000000, 0.999550,
      ]
    },
    {
      centers: [
      -1.292943, 1.600030, -0.199169,
      1.316650, 1.449222, -0.375104,
      -0.559448, 1.130000, 0.026787,
      0.560048, 1.130000, -0.006796,
      1.860620, 3.700277, -0.797571,
      0.000232, 1.465542, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.235976, -0.819088, 0.522887, 0.072490, 0.521746, 0.850016, -0.969051, 0.238487, -0.063744,
      -0.278644, 0.917495, -0.283833, 0.900354, 0.146700, -0.409685, -0.334246, -0.369707, -0.866947,
      0.814995, -0.522256, 0.251062, 0.072490, 0.521746, 0.850016, -0.574916, -0.674559, 0.463079,
      0.840669, 0.354690, -0.409231, 0.280899, 0.360471, 0.889470, 0.463002, -0.862702, 0.203405,
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999550, -0.000000, -0.029985, 0.000000, 1.000000, 0.000000, 0.029985, 0.000000, 0.999550,
      ]
    },
    {
      centers: [
      -1.292943, 1.600030, -0.199169,
      1.316650, 1.449222, -0.375104,
      -0.559448, 1.130000, 0.026787,
      0.560048, 1.130000, -0.006796,
      1.860620, 3.700277, -0.797571,
      0.000232, 1.465542, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.235976, -0.819088, 0.522887, 0.072490, 0.521746, 0.850016, -0.969051, 0.238487, -0.063744,
      -0.278644, 0.917495, -0.283833, 0.900354, 0.146700, -0.409685, -0.334246, -0.369707, -0.866947,
      0.814995, -0.522256, 0.251062, 0.072490, 0.521746, 0.850016, -0.574916, -0.674559, 0.463079,
      0.840669, 0.354690, -0.409231, 0.280899, 0.360471, 0.889470, 0.463002, -0.862702, 0.203405,
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999550, -0.000000, -0.029985, 0.000000, 1.000000, 0.000000, 0.029985, 0.000000, 0.999550,
      ]
    },
    {
      centers: [
      -1.273251, 1.619426, -0.215711,
      1.308278, 1.418756, -0.418539,
      -0.557135, 1.131192, 0.026787,
      0.562359, 1.128801, -0.006796,
      1.906002, 3.606037, -0.889301,
      0.003261, 1.465538, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.231977, -0.818101, 0.526210, 0.070986, 0.525287, 0.847959, -0.970128, 0.234060, -0.063780,
      -0.285981, 0.904079, -0.317580, 0.898826, 0.138208, -0.415947, -0.332156, -0.404402, -0.852134,
      0.795685, -0.542482, 0.269442, 0.070986, 0.525287, 0.847959, -0.601537, -0.655582, 0.456472,
      0.828799, 0.322171, -0.457491, 0.315702, 0.405804, 0.857704, 0.461979, -0.855295, 0.234620,
      -0.950417, 0.030293, 0.309499, -0.303857, 0.121304, -0.944964, -0.066169, -0.992153, -0.106085,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999548, -0.002135, -0.029985, 0.002136, 0.999998, 0.000000, 0.029985, -0.000064, 0.999550,
      ]
    },
    {
      centers: [
      -1.217118, 1.667987, -0.258708,
      1.275132, 1.323670, -0.527720,
      -0.551022, 1.134312, 0.026787,
      0.568440, 1.125617, -0.006796,
      1.998431, 3.309494, -1.125085,
      0.011248, 1.465497, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.220873, -0.815101, 0.535561, 0.067682, 0.534989, 0.842143, -0.972951, 0.222254, -0.062996,
      -0.313010, 0.858991, -0.405165, 0.890853, 0.117653, -0.438793, -0.329250, -0.498289, -0.802061,
      0.740107, -0.592972, 0.317216, 0.067682, 0.534989, 0.842143, -0.669075, -0.601806, 0.436083,
      0.785213, 0.220058, -0.578804, 0.408137, 0.519035, 0.751018, 0.465687, -0.825940, 0.317740,
      -0.927802, 0.170448, 0.331859, -0.305153, 0.165020, -0.937896, -0.214626, -0.971450, -0.101093,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999520, -0.007763, -0.029985, 0.007766, 0.999970, 0.000000, 0.029984, -0.000233, 0.999550,
      ]
    },
    {
      centers: [
      -1.127974, 1.729211, -0.317160,
      1.199810, 1.155364, -0.655596,
      -0.542350, 1.138664, 0.026787,
      0.577007, 1.121058, -0.006796,
      2.045786, 2.776114, -1.416318,
      0.022538, 1.465363, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.204038, -0.809839, 0.550027, 0.064813, 0.549439, 0.833017, -0.976815, 0.205616, -0.059618,
      -0.371497, 0.771677, -0.516241, 0.868167, 0.091663, -0.487732, -0.329052, -0.629374, -0.703998,
      0.650693, -0.656163, 0.382163, 0.064813, 0.549439, 0.833017, -0.756570, -0.517269, 0.400044,
      0.692003, 0.038117, -0.720888, 0.530992, 0.649646, 0.544066, 0.489060, -0.759281, 0.429317,
      -0.857029, 0.371303, 0.357261, -0.287895, 0.229974, -0.929639, -0.427338, -0.899581, -0.090198,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999427, -0.015720, -0.029985, 0.015727, 0.999876, 0.000000, 0.029981, -0.000472, 0.999550,
      ]
    },
    {
      centers: [
      -1.013547, 1.786748, -0.379151,
      1.077677, 0.929715, -0.737834,
      -0.532367, 1.143568, 0.026787,
      0.586784, 1.115747, -0.006796,
      1.960184, 2.042937, -1.632833,
      0.035480, 1.465098, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.183708, -0.802360, 0.567864, 0.064399, 0.566631, 0.821451, -0.980869, 0.187477, -0.052423,
      -0.465377, 0.645881, -0.605196, 0.822244, 0.062379, -0.565707, -0.327628, -0.760886, -0.560101,
      0.534645, -0.714644, 0.451041, 0.064399, 0.566631, 0.821451, -0.842619, -0.410138, 0.348969,
      0.545437, -0.206704, -0.812263, 0.638756, 0.729974, 0.243164, 0.542669, -0.651468, 0.530188,
      -0.720247, 0.585019, 0.372823, -0.237504, 0.297001, -0.924869, -0.651795, -0.754681, -0.074970,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.999242, -0.024840, -0.029985, 0.024851, 0.999691, 0.000000, 0.029976, -0.000745, 0.999550,
      ]
    },
    {
      centers: [
      -0.889047, 1.828993, -0.433966,
      0.935274, 0.701503, -0.733491,
      -0.522339, 1.148381, 0.026787,
      0.596511, 1.110348, -0.006796,
      1.735327, 1.275524, -1.679977,
      0.048418, 1.464715, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.163092, -0.793517, 0.586286, 0.067254, 0.583919, 0.809021, -0.984316, 0.171375, -0.041865,
      -0.576460, 0.512716, -0.636252, 0.752736, 0.030243, -0.657627, -0.317934, -0.858025, -0.403374,
      0.407454, -0.756235, 0.511948, 0.067254, 0.583919, 0.809021, -0.910746, -0.295208, 0.288780,
      0.376404, -0.454273, -0.807438, 0.690285, 0.718805, -0.082617, 0.617921, -0.526265, 0.584139,
      -0.537777, 0.756354, 0.372458, -0.161445, 0.341217, -0.926016, -0.827485, -0.558122, -0.061390,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998973, -0.033959, -0.029985, 0.033974, 0.999423, 0.000000, 0.029968, -0.001019, 0.999550,
      ]
    },
    {
      centers: [
      -0.775093, 1.852550, -0.474746,
      0.813758, 0.527341, -0.664109,
      -0.513556, 1.152504, 0.026787,
      0.604956, 1.105565, -0.006796,
      1.463261, 0.663641, -1.586949,
      0.059702, 1.464285, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.145551, -0.784957, 0.602210, 0.072437, 0.598603, 0.797764, -0.986695, 0.159737, -0.030267,
      -0.673740, 0.409193, -0.615333, 0.674571, 0.000589, -0.738210, -0.301708, -0.912448, -0.276427,
      0.290598, -0.777828, 0.557258, 0.072437, 0.598603, 0.797764, -0.954099, -0.191463, 0.230296,
      0.232003, -0.642471, -0.730346, 0.685027, 0.640976, -0.346247, 0.690588, -0.419977, 0.588819,
      -0.360362, 0.859627, 0.362188, -0.087071, 0.355583, -0.930580, -0.928740, -0.366882, -0.053290,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998671, -0.041910, -0.029985, 0.041929, 0.999121, 0.000000, 0.029959, -0.001257, 0.999550,
      ]
    },
    {
      centers: [
      -0.692978, 1.861661, -0.499234,
      0.737214, 0.426735, -0.588064,
      -0.507324, 1.155379, 0.026787,
      0.610906, 1.102142, -0.006796,
      1.251985, 0.292480, -1.463971,
      0.067680, 1.463926, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.133700, -0.778599, 0.613113, 0.077563, 0.608549, 0.789716, -0.987982, 0.153140, -0.020973,
      -0.736635, 0.349696, -0.578862, 0.612040, -0.019423, -0.790589, -0.287709, -0.936662, -0.199720,
      0.206283, -0.784758, 0.584468, 0.077563, 0.608549, 0.789716, -0.975413, -0.117572, 0.186401,
      0.140344, -0.750452, -0.645852, 0.657174, 0.558506, -0.506156, 0.740558, -0.353401, 0.571561,
      -0.233795, 0.906409, 0.351801, -0.036369, 0.353423, -0.934757, -0.971606, -0.231336, -0.049663,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998420, -0.047533, -0.029985, 0.047554, 0.998869, 0.000000, 0.029951, -0.001426, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.661726, 1.863506, -0.507543,
      0.710971, 0.393989, -0.555250,
      -0.504956, 1.156460, 0.026787,
      0.613157, 1.100835, -0.006796,
      1.170975, 0.167191, -1.408606,
      0.070705, 1.463778, 0.007744,
      0.000000, -0.630241, 0.000000,
      -0.511088, -1.925261, -0.181857,
      0.493819, -1.930979, -0.162053,
      -0.270000, -0.630000, 0.000000,
      0.270000, -0.630000, -0.000000,
      0.000000, 0.047206, -0.000000,
      ],
      rotations: [
      -0.129367, -0.776149, 0.617136, 0.079809, 0.612197, 0.786667, -0.988380, 0.151022, -0.017254,
      -0.758560, 0.330600, -0.561507, 0.587282, -0.026446, -0.808951, -0.282289, -0.943400, -0.174095,
      0.174189, -0.785607, 0.593700, 0.079809, 0.612197, 0.786668, -0.981473, -0.089647, 0.169337,
      0.108682, -0.785385, -0.609392, 0.642465, 0.523286, -0.559831, 0.758569, -0.330669, 0.561454,
      -0.186616, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.944607, -0.176419, -0.276758, 0.136071, 0.977870, -0.158916, 0.298669, 0.112454, 0.947709,
      0.990273, 0.139040, 0.005236, -0.136763, 0.979596, -0.147266, -0.025605, 0.145118, 0.989083,
      0.983027, -0.183434, 0.003292, 0.181270, 0.973882, 0.136734, -0.028288, -0.133816, 0.990603,
      0.985510, 0.169616, -0.000560, -0.168285, 0.978179, 0.121843, 0.021214, -0.119983, 0.992549,
      0.998316, -0.049665, -0.029985, 0.049687, 0.998765, 0.000000, 0.029948, -0.001490, 0.999550,
      ]
    },
    {
      centers: [
      -0.638590, 1.852116, -0.521117,
      0.727282, 0.375614, -0.540852,
      -0.496279, 1.144395, 0.016357,
      0.621987, 1.083067, 0.005430,
      1.203311, 0.146292, -1.384693,
      0.081209, 1.448773, 0.008941,
      0.000000, -0.644861, 0.000000,
      -0.514258, -1.932219, -0.223987,
      0.526496, -1.921173, -0.272030,
      -0.269940, -0.643245, -0.005468,
      0.269942, -0.645996, 0.005468,
      0.003454, 0.032577, -0.000075,
      ],
      rotations: [
      -0.145793, -0.775348, 0.614476, 0.066982, 0.611951, 0.788054, -0.987045, 0.156052, -0.037284,
      -0.745338, 0.334341, -0.576791, 0.603401, -0.029612, -0.796888, -0.283512, -0.941987, -0.179671,
      0.158123, -0.786357, 0.597193, 0.066982, 0.611951, 0.788054, -0.985145, -0.084608, 0.149436,
      0.116995, -0.786059, -0.606979, 0.656330, 0.519886, -0.546763, 0.745348, -0.334410, 0.576738,
      -0.188929, 0.919921, 0.343586, 0.002508, 0.350338, -0.936620, -0.981988, -0.176092, -0.068497,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.999782, -0.005095, 0.020251, 0.005098, 0.999987, -0.000111, -0.020250, 0.000215, 0.999795,
      0.949520, -0.179410, -0.257343, 0.134207, 0.973778, -0.183699, 0.283552, 0.139888, 0.948699,
      0.985945, 0.152468, 0.068305, -0.134995, 0.967910, -0.211959, -0.098430, 0.199759, 0.974889,
      0.981557, -0.189851, 0.022427, 0.183698, 0.969155, 0.164300, -0.052927, -0.157150, 0.986155,
      0.980997, 0.192960, 0.020257, -0.192898, 0.958780, 0.208644, 0.020838, -0.208587, 0.977782,
      0.998452, -0.054757, -0.009756, 0.054769, 0.998499, 0.000895, 0.009693, -0.001428, 0.999952,
      ]
    },
    {
      centers: [
      -0.571432, 1.821606, -0.556015,
      0.770597, 0.324234, -0.502263,
      -0.468753, 1.112602, -0.011249,
      0.647440, 1.034058, 0.037165,
      1.287078, 0.086325, -1.319518,
      0.112949, 1.408046, 0.011743,
      0.000000, -0.684101, 0.000000,
      -0.514086, -1.951927, -0.314574,
      0.618716, -1.890692, -0.431457,
      -0.269214, -0.678340, -0.019771,
      0.269223, -0.689381, 0.019771,
      0.013916, -0.006797, -0.000375,
      ],
      rotations: [
      -0.190111, -0.772072, 0.606435, 0.034569, 0.612053, 0.790061, -0.981154, 0.171163, -0.089668,
      -0.708471, 0.344886, -0.615730, 0.644255, -0.040111, -0.763759, -0.288108, -0.937787, -0.193777,
      0.114088, -0.787782, 0.605296, 0.034569, 0.612053, 0.790061, -0.992869, -0.069212, 0.097061,
      0.136842, -0.788694, -0.599363, 0.692335, 0.508889, -0.511571, 0.708482, -0.344955, 0.615678,
      -0.192640, 0.923244, 0.332432, 0.057552, 0.348824, -0.935419, -0.979580, -0.161067, -0.120332,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.997106, -0.020446, 0.073227, 0.020542, 0.999789, -0.000553, -0.073200, 0.002056, 0.997315,
      0.960896, -0.184898, -0.206135, 0.134307, 0.962184, -0.236985, 0.242158, 0.200032, 0.949393,
      0.955652, 0.195242, 0.220475, -0.122370, 0.944219, -0.305740, -0.267869, 0.265201, 0.926237,
      0.976173, -0.204493, 0.072595, 0.184115, 0.957586, 0.221655, -0.114842, -0.203008, 0.972419,
      0.964746, 0.251303, 0.078182, -0.262776, 0.903242, 0.339268, 0.014641, -0.347852, 0.937436,
      0.996601, -0.070128, 0.043227, 0.070060, 0.997538, 0.003086, -0.043337, -0.000047, 0.999060,
      ]
    },
    {
      centers: [
      -0.463203, 1.776434, -0.601719,
      0.831682, 0.245095, -0.445744,
      -0.419648, 1.067130, -0.049460,
      0.687471, 0.959951, 0.081688,
      1.400869, -0.009250, -1.222013,
      0.166258, 1.347528, 0.015999,
      0.000000, -0.741031, 0.000000,
      -0.503651, -1.981834, -0.416059,
      0.745661, -1.844757, -0.550297,
      -0.266769, -0.728391, -0.039678,
      0.266792, -0.753192, 0.039678,
      0.031553, -0.064320, -0.000664,
      ],
      rotations: [
      -0.254540, -0.764544, 0.592185, -0.008072, 0.614013, 0.789255, -0.967029, 0.196116, -0.162462,
      -0.651715, 0.360693, -0.667209, 0.697762, -0.059710, -0.713837, -0.297315, -0.930771, -0.212764,
      0.048396, -0.788116, 0.613621, -0.008072, 0.614013, 0.789255, -0.998796, -0.043150, 0.023354,
      0.160234, -0.794285, -0.586035, 0.741333, 0.488837, -0.459851, 0.651729, -0.360763, 0.667158,
      -0.192593, 0.929196, 0.315441, 0.135713, 0.343592, -0.929261, -0.971849, -0.136160, -0.192278,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.988076, -0.045927, 0.146955, 0.046577, 0.998914, -0.000980, -0.146751, 0.007813, 0.989143,
      0.973051, -0.187037, -0.134868, 0.140446, 0.944592, -0.296682, 0.182886, 0.269745, 0.945405,
      0.880358, 0.255824, 0.399404, -0.097387, 0.921628, -0.375656, -0.464204, 0.291815, 0.836277,
      0.964099, -0.224694, 0.141515, 0.178107, 0.942440, 0.282993, -0.196956, -0.247628, 0.948625,
      0.932864, 0.322447, 0.160598, -0.360052, 0.820726, 0.443589, 0.011227, -0.471632, 0.881724,
      0.988499, -0.095695, 0.117097, 0.095614, 0.995398, 0.006323, -0.117163, 0.004945, 0.993100,
      ]
    },
    {
      centers: [
      -0.318337, 1.719815, -0.647627,
      0.901682, 0.143348, -0.378631,
      -0.347034, 1.013168, -0.091005,
      0.740648, 0.866562, 0.132279,
      1.523610, -0.136872, -1.103849,
      0.241362, 1.272441, 0.021965,
      0.000000, -0.808721, 0.000000,
      -0.486107, -2.017904, -0.511893,
      0.868426, -1.798865, -0.618662,
      -0.261902, -0.786626, -0.061802,
      0.261942, -0.830337, 0.061801,
      0.056466, -0.133632, -0.000569,
      ],
      rotations: [
      -0.330914, -0.750700, 0.571792, -0.050935, 0.619255, 0.783536, -0.942285, 0.230159, -0.243157,
      -0.580268, 0.379683, -0.720507, 0.751971, -0.089985, -0.653026, -0.312777, -0.920730, -0.233295,
      -0.031884, -0.785163, 0.618468, -0.050935, 0.619255, 0.783536, -0.998193, -0.006520, -0.059737,
      0.178928, -0.803572, -0.567677, 0.794517, 0.458323, -0.398350, 0.580283, -0.379753, 0.720458,
      -0.183690, 0.937729, 0.294825, 0.225039, 0.332080, -0.916013, -0.956878, -0.101916, -0.272026,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.970080, -0.080946, 0.228894, 0.083351, 0.996520, -0.000839, -0.228030, 0.019893, 0.973451,
      0.981675, -0.181944, -0.056648, 0.150766, 0.923376, -0.353054, 0.116543, 0.338044, 0.933886,
      0.776010, 0.309207, 0.549726, -0.066789, 0.906970, -0.415867, -0.627173, 0.286001, 0.724470,
      0.943653, -0.250770, 0.215947, 0.168576, 0.925775, 0.338414, -0.284783, -0.282942, 0.915884,
      0.889904, 0.380494, 0.251585, -0.456003, 0.728217, 0.511626, 0.011462, -0.570022, 0.821550,
      0.971144, -0.130899, 0.199361, 0.131448, 0.991267, 0.010535, -0.198999, 0.015975, 0.979869,
      ]
    },
    {
      centers: [
      -0.143911, 1.654123, -0.685964,
      0.973686, 0.024367, -0.310560,
      -0.250879, 0.955062, -0.129302,
      0.807179, 0.759317, 0.181500,
      1.637460, -0.291999, -0.981810,
      0.338353, 1.187282, 0.029046,
      0.000000, -0.880241, 0.000000,
      -0.470038, -2.054891, -0.594673,
      0.942920, -1.782519, -0.652382,
      -0.254759, -0.846376, -0.082771,
      0.254822, -0.913629, 0.082771,
      0.088638, -0.208618, -0.000000,
      ],
      rotations: [
      -0.411194, -0.728612, 0.547763, -0.083674, 0.628548, 0.773257, -0.907699, 0.272125, -0.319421,
      -0.501917, 0.399708, -0.767015, 0.796599, -0.131807, -0.589963, -0.336911, -0.907117, -0.252251,
      -0.118852, -0.776734, 0.618513, -0.083674, 0.628548, 0.773257, -0.989380, 0.040150, -0.139697,
      0.185009, -0.816612, -0.546733, 0.844888, 0.416319, -0.335922, 0.501933, -0.399780, 0.766968,
      -0.161499, 0.948190, 0.273596, 0.313232, 0.312150, -0.896910, -0.935844, -0.059151, -0.347415,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.943669, -0.124541, 0.306560, 0.130841, 0.991403, 0.000000, -0.303925, 0.040111, 0.951851,
      0.985599, -0.168427, 0.015069, 0.160219, 0.901625, -0.401750, 0.054079, 0.398379, 0.915625,
      0.693532, 0.339172, 0.635590, -0.040431, 0.899177, -0.435714, -0.719290, 0.276484, 0.637321,
      0.916298, -0.283185, 0.283204, 0.161865, 0.908659, 0.384888, -0.366331, -0.306831, 0.878440,
      0.855760, 0.396848, 0.331943, -0.517367, 0.653302, 0.552746, 0.002497, -0.644754, 0.764386,
      0.944694, -0.174772, 0.277502, 0.177568, 0.983991, 0.015232, -0.275722, 0.034886, 0.960604,
      ]
    },
    {
      centers: [
      0.207652, 1.580019, -0.718367,
      1.201538, -0.104021, -0.246930,
      0.021396, 0.895518, -0.164502,
      1.041415, 0.645584, 0.224720,
      1.893391, -0.465716, -0.864808,
      0.609724, 1.096805, 0.034362,
      0.158506, -0.948970, 0.000000,
      -0.341866, -2.100372, -0.619505,
      1.136293, -1.806106, -0.657321,
      -0.087265, -0.902143, -0.101507,
      0.404367, -0.995325, 0.101507,
      0.284582, -0.283359, 0.000195,
      ],
      rotations: [
      -0.490216, -0.697250, 0.523002, -0.104029, 0.642564, 0.759138, -0.865371, 0.317734, -0.387529,
      -0.421650, 0.416581, -0.805402, 0.828612, -0.183711, -0.528823, -0.368259, -0.890343, -0.267722,
      -0.206951, -0.760557, 0.615406, -0.104029, 0.642564, 0.759138, -0.972805, 0.093084, -0.212099,
      0.177914, -0.832895, -0.524054, 0.889126, 0.364259, -0.277074, 0.421665, -0.416654, 0.805356,
      -0.127281, 0.959281, 0.252149, 0.394549, 0.282205, -0.874466, -0.910017, -0.011818, -0.414403,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.910430, -0.172558, 0.375952, 0.186104, 0.982530, 0.000289, -0.369434, 0.069704, 0.926639,
      0.964083, -0.248820, 0.092914, 0.264623, 0.869840, -0.416358, 0.022778, 0.425990, 0.904441,
      0.666903, 0.282312, 0.689594, 0.074412, 0.895592, -0.438609, -0.741419, 0.343824, 0.576265,
      0.871745, -0.338404, 0.354322, 0.191430, 0.900925, 0.389472, -0.451016, -0.271692, 0.850157,
      0.833928, 0.367424, 0.411783, -0.550320, 0.609611, 0.570546, -0.041395, -0.702406, 0.710571,
      0.910732, -0.223155, 0.347520, 0.231111, 0.972742, 0.018968, -0.342280, 0.063041, 0.937481,
      ]
    },
    {
      centers: [
      0.696453, 1.497144, -0.755974,
      1.555800, -0.222403, -0.163745,
      0.425385, 0.835264, -0.209680,
      1.391145, 0.544604, 0.277377,
      2.282419, -0.631375, -0.707827,
      1.002328, 1.011980, 0.039523,
      0.452875, -1.009533, 0.000000,
      -0.116269, -2.156853, -0.579262,
      1.490591, -1.876750, -0.555586,
      0.220210, -0.953048, -0.124805,
      0.685654, -1.065550, 0.124805,
      0.612041, -0.351049, -0.000009,
      ],
      rotations: [
      -0.571139, -0.660442, 0.487460, -0.140823, 0.663876, 0.734464, -0.808683, 0.350836, -0.472171,
      -0.323870, 0.418394, -0.848560, 0.863445, -0.235922, -0.445875, -0.386745, -0.877090, -0.284853,
      -0.301186, -0.735422, 0.606994, -0.140823, 0.663876, 0.734464, -0.943110, 0.135732, -0.303515,
      0.182950, -0.852231, -0.490134, 0.928239, 0.313984, -0.199466, 0.323885, -0.418469, 0.848518,
      -0.101103, 0.969812, 0.221908, 0.487337, 0.242735, -0.838799, -0.867341, 0.023339, -0.497166,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.861934, -0.208337, 0.462240, 0.234949, 0.972008, -0.000013, -0.449298, 0.108614, 0.886755,
      0.892401, -0.401980, 0.205019, 0.451198, 0.801386, -0.392684, -0.006449, 0.442936, 0.896530,
      0.624623, 0.125777, 0.770731, 0.290430, 0.878737, -0.378776, -0.724911, 0.460436, 0.512350,
      0.798444, -0.394783, 0.454569, 0.252993, 0.905118, 0.341697, -0.546335, -0.157823, 0.822563,
      0.782780, 0.339072, 0.521809, -0.605216, 0.609926, 0.511571, -0.144806, -0.716255, 0.682649,
      0.862286, -0.259517, 0.434873, 0.277486, 0.960455, 0.022955, -0.423633, 0.100878, 0.900199,
      ]
    },
    {
      centers: [
      1.038757, 1.410953, -0.800933,
      1.749419, -0.303855, -0.026050,
      0.670309, 0.778202, -0.277605,
      1.544407, 0.483937, 0.357817,
      2.535886, -0.751731, -0.440942,
      1.209132, 0.950712, 0.048131,
      0.611382, -1.056862, 0.000000,
      0.086178, -2.202363, -0.632513,
      1.722243, -1.959421, -0.331687,
      0.401497, -0.999793, -0.159973,
      0.821392, -1.113468, 0.159973,
      0.788409, -0.402954, -0.000000,
      ],
      rotations: [
      -0.656358, -0.626398, 0.420500, -0.227866, 0.695923, 0.681006, -0.719216, 0.351166, -0.599509,
      -0.182323, 0.391860, -0.901778, 0.912394, -0.274404, -0.303709, -0.366463, -0.878151, -0.307501,
      -0.409386, -0.703057, 0.581476, -0.227866, 0.695923, 0.681006, -0.883448, 0.146295, -0.445103,
      0.227792, -0.875325, -0.426517, 0.956484, 0.283181, -0.070329, 0.182342, -0.391937, 0.901741,
      -0.103745, 0.980072, 0.169399, 0.612927, 0.197132, -0.765153, -0.783299, 0.024449, -0.621164,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.777584, -0.210509, 0.592494, 0.261316, 0.965253, -0.000000, -0.571907, 0.154828, 0.805575,
      0.799145, -0.476335, 0.366704, 0.599296, 0.679014, -0.424010, -0.047027, 0.558610, 0.828096,
      0.492413, -0.006092, 0.870341, 0.447320, 0.859572, -0.247064, -0.746615, 0.510978, 0.425990,
      0.695146, -0.413370, 0.588130, 0.237083, 0.904190, 0.355293, -0.678649, -0.107545, 0.726547,
      0.676745, 0.341638, 0.652151, -0.677331, 0.636056, 0.369669, -0.288512, -0.691893, 0.661850,
      0.780445, -0.262737, 0.567341, 0.299629, 0.953601, 0.029439, -0.548752, 0.147016, 0.822957,
      ]
    },
    {
      centers: [
      0.946287, 1.405211, -0.762054,
      1.717722, -0.325633, -0.087429,
      0.617677, 0.754649, -0.234054,
      1.534291, 0.449048, 0.332361,
      2.477158, -0.755030, -0.567152,
      1.176153, 0.921923, 0.059744,
      0.582553, -1.086534, 0.000000,
      0.491363, -2.230056, -0.788568,
      1.629369, -2.120001, 0.024347,
      0.410021, -1.039074, -0.202189,
      0.755212, -1.133531, 0.202189,
      0.761252, -0.433081, 0.000095,
      ],
      rotations: [
      -0.622819, -0.643520, 0.444948, -0.185690, 0.674059, 0.714958, -0.760011, 0.362666, -0.539312,
      -0.244925, 0.416371, -0.875584, 0.891518, -0.258225, -0.372176, -0.381061, -0.871754, -0.307957,
      -0.365121, -0.722847, 0.586667, -0.185690, 0.674059, 0.714958, -0.912253, 0.152108, -0.380339,
      0.203812, -0.860757, -0.466432, 0.947874, 0.292695, -0.125958, 0.244942, -0.416446, 0.875543,
      -0.097974, 0.973895, 0.204769, 0.558867, 0.224093, -0.798405, -0.823450, 0.036215, -0.566233,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.639241, -0.174921, 0.748848, 0.263783, 0.964582, 0.000140, -0.722350, 0.197444, 0.662742,
      0.567136, -0.323703, 0.757346, 0.786663, 0.485264, -0.381679, -0.243962, 0.812241, 0.529856,
      0.254272, -0.151606, 0.955176, 0.612219, 0.789793, -0.037619, -0.748688, 0.594342, 0.293638,
      0.575104, -0.329407, 0.748830, -0.061158, 0.895477, 0.440886, -0.815791, -0.299352, 0.494846,
      0.533328, 0.332370, 0.777876, -0.657260, 0.741707, 0.133715, -0.532513, -0.582581, 0.614027,
      0.818406, -0.272858, 0.505728, 0.295220, 0.954699, 0.037348, -0.493008, 0.118735, 0.861884,
      ]
    },
    {
      centers: [
      0.710797, 1.435543, -0.681581,
      1.597479, -0.313835, -0.234897,
      0.478239, 0.752717, -0.143374,
      1.477390, 0.434647, 0.250236,
      2.272993, -0.704130, -0.853452,
      1.075400, 0.914521, 0.064983,
      0.491885, -1.096694, 0.000000,
      0.940157, -2.189675, -0.576885,
      1.197369, -2.344461, 0.180909,
      0.342510, -1.056006, -0.221205,
      0.641387, -1.136919, 0.221205,
      0.668913, -0.442786, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.226223, -0.222351, 0.948358, 0.908428, 0.399527, -0.123025, -0.351540, 0.889347, 0.292372,
      0.093350, -0.183436, 0.978589, 0.741954, 0.668233, 0.054483, -0.663920, 0.720982, 0.198481,
      0.494870, -0.011722, 0.868888, -0.449359, 0.852384, 0.267429, -0.743761, -0.522785, 0.416552,
      0.518482, 0.211070, 0.828629, -0.418031, 0.907928, 0.030297, -0.745940, -0.362101, 0.558978,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.571135, 1.490884, -0.681581,
      1.457818, -0.258493, -0.234897,
      0.338578, 0.808059, -0.143374,
      1.337729, 0.489988, 0.250236,
      2.133332, -0.648788, -0.853452,
      0.935739, 0.969862, 0.064983,
      0.352224, -1.041353, 0.000000,
      1.096989, -1.918693, -0.577060,
      0.745792, -2.388908, 0.206514,
      0.202849, -1.000664, -0.221205,
      0.501725, -1.081577, 0.221205,
      0.529252, -0.387445, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.265175, -0.144146, 0.953365, 0.777732, 0.616420, -0.123123, -0.569925, 0.774111, 0.275566,
      0.109557, -0.110937, 0.987770, 0.769027, 0.639073, -0.013521, -0.629758, 0.761103, 0.155328,
      0.465926, 0.113659, 0.877494, -0.672286, 0.690249, 0.267560, -0.575278, -0.714590, 0.398016,
      0.564975, 0.096267, 0.819473, -0.183508, 0.982956, 0.011045, -0.804443, -0.156620, 0.573012,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.471804, 1.614787, -0.681581,
      1.358487, -0.134590, -0.234897,
      0.239247, 0.931962, -0.143374,
      1.238397, 0.613891, 0.250236,
      2.034000, -0.524886, -0.853452,
      0.836407, 1.093765, 0.064983,
      0.252893, -0.917450, 0.000000,
      1.096550, -1.669628, -0.613820,
      0.300094, -2.283219, 0.258178,
      0.103518, -0.876762, -0.221205,
      0.402394, -0.957674, 0.221205,
      0.429921, -0.263542, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.361829, -0.037727, 0.931481, 0.463764, 0.874055, -0.144746, -0.808704, 0.484360, 0.333754,
      0.135793, -0.049322, 0.989509, 0.729552, 0.680715, -0.066189, -0.670309, 0.730886, 0.128420,
      0.475328, 0.167643, 0.863689, -0.746641, 0.596141, 0.295199, -0.465393, -0.785182, 0.408532,
      0.577336, -0.021790, 0.816215, 0.076918, 0.996650, -0.027800, -0.812875, 0.078832, 0.577078,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.446710, 1.742274, -0.681581,
      1.333393, -0.007103, -0.234897,
      0.214153, 1.059449, -0.143374,
      1.213303, 0.741378, 0.250236,
      2.008906, -0.397398, -0.853452,
      0.811313, 1.221252, 0.064983,
      0.227799, -0.789963, 0.000000,
      1.024778, -1.622238, -0.554735,
      -0.133208, -2.056992, 0.278043,
      0.078423, -0.749274, -0.221205,
      0.377300, -0.830187, 0.221205,
      0.404826, -0.136055, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.427411, 0.077372, 0.900741, 0.052122, 0.992565, -0.109992, -0.902554, 0.093960, 0.420200,
      0.131696, -0.048900, 0.990083, 0.680929, 0.730317, -0.054504, -0.720410, 0.681355, 0.129477,
      0.493907, 0.213375, 0.842928, -0.711545, 0.656365, 0.250775, -0.499760, -0.723641, 0.476009,
      0.533822, -0.183899, 0.825358, 0.383841, 0.922410, -0.042736, -0.753459, 0.339620, 0.562990,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.443125, 1.801201, -0.681581,
      1.329808, 0.051824, -0.234897,
      0.210568, 1.118376, -0.143374,
      1.209718, 0.800305, 0.250236,
      2.005321, -0.338472, -0.853452,
      0.807728, 1.280179, 0.064983,
      0.224214, -0.731036, 0.000000,
      0.803404, -1.789165, -0.396387,
      -0.091060, -2.016257, 0.274754,
      0.074839, -0.690348, -0.221205,
      0.373715, -0.771260, 0.221205,
      0.401242, -0.077128, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.444446, 0.137820, 0.885141, -0.265382, 0.963996, -0.016844, -0.855593, -0.227415, 0.465019,
      0.113355, -0.059116, 0.991794, 0.803122, 0.593136, -0.056438, -0.584932, 0.802929, 0.114712,
      0.516700, 0.210280, 0.829942, -0.547794, 0.826180, 0.131715, -0.657984, -0.522694, 0.542077,
      0.537786, -0.165204, 0.826737, 0.349456, 0.936087, -0.040264, -0.767246, 0.310561, 0.561146,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.487431, 1.746544, -0.681581,
      1.374113, -0.002833, -0.234897,
      0.254874, 1.063719, -0.143374,
      1.254024, 0.745648, 0.250236,
      2.049627, -0.393128, -0.853452,
      0.852034, 1.225522, 0.064983,
      0.268520, -0.785693, 0.000000,
      0.836973, -1.844866, -0.430780,
      0.326508, -2.152226, 0.259015,
      0.119144, -0.745004, -0.221205,
      0.418021, -0.825917, 0.221205,
      0.445548, -0.131785, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.430006, 0.093958, 0.897924, -0.138816, 0.989624, -0.037076, -0.892090, -0.108703, 0.438587,
      0.090590, -0.062887, 0.993901, 0.944410, 0.322138, -0.065697, -0.316042, 0.944601, 0.088574,
      0.526952, 0.185893, 0.829316, -0.539721, 0.826965, 0.157575, -0.656524, -0.530634, 0.536102,
      0.568823, -0.015806, 0.822308, 0.068808, 0.997225, -0.028429, -0.819577, 0.072752, 0.568332,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.542925, 1.648575, -0.681581,
      1.429607, -0.100802, -0.234897,
      0.310367, 0.965750, -0.143374,
      1.309518, 0.647680, 0.250236,
      2.105121, -0.491097, -0.853452,
      0.907528, 1.127553, 0.064983,
      0.324013, -0.883662, 0.000000,
      0.928112, -1.899959, -0.510950,
      0.712591, -2.232091, 0.239680,
      0.174638, -0.842973, -0.221205,
      0.473515, -0.923886, 0.221205,
      0.501041, -0.229754, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.393126, 0.013895, 0.919380, 0.162248, 0.983149, -0.084236, -0.905056, 0.182282, 0.384247,
      0.087945, -0.053396, 0.994693, 0.980744, 0.179441, -0.077079, -0.174373, 0.982318, 0.068148,
      0.529031, 0.148066, 0.835585, -0.566522, 0.794728, 0.217853, -0.631806, -0.588629, 0.504318,
      0.563609, 0.114554, 0.818060, -0.179756, 0.983613, -0.013892, -0.806246, -0.139221, 0.574965,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.555977, 1.587733, -0.681581,
      1.442659, -0.161645, -0.234897,
      0.323420, 0.904907, -0.143374,
      1.322570, 0.586837, 0.250236,
      2.118173, -0.551940, -0.853452,
      0.920580, 1.066711, 0.064983,
      0.337066, -0.944504, 0.000000,
      0.874999, -1.998310, -0.535186,
      0.953337, -2.230125, 0.217772,
      0.187690, -0.903816, -0.221205,
      0.486567, -0.984729, 0.221205,
      0.514093, -0.290596, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.342733, -0.059096, 0.937572, 0.424611, 0.900004, -0.098491, -0.837997, 0.431859, 0.333554,
      0.102631, -0.045426, 0.993682, 0.970372, 0.224241, -0.089973, -0.218736, 0.973474, 0.067094,
      0.531985, 0.092616, 0.841674, -0.516774, 0.822930, 0.236076, -0.670774, -0.560544, 0.485648,
      0.544125, 0.201692, 0.814401, -0.350954, 0.936389, 0.002580, -0.762075, -0.287221, 0.580297,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.557841, 1.570202, -0.681581,
      1.444524, -0.179175, -0.234897,
      0.325284, 0.887377, -0.143374,
      1.324435, 0.569306, 0.250236,
      2.120038, -0.569470, -0.853452,
      0.922445, 1.049180, 0.064983,
      0.338930, -0.962035, 0.000000,
      0.688250, -2.117348, -0.520836,
      1.225959, -2.108292, 0.180661,
      0.189555, -0.921346, -0.221205,
      0.488431, -1.002259, 0.221205,
      0.515958, -0.308127, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.284818, -0.116653, 0.951458, 0.620033, 0.779391, -0.090049, -0.731052, 0.615583, 0.294313,
      0.133865, -0.028507, 0.990589, 0.911560, 0.395676, -0.111799, -0.388765, 0.917948, 0.078952,
      0.538781, 0.013627, 0.842336, -0.374958, 0.899251, 0.225286, -0.754402, -0.437221, 0.489608,
      0.501047, 0.304413, 0.810114, -0.554531, 0.831604, 0.030483, -0.664415, -0.464507, 0.585480,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.519116, 1.652603, -0.681581,
      1.405798, -0.096774, -0.234897,
      0.286559, 0.969778, -0.143374,
      1.285709, 0.651707, 0.250236,
      2.081312, -0.487069, -0.853452,
      0.883719, 1.131581, 0.064983,
      0.300205, -0.879634, 0.000000,
      0.314721, -2.135075, -0.470367,
      1.480554, -1.752442, 0.106939,
      0.150829, -0.838945, -0.221205,
      0.449706, -0.919858, 0.221205,
      0.477232, -0.225726, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.239317, -0.148959, 0.959447, 0.690595, 0.720719, -0.060362, -0.682499, 0.677035, 0.275350,
      0.186651, 0.036383, 0.981752, 0.675708, 0.720652, -0.155173, -0.713147, 0.692341, 0.109926,
      0.544662, -0.091389, 0.833661, -0.123226, 0.974535, 0.187340, -0.829553, -0.204766, 0.519531,
      0.423944, 0.414373, 0.805336, -0.775073, 0.626004, 0.085913, -0.468544, -0.660617, 0.586560,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.447197, 1.805634, -0.681581,
      1.333879, 0.056256, -0.234897,
      0.214640, 1.122808, -0.143374,
      1.213790, 0.804738, 0.250236,
      2.009393, -0.334039, -0.853452,
      0.811800, 1.284612, 0.064983,
      0.228286, -0.726603, 0.000000,
      -0.100962, -1.990640, -0.406232,
      1.434236, -1.559563, 0.065049,
      0.078910, -0.685915, -0.221205,
      0.377787, -0.766827, 0.221205,
      0.405313, -0.072695, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.214641, -0.162514, 0.963078, 0.666056, 0.745558, -0.022635, -0.714352, 0.646322, 0.268270,
      0.202932, 0.129384, 0.970607, 0.254117, 0.950312, -0.179809, -0.945644, 0.283137, 0.159970,
      0.534113, -0.190443, 0.823683, 0.135244, 0.980997, 0.139118, -0.834525, 0.037093, 0.549720,
      0.435480, 0.423918, 0.794135, -0.794322, 0.596043, 0.117409, -0.423567, -0.681929, 0.596292,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.408471, 1.888035, -0.681581,
      1.295154, 0.138657, -0.234897,
      0.175914, 1.205209, -0.143374,
      1.175064, 0.887139, 0.250236,
      1.970667, -0.251638, -0.853452,
      0.773074, 1.367013, 0.064983,
      0.189560, -0.644202, -0.000000,
      -0.168695, -1.903304, -0.410445,
      1.219297, -1.677553, 0.132984,
      0.040185, -0.603514, -0.221205,
      0.339061, -0.684426, 0.221205,
      0.366588, 0.009706, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.199937, -0.169080, 0.965110, 0.713427, 0.700279, -0.025113, -0.671601, 0.693556, 0.260638,
      0.197208, 0.147659, 0.969178, -0.053108, 0.988749, -0.139835, -0.978922, -0.023895, 0.202832,
      0.526386, -0.204739, 0.825227, 0.157054, 0.977287, 0.142285, -0.835615, 0.054708, 0.546585,
      0.498447, 0.372239, 0.782936, -0.661831, 0.746713, 0.066330, -0.559938, -0.551234, 0.618556,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.460865, 1.854461, -0.681581,
      1.347547, 0.105084, -0.234897,
      0.228307, 1.171636, -0.143374,
      1.227458, 0.853565, 0.250236,
      2.023061, -0.285211, -0.853452,
      0.825468, 1.333439, 0.064983,
      0.241954, -0.677776, -0.000000,
      0.083650, -1.944471, -0.465261,
      1.135803, -1.819211, 0.174508,
      0.092578, -0.637087, -0.221205,
      0.391455, -0.718000, 0.221205,
      0.418981, -0.023868, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.180428, -0.176284, 0.967662, 0.837922, 0.542768, -0.057358, -0.515105, 0.821174, 0.245642,
      0.202539, 0.103364, 0.973804, 0.048553, 0.992130, -0.115408, -0.978070, 0.070656, 0.195927,
      0.522224, -0.159940, 0.837676, 0.006714, 0.982997, 0.183501, -0.852782, -0.090205, 0.514418,
      0.526162, 0.322281, 0.786949, -0.559660, 0.827979, 0.035110, -0.640262, -0.458897, 0.616019,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.513258, 1.780067, -0.681581,
      1.399941, 0.030689, -0.234897,
      0.280701, 1.097241, -0.143374,
      1.279851, 0.779171, 0.250236,
      2.075454, -0.359606, -0.853452,
      0.877861, 1.259045, 0.064983,
      0.294347, -0.752170, 0.000000,
      0.292178, -2.004003, -0.497999,
      1.059770, -1.970911, 0.195910,
      0.144972, -0.711482, -0.221205,
      0.443848, -0.792394, 0.221205,
      0.471375, -0.098262, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.170157, -0.179668, 0.968900, 0.896666, 0.436029, -0.076616, -0.408703, 0.881815, 0.235295,
      0.195402, 0.039137, 0.979942, 0.327535, 0.939227, -0.102822, -0.924413, 0.341057, 0.170708,
      0.515928, -0.122795, 0.847785, -0.110680, 0.971822, 0.208116, -0.849452, -0.201206, 0.487799,
      0.544083, 0.267281, 0.795320, -0.463098, 0.886103, 0.019018, -0.699652, -0.378659, 0.605891,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.502511, 1.700931, -0.681581,
      1.389193, -0.048446, -0.234897,
      0.269954, 1.018106, -0.143374,
      1.269104, 0.700035, 0.250236,
      2.064707, -0.438741, -0.853452,
      0.867114, 1.179909, 0.064983,
      0.283600, -0.831306, 0.000000,
      0.465705, -2.043087, -0.521761,
      0.846200, -2.135748, 0.220532,
      0.134224, -0.790617, -0.221205,
      0.433101, -0.871530, 0.221205,
      0.460627, -0.177398, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.194825, -0.170968, 0.965823, 0.871712, 0.481573, -0.090594, -0.449625, 0.859569, 0.242856,
      0.174623, -0.008225, 0.984601, 0.537573, 0.838577, -0.088336, -0.824937, 0.544720, 0.150856,
      0.518156, -0.067469, 0.852621, -0.249233, 0.941709, 0.225982, -0.818167, -0.329595, 0.471136,
      0.567013, 0.184851, 0.802699, -0.310600, 0.950541, 0.000505, -0.762905, -0.249605, 0.596384,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.482552, 1.639495, -0.681581,
      1.369234, -0.109883, -0.234897,
      0.249994, 0.956669, -0.143374,
      1.249145, 0.638599, 0.250236,
      2.044748, -0.500178, -0.853452,
      0.847155, 1.118473, 0.064983,
      0.263640, -0.892742, 0.000000,
      0.826160, -1.920383, -0.568729,
      0.531683, -2.257451, 0.245502,
      0.114265, -0.852054, -0.221205,
      0.413142, -0.932967, 0.221205,
      0.440668, -0.238834, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.271464, -0.127113, 0.954018, 0.730445, 0.672662, -0.118222, -0.626703, 0.728950, 0.275452,
      0.150871, -0.037628, 0.987837, 0.667089, 0.741329, -0.073645, -0.729541, 0.670086, 0.136946,
      0.506020, 0.057235, 0.860621, -0.535259, 0.803257, 0.261297, -0.676344, -0.592877, 0.437099,
      0.582034, 0.066959, 0.810403, -0.089128, 0.995853, -0.018269, -0.808265, -0.061597, 0.585588,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
    {
      centers: [
      0.446710, 1.742274, -0.681581,
      1.333393, -0.007103, -0.234897,
      0.214153, 1.059449, -0.143374,
      1.213303, 0.741378, 0.250236,
      2.008906, -0.397398, -0.853452,
      0.811313, 1.221252, 0.064983,
      0.227799, -0.789963, 0.000000,
      1.024778, -1.622238, -0.554735,
      -0.133208, -2.056992, 0.278043,
      0.078423, -0.749274, -0.221205,
      0.377300, -0.830187, 0.221205,
      0.404826, -0.136055, -0.000000,
      ],
      rotations: [
      -0.536394, -0.676760, 0.504259, -0.073505, 0.632678, 0.770919, -0.840761, 0.376451, -0.389110,
      -0.387565, 0.456722, -0.800749, 0.821698, -0.222587, -0.524660, -0.417860, -0.861313, -0.289021,
      -0.258396, -0.758695, 0.598008, -0.073505, 0.632678, 0.770919, -0.963239, 0.155246, -0.219249,
      0.133433, -0.831647, -0.539036, 0.912130, 0.315757, -0.261374, 0.387576, -0.456795, 0.800702,
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      0.553475, -0.149838, 0.819277, 0.261316, 0.965253, -0.000000, -0.790809, 0.214090, 0.573399,
      0.427411, 0.077372, 0.900741, 0.052122, 0.992565, -0.109992, -0.902554, 0.093960, 0.420200,
      0.131696, -0.048900, 0.990083, 0.680929, 0.730317, -0.054504, -0.720410, 0.681355, 0.129477,
      0.493907, 0.213375, 0.842928, -0.711545, 0.656365, 0.250775, -0.499760, -0.723641, 0.476009,
      0.533822, -0.183899, 0.825358, 0.383841, 0.922410, -0.042736, -0.753459, 0.339620, 0.562990,
      0.892099, -0.283992, 0.351438, 0.288494, 0.956616, 0.040708, -0.347752, 0.065072, 0.935326,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flaggerArmature / Start) */
cachePoseSequence(flaggerStartAnim);

var flagStartAnim = 
/* Begin pose exported from flagger.blend (flagArmature / Start) */
{
  bone_count: 2,
  frame_count: 43,
  fps: 16.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      1.860620, 3.700276, -0.797570,
      0.996210, 2.504341, -0.701512,
      ],
      rotations: [
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      -0.999889, 0.012419, -0.008251, 0.008625, 0.030446, -0.999499, -0.012162, -0.999459, -0.030550,
      ]
    },
    {
      centers: [
      1.860620, 3.700276, -0.797570,
      0.996210, 2.504341, -0.701512,
      ],
      rotations: [
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      -0.999889, 0.012419, -0.008251, 0.008625, 0.030446, -0.999499, -0.012162, -0.999459, -0.030550,
      ]
    },
    {
      centers: [
      1.860620, 3.700276, -0.797570,
      0.996210, 2.504341, -0.701512,
      ],
      rotations: [
      -0.953549, -0.021271, 0.300484, -0.301011, 0.105817, -0.947731, -0.011637, -0.994158, -0.107305,
      -0.999889, 0.012419, -0.008251, 0.008625, 0.030446, -0.999499, -0.012162, -0.999459, -0.030550,
      ]
    },
    {
      centers: [
      1.906002, 3.606037, -0.889301,
      0.979400, 2.458447, -0.783755,
      ],
      rotations: [
      -0.950417, 0.030292, 0.309499, -0.303857, 0.121304, -0.944964, -0.066169, -0.992153, -0.106085,
      -0.997803, 0.066244, 0.001178, 0.000767, 0.029337, -0.999569, -0.066250, -0.997372, -0.029323,
      ]
    },
    {
      centers: [
      1.998431, 3.309494, -1.125085,
      0.915171, 2.311511, -0.993659,
      ],
      rotations: [
      -0.927802, 0.170448, 0.331859, -0.305153, 0.165020, -0.937896, -0.214626, -0.971450, -0.101093,
      -0.976730, 0.213051, 0.024628, -0.018868, 0.029029, -0.999400, -0.213638, -0.976610, -0.024334,
      ]
    },
    {
      centers: [
      2.045786, 2.776114, -1.416318,
      0.772589, 2.042794, -1.249272,
      ],
      rotations: [
      -0.857029, 0.371303, 0.357261, -0.287895, 0.229974, -0.929639, -0.427338, -0.899581, -0.090198,
      -0.904131, 0.424159, 0.051341, -0.040746, 0.034018, -0.998590, -0.425307, -0.904949, -0.013474,
      ]
    },
    {
      centers: [
      1.960184, 2.042937, -1.632833,
      0.542494, 1.672478, -1.433809,
      ],
      rotations: [
      -0.720247, 0.585019, 0.372823, -0.237504, 0.297001, -0.924869, -0.651795, -0.754681, -0.074970,
      -0.758505, 0.648150, 0.067618, -0.052532, 0.042609, -0.997710, -0.649547, -0.760320, 0.001729,
      ]
    },
    {
      centers: [
      1.735327, 1.275524, -1.679977,
      0.272346, 1.291127, -1.465180,
      ],
      rotations: [
      -0.537777, 0.756354, 0.372458, -0.161445, 0.341217, -0.926016, -0.827485, -0.558122, -0.061390,
      -0.561475, 0.824784, 0.066917, -0.050365, 0.046655, -0.997640, -0.825960, -0.563520, 0.015345,
      ]
    },
    {
      centers: [
      1.463261, 0.663641, -1.586949,
      0.038957, 0.997915, -1.371741,
      ],
      rotations: [
      -0.360363, 0.859627, 0.362188, -0.087071, 0.355583, -0.930580, -0.928740, -0.366882, -0.053290,
      -0.369760, 0.927454, 0.055740, -0.042510, 0.043042, -0.998168, -0.928154, -0.371452, 0.023511,
      ]
    },
    {
      centers: [
      1.251985, 0.292480, -1.463971,
      -0.109916, 0.828886, -1.253756,
      ],
      rotations: [
      -0.233795, 0.906409, 0.351801, -0.036369, 0.353423, -0.934757, -0.971606, -0.231336, -0.049663,
      -0.233716, 0.971283, 0.044570, -0.036882, 0.036950, -0.998636, -0.971605, -0.235041, 0.027187,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.170975, 0.167191, -1.408606,
      -0.161373, 0.774180, -1.200983,
      ],
      rotations: [
      -0.186617, 0.918908, 0.347538, -0.018245, 0.350450, -0.936404, -0.982264, -0.181089, -0.048635,
      -0.183245, 0.982253, 0.040007, -0.035109, 0.034131, -0.998801, -0.982440, -0.184430, 0.028232,
      ]
    },
    {
      centers: [
      1.203311, 0.146292, -1.384693,
      -0.129857, 0.760107, -1.204161,
      ],
      rotations: [
      -0.188929, 0.919921, 0.343586, 0.002508, 0.350338, -0.936620, -0.981988, -0.176092, -0.068497,
      -0.179007, 0.983182, 0.036179, -0.014701, 0.034095, -0.999311, -0.983738, -0.179416, 0.008351,
      ]
    },
    {
      centers: [
      1.287078, 0.086325, -1.319518,
      -0.044144, 0.720854, -1.210352,
      ],
      rotations: [
      -0.192640, 0.923244, 0.332432, 0.057552, 0.348824, -0.935419, -0.979580, -0.161067, -0.120332,
      -0.165466, 0.985875, 0.025938, 0.038806, 0.032789, -0.998709, -0.985452, -0.164246, -0.043684,
      ]
    },
    {
      centers: [
      1.400869, -0.009250, -1.222013,
      0.082210, 0.659893, -1.213034,
      ],
      rotations: [
      -0.192593, 0.929196, 0.315441, 0.135713, 0.343592, -0.929261, -0.971849, -0.136160, -0.192278,
      -0.141181, 0.989915, 0.011682, 0.113474, 0.027903, -0.993149, -0.983459, -0.138888, -0.116269,
      ]
    },
    {
      centers: [
      1.523610, -0.136872, -1.103849,
      0.234374, 0.579984, -1.207214,
      ],
      rotations: [
      -0.183691, 0.937729, 0.294825, 0.225039, 0.332080, -0.916013, -0.956878, -0.101916, -0.272026,
      -0.105014, 0.994464, -0.003823, 0.196542, 0.016985, -0.980348, -0.974856, -0.103701, -0.197238,
      ]
    },
    {
      centers: [
      1.637460, -0.291999, -0.981810,
      0.396482, 0.484032, -1.192628,
      ],
      rotations: [
      -0.161499, 0.948190, 0.273596, 0.313232, 0.312150, -0.896910, -0.935844, -0.059151, -0.347415,
      -0.056563, 0.998235, -0.018095, 0.274894, -0.001852, -0.961473, -0.959809, -0.059358, -0.274304,
      ]
    },
    {
      centers: [
      1.893391, -0.465716, -0.864808,
      0.716641, 0.375049, -1.173141,
      ],
      rotations: [
      -0.127281, 0.959281, 0.252149, 0.394549, 0.282205, -0.874466, -0.910017, -0.011818, -0.414403,
      0.001190, 0.999502, -0.031536, 0.343379, -0.030027, -0.938717, -0.939196, -0.009712, -0.343243,
      ]
    },
    {
      centers: [
      2.282419, -0.631375, -0.707827,
      1.183350, 0.258751, -1.139589,
      ],
      rotations: [
      -0.101103, 0.969812, 0.221908, 0.487337, 0.242735, -0.838799, -0.867341, 0.023339, -0.497166,
      0.054859, 0.997279, -0.049239, 0.426517, -0.067994, -0.901921, -0.902815, 0.028477, -0.429086,
      ]
    },
    {
      centers: [
      2.535886, -0.751731, -0.440942,
      1.539748, 0.146785, -1.063095,
      ],
      rotations: [
      -0.103745, 0.980072, 0.169399, 0.612927, 0.197132, -0.765153, -0.783299, 0.024449, -0.621164,
      0.091309, 0.992892, -0.076343, 0.552840, -0.114306, -0.825411, -0.828270, 0.033162, -0.559347,
      ]
    },
    {
      centers: [
      2.477158, -0.755030, -0.567151,
      1.436059, 0.153195, -1.094350,
      ],
      rotations: [
      -0.097974, 0.973895, 0.204768, 0.558867, 0.224093, -0.798405, -0.823450, 0.036215, -0.566233,
      0.080024, 0.995382, -0.053019, 0.496726, -0.085937, -0.863643, -0.864210, 0.042776, -0.501309,
      ]
    },
    {
      centers: [
      2.272993, -0.704130, -0.853452,
      1.151780, 0.211397, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.133332, -0.648788, -0.853452,
      1.012119, 0.266738, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.034000, -0.524886, -0.853452,
      0.912788, 0.390641, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.008906, -0.397398, -0.853452,
      0.887694, 0.518128, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.005321, -0.338471, -0.853452,
      0.884109, 0.577055, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.049627, -0.393128, -0.853452,
      0.928415, 0.522398, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.105121, -0.491097, -0.853452,
      0.983908, 0.424429, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.118173, -0.551940, -0.853452,
      0.996961, 0.363587, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.120038, -0.569470, -0.853452,
      0.998825, 0.346056, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.081312, -0.487069, -0.853452,
      0.960100, 0.428457, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.009393, -0.334039, -0.853452,
      0.888181, 0.581488, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      1.970667, -0.251637, -0.853452,
      0.849455, 0.663889, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.023061, -0.285211, -0.853452,
      0.901848, 0.630315, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.075454, -0.359606, -0.853452,
      0.954242, 0.555921, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.064707, -0.438741, -0.853452,
      0.943495, 0.476785, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.044748, -0.500178, -0.853452,
      0.923535, 0.415349, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
    {
      centers: [
      2.008906, -0.397398, -0.853452,
      0.887694, 0.518128, -1.155758,
      ],
      rotations: [
      -0.072496, 0.960067, 0.270216, 0.419850, 0.275130, -0.864887, -0.904694, 0.050749, -0.423030,
      0.061121, 0.998066, -0.011391, 0.350830, -0.032166, -0.935887, -0.934442, 0.053206, -0.352118,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / Start) */
cachePoseSequence(flagStartAnim);

var flaggerIdleAnim =
/* Begin pose exported from flagger.blend (flaggerArmature / Idle) */
{
  bone_count: 12,
  frame_count: 21,
  fps: 4.000000,
  rest_centers: [
    -1.460000, 0.880000, 0.009999,
    1.460000, 0.880000, 0.009999,
    -0.560000, 0.880000, 0.010000,
    0.560000, 0.880000, 0.010000,
    3.610000, 0.880000, -1.170632,
    -0.000000, 1.215542, 0.007747,
    0.000000, -0.880241, 0.000000,
    -0.270000, -2.209999, -0.000001,
    0.270000, -2.210001, -0.000002,
    -0.270000, -0.880000, 0.000000,
    0.270000, -0.880000, -0.000000,
    0.000000, -0.202794, -0.000000,
  ],
  poses: [
    {
      centers: [
      -1.060018, 0.141852, 0.147484,
      0.895040, 0.049425, 0.082234,
      -0.559448, 0.880000, 0.026787,
      0.560048, 0.880000, -0.006796,
      -0.559160, 0.181929, -0.813833,
      0.000232, 1.215542, 0.007744,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.089725, 0.765756, 0.636842, -0.718254, 0.393219, -0.574012, -0.689972, -0.508918, 0.514725,
      -0.183881, -0.581554, -0.792454, 0.919110, 0.184078, -0.348358, 0.348462, -0.792408, 0.500663,
      0.556189, 0.820164, -0.134109, -0.718254, 0.393219, -0.574012, -0.418050, 0.415584, 0.807790,
      0.372214, -0.922860, 0.098924, 0.856635, 0.300554, -0.419339, 0.357259, 0.240826, 0.902424,
      0.101254, -0.945302, 0.310085, -0.186126, -0.324183, -0.927503, 0.977295, 0.036198, -0.208770,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999550, -0.000000, -0.029985, 0.000000, 1.000000, 0.000000, 0.029985, 0.000000, 0.999550,
      ]
    },
    {
      centers: [
      -1.060151, 0.141852, 0.146523,
      0.894965, 0.049425, 0.083046,
      -0.559472, 0.880000, 0.026279,
      0.560054, 0.880000, -0.006288,
      -0.558422, 0.181929, -0.814340,
      0.000225, 1.215542, 0.007744,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.090303, 0.765756, 0.636761, -0.717733, 0.393219, -0.574664, -0.690438, -0.508918, 0.514099,
      -0.183162, -0.581554, -0.792620, 0.919425, 0.184078, -0.347524, 0.348008, -0.792408, 0.500979,
      0.556310, 0.820164, -0.133605, -0.717733, 0.393219, -0.574664, -0.418782, 0.415584, 0.807410,
      0.372124, -0.922860, 0.099262, 0.857015, 0.300554, -0.418561, 0.356440, 0.240826, 0.902748,
      0.100972, -0.945302, 0.310177, -0.185284, -0.324183, -0.927672, 0.977484, 0.036198, -0.207883,
      0.994314, -0.000000, -0.106487, 0.000000, 1.000000, 0.000000, 0.106487, 0.000000, 0.994314,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999577, -0.000000, -0.029078, 0.000000, 1.000000, 0.000000, 0.029078, 0.000000, 0.999577,
      ]
    },
    {
      centers: [
      -1.060509, 0.141852, 0.143912,
      0.894758, 0.049425, 0.085250,
      -0.559535, 0.880000, 0.024902,
      0.560068, 0.880000, -0.004909,
      -0.556415, 0.181929, -0.815713,
      0.000206, 1.215542, 0.007745,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.091871, 0.765756, 0.636536, -0.716315, 0.393219, -0.576429, -0.691702, -0.508918, 0.512397,
      -0.181209, -0.581554, -0.793069, 0.920278, 0.184078, -0.345259, 0.346773, -0.792408, 0.501835,
      0.556637, 0.820164, -0.132234, -0.716316, 0.393219, -0.576429, -0.420769, 0.415584, 0.806377,
      0.371879, -0.922860, 0.100178, 0.858043, 0.300554, -0.416450, 0.354216, 0.240826, 0.903623,
      0.100208, -0.945302, 0.310425, -0.182999, -0.324183, -0.928125, 0.977993, 0.036198, -0.205475,
      0.995804, -0.000000, -0.091506, 0.000000, 1.000000, 0.000000, 0.091506, 0.000000, 0.995804,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999646, -0.000000, -0.026617, 0.000000, 1.000000, 0.000000, 0.026617, 0.000000, 0.999646,
      ]
    },
    {
      centers: [
      -1.061024, 0.141852, 0.140062,
      0.894443, 0.049425, 0.088496,
      -0.559622, 0.880000, 0.022871,
      0.560082, 0.880000, -0.002877,
      -0.553451, 0.181929, -0.817726,
      0.000178, 1.215542, 0.007745,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.094180, 0.765756, 0.636199, -0.714219, 0.393219, -0.579025, -0.693557, -0.508918, 0.509884,
      -0.178330, -0.581554, -0.793721, 0.921525, 0.184078, -0.341917, 0.344950, -0.792408, 0.503090,
      0.557114, 0.820164, -0.130213, -0.714219, 0.393219, -0.579025, -0.423693, 0.415584, 0.804845,
      0.371513, -0.922860, 0.101527, 0.859548, 0.300554, -0.413333, 0.350934, 0.240826, 0.904902,
      0.099081, -0.945302, 0.310786, -0.179630, -0.324183, -0.928783, 0.978732, 0.036198, -0.201925,
      0.997591, -0.000000, -0.069373, 0.000000, 1.000000, 0.000000, 0.069373, 0.000000, 0.997591,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999736, -0.000000, -0.022989, 0.000000, 1.000000, 0.000000, 0.022989, 0.000000, 0.999736,
      ]
    },
    {
      centers: [
      -1.061631, 0.141852, 0.135385,
      0.894044, 0.049425, 0.092437,
      -0.559717, 0.880000, 0.020405,
      0.560089, 0.880000, -0.000409,
      -0.549842, 0.181929, -0.820157,
      0.000144, 1.215542, 0.007746,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.096982, 0.765756, 0.635778, -0.711660, 0.393219, -0.582167, -0.695797, -0.508918, 0.506822,
      -0.174831, -0.581554, -0.794499, 0.923023, 0.184078, -0.337853, 0.342729, -0.792408, 0.504605,
      0.557682, 0.820164, -0.127757, -0.711661, 0.393219, -0.582166, -0.427235, 0.415584, 0.802970,
      0.371062, -0.922860, 0.103163, 0.861361, 0.300554, -0.409541, 0.346943, 0.240826, 0.906440,
      0.097711, -0.945302, 0.311220, -0.175535, -0.324183, -0.929566, 0.979612, 0.036198, -0.197610,
      0.999100, -0.000000, -0.042426, 0.000000, 1.000000, 0.000000, 0.042426, 0.000000, 0.999100,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999827, -0.000000, -0.018583, 0.000000, 1.000000, 0.000000, 0.018583, 0.000000, 0.999827,
      ]
    },
    {
      centers: [
      -1.062268, 0.141852, 0.130293,
      0.893591, 0.049425, 0.096723,
      -0.559809, 0.880000, 0.017720,
      0.560084, 0.880000, 0.002277,
      -0.545903, 0.181929, -0.822785,
      0.000107, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.100030, 0.765756, 0.635305, -0.708860, 0.393219, -0.585573, -0.698220, -0.508918, 0.503480,
      -0.171019, -0.581554, -0.795329, 0.924632, 0.184078, -0.333423, 0.340305, -0.792408, 0.506243,
      0.558288, 0.820164, -0.125081, -0.708861, 0.393219, -0.585573, -0.431081, 0.415584, 0.800912,
      0.370563, -0.922860, 0.104941, 0.863315, 0.300554, -0.405406, 0.342593, 0.240826, 0.908093,
      0.096217, -0.945302, 0.311685, -0.171076, -0.324183, -0.930397, 0.980549, 0.036198, -0.192910,
      0.999915, 0.000000, -0.013045, -0.000000, 1.000000, 0.000000, 0.013045, 0.000000, 0.999915,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999905, -0.000000, -0.013788, 0.000000, 1.000000, 0.000000, 0.013788, 0.000000, 0.999905,
      ]
    },
    {
      centers: [
      -1.062881, 0.141852, 0.125197,
      0.893117, 0.049425, 0.101008,
      -0.559887, 0.880000, 0.015035,
      0.560067, 0.880000, 0.004963,
      -0.541951, 0.181929, -0.825393,
      0.000070, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.103076, 0.765756, 0.634818, -0.706044, 0.393219, -0.588966, -0.700626, -0.508918, 0.500126,
      -0.167203, -0.581554, -0.796140, 0.926221, 0.184078, -0.328984, 0.337874, -0.792408, 0.507869,
      0.558882, 0.820164, -0.122402, -0.706044, 0.393219, -0.588965, -0.434917, 0.415584, 0.798835,
      0.370055, -0.922860, 0.106717, 0.865250, 0.300554, -0.401261, 0.338234, 0.240826, 0.909726,
      0.094721, -0.945302, 0.312143, -0.166612, -0.324183, -0.931207, 0.981463, 0.036198, -0.188205,
      0.999866, 0.000000, 0.016357, -0.000000, 1.000000, 0.000000, -0.016357, 0.000000, 0.999866,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999960, -0.000000, -0.008993, 0.000000, 1.000000, 0.000000, 0.008993, 0.000000, 0.999960,
      ]
    },
    {
      centers: [
      -1.063422, 0.141852, 0.120512,
      0.892663, 0.049425, 0.104943,
      -0.559948, 0.880000, 0.012568,
      0.560040, 0.880000, 0.007431,
      -0.538308, 0.181929, -0.827773,
      0.000036, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.105873, 0.765756, 0.634358, -0.703442, 0.393219, -0.592071, -0.702824, -0.508918, 0.497033,
      -0.163692, -0.581554, -0.796869, 0.927662, 0.184078, -0.324899, 0.335632, -0.792408, 0.509353,
      0.559416, 0.820164, -0.119938, -0.703442, 0.393219, -0.592071, -0.438433, 0.415584, 0.796911,
      0.369581, -0.922860, 0.108347, 0.867010, 0.300554, -0.397444, 0.334221, 0.240826, 0.911208,
      0.093345, -0.945302, 0.312557, -0.162506, -0.324183, -0.931932, 0.982283, 0.036198, -0.183878,
      0.999059, 0.000000, 0.043362, -0.000000, 1.000000, 0.000000, -0.043362, 0.000000, 0.999059,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999990, -0.000000, -0.004586, 0.000000, 1.000000, 0.000000, 0.004586, 0.000000, 0.999990,
      ]
    },
    {
      centers: [
      -1.063852, 0.141852, 0.116651,
      0.892276, 0.049425, 0.108182,
      -0.559990, 0.880000, 0.010536,
      0.560009, 0.880000, 0.009464,
      -0.535300, 0.181929, -0.829722,
      0.000007, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.108174, 0.765756, 0.633969, -0.701288, 0.393219, -0.594620, -0.704623, -0.508918, 0.494479,
      -0.160799, -0.581554, -0.797458, 0.928835, 0.184078, -0.321531, 0.333782, -0.792408, 0.510568,
      0.559847, 0.820164, -0.117907, -0.701288, 0.393219, -0.594620, -0.441323, 0.415584, 0.795314,
      0.369186, -0.922860, 0.109687, 0.868446, 0.300554, -0.394295, 0.330912, 0.240826, 0.912415,
      0.092210, -0.945302, 0.312894, -0.159123, -0.324183, -0.932516, 0.982943, 0.036198, -0.180312,
      0.997848, 0.000000, 0.065569, -0.000000, 1.000000, 0.000000, -0.065569, 0.000000, 0.997848,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, -0.000957, 0.000000, 1.000000, 0.000000, 0.000957, 0.000000, 1.000000,
      ]
    },
    {
      centers: [
      -1.064137, 0.141852, 0.114031,
      0.892007, 0.049425, 0.110379,
      -0.560014, 0.880000, 0.009156,
      0.559984, 0.880000, 0.010843,
      -0.533255, 0.181929, -0.831038,
      -0.000012, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.109735, 0.765756, 0.633701, -0.699822, 0.393219, -0.596346, -0.705838, -0.508918, 0.492742,
      -0.158835, -0.581554, -0.797851, 0.929624, 0.184078, -0.319242, 0.332523, -0.792408, 0.511388,
      0.560136, 0.820164, -0.116528, -0.699822, 0.393219, -0.596345, -0.443280, 0.415584, 0.794225,
      0.368914, -0.922860, 0.110596, 0.869415, 0.300554, -0.392155, 0.328664, 0.240826, 0.913227,
      0.091439, -0.945302, 0.313120, -0.156826, -0.324183, -0.932905, 0.983384, 0.036198, -0.177891,
      0.996745, 0.000000, 0.080613, -0.000000, 1.000000, 0.000000, -0.080613, 0.000000, 0.996745,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999999, -0.000000, 0.001506, 0.000000, 1.000000, 0.000000, -0.001506, 0.000000, 0.999999,
      ]
    },
    {
      centers: [
      -1.064240, 0.141852, 0.113065,
      0.891906, 0.049425, 0.111188,
      -0.560023, 0.880000, 0.008648,
      0.559974, 0.880000, 0.011351,
      -0.532501, 0.181929, -0.831521,
      -0.000019, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.110310, 0.765756, 0.633601, -0.699280, 0.393219, -0.596980, -0.706285, -0.508918, 0.492102,
      -0.158111, -0.581554, -0.797995, 0.929913, 0.184078, -0.318399, 0.332059, -0.792408, 0.511690,
      0.560241, 0.820164, -0.116020, -0.699281, 0.393219, -0.596980, -0.444000, 0.415584, 0.793822,
      0.368814, -0.922860, 0.110931, 0.869770, 0.300554, -0.391366, 0.327835, 0.240826, 0.913525,
      0.091155, -0.945302, 0.313203, -0.155979, -0.324183, -0.933046, 0.983545, 0.036198, -0.176998,
      0.996282, 0.000000, 0.086149, -0.000000, 1.000000, 0.000000, -0.086149, 0.000000, 0.996282,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999997, -0.000000, 0.002413, 0.000000, 1.000000, 0.000000, -0.002413, 0.000000, 0.999997,
      ]
    },
    {
      centers: [
      -1.064137, 0.141852, 0.114031,
      0.892007, 0.049425, 0.110379,
      -0.560014, 0.880000, 0.009156,
      0.559984, 0.880000, 0.010843,
      -0.533255, 0.181929, -0.831038,
      -0.000012, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.109735, 0.765756, 0.633701, -0.699822, 0.393219, -0.596346, -0.705839, -0.508918, 0.492742,
      -0.158835, -0.581554, -0.797851, 0.929624, 0.184078, -0.319242, 0.332523, -0.792408, 0.511388,
      0.560136, 0.820164, -0.116528, -0.699822, 0.393219, -0.596345, -0.443280, 0.415584, 0.794225,
      0.368914, -0.922860, 0.110596, 0.869415, 0.300554, -0.392155, 0.328664, 0.240826, 0.913227,
      0.091439, -0.945302, 0.313120, -0.156826, -0.324183, -0.932905, 0.983384, 0.036198, -0.177891,
      0.996745, 0.000000, 0.080613, -0.000000, 1.000000, 0.000000, -0.080613, 0.000000, 0.996745,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999999, -0.000000, 0.001506, 0.000000, 1.000000, 0.000000, -0.001506, 0.000000, 0.999999,
      ]
    },
    {
      centers: [
      -1.063852, 0.141852, 0.116651,
      0.892276, 0.049425, 0.108182,
      -0.559990, 0.880000, 0.010536,
      0.560009, 0.880000, 0.009464,
      -0.535300, 0.181929, -0.829722,
      0.000007, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.108174, 0.765756, 0.633969, -0.701288, 0.393219, -0.594620, -0.704623, -0.508918, 0.494479,
      -0.160799, -0.581554, -0.797458, 0.928835, 0.184078, -0.321531, 0.333782, -0.792408, 0.510568,
      0.559847, 0.820164, -0.117907, -0.701288, 0.393219, -0.594620, -0.441323, 0.415584, 0.795314,
      0.369186, -0.922860, 0.109687, 0.868446, 0.300554, -0.394295, 0.330912, 0.240826, 0.912415,
      0.092210, -0.945302, 0.312894, -0.159123, -0.324183, -0.932516, 0.982943, 0.036198, -0.180312,
      0.997848, 0.000000, 0.065569, -0.000000, 1.000000, 0.000000, -0.065569, 0.000000, 0.997848,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, -0.000957, 0.000000, 1.000000, 0.000000, 0.000957, 0.000000, 1.000000,
      ]
    },
    {
      centers: [
      -1.063422, 0.141852, 0.120512,
      0.892663, 0.049425, 0.104943,
      -0.559948, 0.880000, 0.012568,
      0.560040, 0.880000, 0.007431,
      -0.538308, 0.181929, -0.827773,
      0.000035, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.105873, 0.765756, 0.634358, -0.703442, 0.393219, -0.592071, -0.702824, -0.508918, 0.497033,
      -0.163692, -0.581554, -0.796869, 0.927662, 0.184078, -0.324899, 0.335632, -0.792408, 0.509353,
      0.559416, 0.820164, -0.119938, -0.703442, 0.393219, -0.592071, -0.438433, 0.415584, 0.796911,
      0.369581, -0.922860, 0.108347, 0.867010, 0.300554, -0.397444, 0.334221, 0.240826, 0.911208,
      0.093345, -0.945302, 0.312557, -0.162506, -0.324183, -0.931932, 0.982283, 0.036198, -0.183878,
      0.999059, 0.000000, 0.043362, -0.000000, 1.000000, 0.000000, -0.043362, 0.000000, 0.999059,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999990, -0.000000, -0.004586, 0.000000, 1.000000, 0.000000, 0.004586, 0.000000, 0.999990,
      ]
    },
    {
      centers: [
      -1.062881, 0.141852, 0.125197,
      0.893117, 0.049425, 0.101008,
      -0.559887, 0.880000, 0.015035,
      0.560067, 0.880000, 0.004963,
      -0.541951, 0.181929, -0.825393,
      0.000070, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.103076, 0.765756, 0.634818, -0.706044, 0.393219, -0.588966, -0.700626, -0.508918, 0.500126,
      -0.167203, -0.581554, -0.796140, 0.926221, 0.184078, -0.328984, 0.337874, -0.792408, 0.507869,
      0.558882, 0.820164, -0.122402, -0.706044, 0.393219, -0.588965, -0.434917, 0.415584, 0.798835,
      0.370055, -0.922860, 0.106717, 0.865250, 0.300554, -0.401261, 0.338234, 0.240826, 0.909726,
      0.094721, -0.945302, 0.312143, -0.166612, -0.324183, -0.931207, 0.981463, 0.036198, -0.188205,
      0.999866, 0.000000, 0.016357, -0.000000, 1.000000, 0.000000, -0.016357, 0.000000, 0.999866,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999960, -0.000000, -0.008993, 0.000000, 1.000000, 0.000000, 0.008993, 0.000000, 0.999960,
      ]
    },
    {
      centers: [
      -1.062268, 0.141852, 0.130293,
      0.893591, 0.049425, 0.096723,
      -0.559809, 0.880000, 0.017720,
      0.560084, 0.880000, 0.002277,
      -0.545903, 0.181929, -0.822785,
      0.000107, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.100030, 0.765756, 0.635305, -0.708860, 0.393219, -0.585573, -0.698220, -0.508918, 0.503480,
      -0.171019, -0.581554, -0.795329, 0.924632, 0.184078, -0.333423, 0.340305, -0.792408, 0.506243,
      0.558288, 0.820164, -0.125081, -0.708861, 0.393219, -0.585573, -0.431081, 0.415584, 0.800912,
      0.370563, -0.922860, 0.104941, 0.863315, 0.300554, -0.405406, 0.342593, 0.240826, 0.908093,
      0.096217, -0.945302, 0.311685, -0.171076, -0.324183, -0.930397, 0.980549, 0.036198, -0.192910,
      0.999915, -0.000000, -0.013045, 0.000000, 1.000000, 0.000000, 0.013045, 0.000000, 0.999915,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999905, -0.000000, -0.013788, 0.000000, 1.000000, 0.000000, 0.013788, 0.000000, 0.999905,
      ]
    },
    {
      centers: [
      -1.061631, 0.141852, 0.135385,
      0.894044, 0.049425, 0.092437,
      -0.559717, 0.880000, 0.020405,
      0.560089, 0.880000, -0.000409,
      -0.549842, 0.181929, -0.820157,
      0.000144, 1.215542, 0.007746,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.096982, 0.765756, 0.635778, -0.711660, 0.393219, -0.582167, -0.695797, -0.508918, 0.506822,
      -0.174831, -0.581554, -0.794499, 0.923023, 0.184078, -0.337853, 0.342729, -0.792408, 0.504605,
      0.557682, 0.820164, -0.127757, -0.711661, 0.393219, -0.582166, -0.427235, 0.415584, 0.802970,
      0.371062, -0.922860, 0.103163, 0.861361, 0.300554, -0.409541, 0.346943, 0.240826, 0.906440,
      0.097711, -0.945302, 0.311220, -0.175535, -0.324183, -0.929566, 0.979612, 0.036198, -0.197610,
      0.999100, -0.000000, -0.042426, 0.000000, 1.000000, 0.000000, 0.042426, 0.000000, 0.999100,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999827, -0.000000, -0.018583, 0.000000, 1.000000, 0.000000, 0.018583, 0.000000, 0.999827,
      ]
    },
    {
      centers: [
      -1.061024, 0.141852, 0.140062,
      0.894443, 0.049425, 0.088496,
      -0.559622, 0.880000, 0.022871,
      0.560082, 0.880000, -0.002877,
      -0.553451, 0.181929, -0.817726,
      0.000178, 1.215542, 0.007745,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.094180, 0.765756, 0.636199, -0.714219, 0.393219, -0.579025, -0.693557, -0.508918, 0.509884,
      -0.178330, -0.581554, -0.793721, 0.921525, 0.184078, -0.341917, 0.344950, -0.792408, 0.503090,
      0.557114, 0.820164, -0.130213, -0.714219, 0.393219, -0.579025, -0.423693, 0.415584, 0.804845,
      0.371513, -0.922860, 0.101527, 0.859548, 0.300554, -0.413333, 0.350935, 0.240826, 0.904902,
      0.099081, -0.945302, 0.310786, -0.179630, -0.324183, -0.928783, 0.978732, 0.036198, -0.201925,
      0.997591, -0.000000, -0.069373, 0.000000, 1.000000, 0.000000, 0.069373, 0.000000, 0.997591,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999736, -0.000000, -0.022989, 0.000000, 1.000000, 0.000000, 0.022989, 0.000000, 0.999736,
      ]
    },
    {
      centers: [
      -1.060509, 0.141852, 0.143912,
      0.894758, 0.049425, 0.085250,
      -0.559535, 0.880000, 0.024902,
      0.560068, 0.880000, -0.004909,
      -0.556415, 0.181929, -0.815713,
      0.000206, 1.215542, 0.007745,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.091871, 0.765756, 0.636536, -0.716315, 0.393219, -0.576429, -0.691702, -0.508918, 0.512397,
      -0.181209, -0.581554, -0.793069, 0.920278, 0.184078, -0.345259, 0.346773, -0.792408, 0.501835,
      0.556637, 0.820164, -0.132234, -0.716316, 0.393219, -0.576429, -0.420769, 0.415584, 0.806377,
      0.371879, -0.922860, 0.100178, 0.858043, 0.300554, -0.416450, 0.354216, 0.240826, 0.903623,
      0.100208, -0.945302, 0.310425, -0.182999, -0.324183, -0.928125, 0.977993, 0.036198, -0.205475,
      0.995804, -0.000000, -0.091506, 0.000000, 1.000000, 0.000000, 0.091506, 0.000000, 0.995804,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999646, -0.000000, -0.026617, 0.000000, 1.000000, 0.000000, 0.026617, 0.000000, 0.999646,
      ]
    },
    {
      centers: [
      -1.060151, 0.141852, 0.146523,
      0.894965, 0.049425, 0.083046,
      -0.559472, 0.880000, 0.026279,
      0.560054, 0.880000, -0.006288,
      -0.558422, 0.181929, -0.814340,
      0.000225, 1.215542, 0.007744,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.090303, 0.765756, 0.636761, -0.717733, 0.393219, -0.574664, -0.690438, -0.508918, 0.514099,
      -0.183162, -0.581554, -0.792620, 0.919425, 0.184078, -0.347524, 0.348008, -0.792408, 0.500979,
      0.556310, 0.820164, -0.133605, -0.717733, 0.393219, -0.574664, -0.418782, 0.415584, 0.807410,
      0.372124, -0.922860, 0.099262, 0.857015, 0.300554, -0.418561, 0.356440, 0.240826, 0.902748,
      0.100972, -0.945302, 0.310177, -0.185284, -0.324183, -0.927672, 0.977484, 0.036198, -0.207883,
      0.994314, -0.000000, -0.106487, 0.000000, 1.000000, 0.000000, 0.106487, 0.000000, 0.994314,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999577, -0.000000, -0.029078, 0.000000, 1.000000, 0.000000, 0.029078, 0.000000, 0.999577,
      ]
    },
    {
      centers: [
      -1.060018, 0.141852, 0.147484,
      0.895040, 0.049425, 0.082234,
      -0.559448, 0.880000, 0.026787,
      0.560048, 0.880000, -0.006796,
      -0.559160, 0.181929, -0.813833,
      0.000232, 1.215542, 0.007744,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.089725, 0.765756, 0.636842, -0.718254, 0.393219, -0.574012, -0.689972, -0.508918, 0.514725,
      -0.183881, -0.581554, -0.792454, 0.919110, 0.184078, -0.348358, 0.348462, -0.792408, 0.500663,
      0.556189, 0.820164, -0.134109, -0.718254, 0.393219, -0.574012, -0.418050, 0.415584, 0.807790,
      0.372214, -0.922860, 0.098924, 0.856635, 0.300554, -0.419339, 0.357259, 0.240826, 0.902424,
      0.101254, -0.945302, 0.310085, -0.186126, -0.324183, -0.927503, 0.977295, 0.036198, -0.208770,
      0.993709, -0.000000, -0.111996, 0.000000, 1.000000, 0.000000, 0.111996, 0.000000, 0.993709,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      0.999550, -0.000000, -0.029985, 0.000000, 1.000000, 0.000000, 0.029985, 0.000000, 0.999550,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flaggerArmature / Idle) */
cachePoseSequence(flaggerIdleAnim);

var flagIdleAnim =
/* Begin pose exported from flagger.blend (flagArmature / Idle) */
{
  bone_count: 2,
  frame_count: 21,
  fps: 4.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      -0.559160, 0.181929, -0.813833,
      0.683577, -0.619361, -0.829088,
      ],
      rotations: [
      0.101254, -0.945302, 0.310085, -0.186126, -0.324183, -0.927503, 0.977295, 0.036198, -0.208770,
      0.038712, -0.999225, 0.007133, -0.132597, -0.012212, -0.991095, 0.990414, 0.037422, -0.132967,
      ]
    },
    {
      centers: [
      -0.558422, 0.181929, -0.814340,
      0.684329, -0.619361, -0.828468,
      ],
      rotations: [
      0.100972, -0.945302, 0.310177, -0.185284, -0.324183, -0.927672, 0.977484, 0.036198, -0.207883,
      0.038706, -0.999225, 0.007168, -0.131698, -0.012212, -0.991215, 0.990534, 0.037422, -0.132069,
      ]
    },
    {
      centers: [
      -0.556415, 0.181929, -0.815712,
      0.686367, -0.619361, -0.826780,
      ],
      rotations: [
      0.100208, -0.945302, 0.310425, -0.182999, -0.324183, -0.928125, 0.977993, 0.036198, -0.205475,
      0.038688, -0.999225, 0.007263, -0.129257, -0.012212, -0.991536, 0.990856, 0.037422, -0.129629,
      ]
    },
    {
      centers: [
      -0.553451, 0.181929, -0.817726,
      0.689363, -0.619361, -0.824284,
      ],
      rotations: [
      0.099081, -0.945302, 0.310786, -0.179630, -0.324183, -0.928783, 0.978732, 0.036198, -0.201925,
      0.038661, -0.999225, 0.007403, -0.125658, -0.012212, -0.991999, 0.991320, 0.037422, -0.126033,
      ]
    },
    {
      centers: [
      -0.549842, 0.181929, -0.820157,
      0.692989, -0.619361, -0.821238,
      ],
      rotations: [
      0.097711, -0.945302, 0.311220, -0.175535, -0.324183, -0.929566, 0.979612, 0.036198, -0.197610,
      0.038628, -0.999225, 0.007574, -0.121285, -0.012212, -0.992543, 0.991866, 0.037422, -0.121663,
      ]
    },
    {
      centers: [
      -0.545903, 0.181929, -0.822785,
      0.696919, -0.619361, -0.817905,
      ],
      rotations: [
      0.096217, -0.945302, 0.311685, -0.171076, -0.324183, -0.930397, 0.980549, 0.036198, -0.192910,
      0.038592, -0.999225, 0.007759, -0.116524, -0.012212, -0.993113, 0.992438, 0.037422, -0.116905,
      ]
    },
    {
      centers: [
      -0.541951, 0.181929, -0.825393,
      0.700833, -0.619361, -0.814554,
      ],
      rotations: [
      0.094721, -0.945302, 0.312143, -0.166612, -0.324183, -0.931207, 0.981463, 0.036198, -0.188205,
      0.038554, -0.999225, 0.007944, -0.111760, -0.012212, -0.993660, 0.992987, 0.037422, -0.112144,
      ]
    },
    {
      centers: [
      -0.538308, 0.181929, -0.827774,
      0.704416, -0.619361, -0.811457,
      ],
      rotations: [
      0.093345, -0.945302, 0.312557, -0.162506, -0.324183, -0.931932, 0.982283, 0.036198, -0.183878,
      0.038519, -0.999225, 0.008114, -0.107380, -0.012212, -0.994143, 0.993472, 0.037422, -0.107767,
      ]
    },
    {
      centers: [
      -0.535300, 0.181929, -0.829722,
      0.707357, -0.619361, -0.808895,
      ],
      rotations: [
      0.092210, -0.945302, 0.312894, -0.159123, -0.324183, -0.932516, 0.982943, 0.036198, -0.180312,
      0.038489, -0.999225, 0.008253, -0.103771, -0.012212, -0.994526, 0.993856, 0.037422, -0.104161,
      ]
    },
    {
      centers: [
      -0.533255, 0.181929, -0.831038,
      0.709346, -0.619361, -0.807151,
      ],
      rotations: [
      0.091439, -0.945302, 0.313120, -0.156826, -0.324183, -0.932905, 0.983384, 0.036198, -0.177891,
      0.038468, -0.999225, 0.008348, -0.101322, -0.012212, -0.994779, 0.994110, 0.037422, -0.101713,
      ]
    },
    {
      centers: [
      -0.532501, 0.181929, -0.831521,
      0.710079, -0.619361, -0.806507,
      ],
      rotations: [
      0.091155, -0.945302, 0.313203, -0.155980, -0.324183, -0.933046, 0.983545, 0.036198, -0.176998,
      0.038461, -0.999225, 0.008383, -0.100419, -0.012212, -0.994870, 0.994202, 0.037422, -0.100811,
      ]
    },
    {
      centers: [
      -0.533255, 0.181929, -0.831038,
      0.709346, -0.619361, -0.807151,
      ],
      rotations: [
      0.091439, -0.945302, 0.313120, -0.156826, -0.324183, -0.932905, 0.983384, 0.036198, -0.177891,
      0.038468, -0.999225, 0.008348, -0.101322, -0.012212, -0.994779, 0.994110, 0.037422, -0.101713,
      ]
    },
    {
      centers: [
      -0.535300, 0.181929, -0.829722,
      0.707357, -0.619361, -0.808895,
      ],
      rotations: [
      0.092210, -0.945302, 0.312894, -0.159123, -0.324183, -0.932516, 0.982943, 0.036198, -0.180312,
      0.038489, -0.999225, 0.008253, -0.103771, -0.012212, -0.994526, 0.993856, 0.037422, -0.104161,
      ]
    },
    {
      centers: [
      -0.538308, 0.181929, -0.827774,
      0.704416, -0.619361, -0.811457,
      ],
      rotations: [
      0.093345, -0.945302, 0.312557, -0.162506, -0.324183, -0.931932, 0.982283, 0.036198, -0.183878,
      0.038519, -0.999225, 0.008114, -0.107380, -0.012212, -0.994143, 0.993472, 0.037422, -0.107767,
      ]
    },
    {
      centers: [
      -0.541951, 0.181929, -0.825393,
      0.700833, -0.619361, -0.814554,
      ],
      rotations: [
      0.094721, -0.945302, 0.312143, -0.166612, -0.324183, -0.931207, 0.981463, 0.036198, -0.188205,
      0.038554, -0.999225, 0.007944, -0.111760, -0.012212, -0.993660, 0.992987, 0.037422, -0.112144,
      ]
    },
    {
      centers: [
      -0.545903, 0.181929, -0.822785,
      0.696919, -0.619361, -0.817905,
      ],
      rotations: [
      0.096217, -0.945302, 0.311685, -0.171076, -0.324183, -0.930397, 0.980549, 0.036198, -0.192910,
      0.038592, -0.999225, 0.007759, -0.116524, -0.012212, -0.993113, 0.992438, 0.037422, -0.116905,
      ]
    },
    {
      centers: [
      -0.549842, 0.181929, -0.820157,
      0.692989, -0.619361, -0.821238,
      ],
      rotations: [
      0.097711, -0.945302, 0.311220, -0.175535, -0.324183, -0.929566, 0.979612, 0.036198, -0.197610,
      0.038628, -0.999225, 0.007574, -0.121285, -0.012212, -0.992543, 0.991866, 0.037422, -0.121663,
      ]
    },
    {
      centers: [
      -0.553451, 0.181929, -0.817726,
      0.689363, -0.619361, -0.824284,
      ],
      rotations: [
      0.099081, -0.945302, 0.310786, -0.179630, -0.324183, -0.928783, 0.978732, 0.036198, -0.201925,
      0.038661, -0.999225, 0.007403, -0.125658, -0.012212, -0.991999, 0.991320, 0.037422, -0.126033,
      ]
    },
    {
      centers: [
      -0.556415, 0.181929, -0.815712,
      0.686367, -0.619361, -0.826780,
      ],
      rotations: [
      0.100208, -0.945302, 0.310425, -0.182999, -0.324183, -0.928125, 0.977993, 0.036198, -0.205475,
      0.038688, -0.999225, 0.007263, -0.129257, -0.012212, -0.991536, 0.990856, 0.037422, -0.129629,
      ]
    },
    {
      centers: [
      -0.558422, 0.181929, -0.814340,
      0.684329, -0.619361, -0.828468,
      ],
      rotations: [
      0.100972, -0.945302, 0.310177, -0.185284, -0.324183, -0.927672, 0.977484, 0.036198, -0.207883,
      0.038706, -0.999225, 0.007168, -0.131698, -0.012212, -0.991215, 0.990534, 0.037422, -0.132069,
      ]
    },
    {
      centers: [
      -0.559160, 0.181929, -0.813833,
      0.683577, -0.619361, -0.829088,
      ],
      rotations: [
      0.101254, -0.945302, 0.310085, -0.186126, -0.324183, -0.927503, 0.977295, 0.036198, -0.208770,
      0.038712, -0.999225, 0.007133, -0.132597, -0.012212, -0.991095, 0.990414, 0.037422, -0.132967,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / Idle) */
cachePoseSequence(flagIdleAnim);

var flagOnGroundAnim =
/* Begin pose exported from flagger.blend (flagArmature / FlagOnGround) */
{
  bone_count: 2,
  frame_count: 1,
  fps: 16.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      2.115338, -2.969760, -0.164363,
      1.373846, -3.196584, -0.070783,
      ],
      rotations: [
      -0.974207, 0.055329, 0.218770, -0.217882, 0.021685, -0.975735, -0.058731, -0.998233, -0.009071,
      -0.996013, -0.035881, -0.081676, 0.083466, -0.051602, -0.995174, 0.031493, -0.998023, 0.054391,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / FlagOnGround) */
cachePoseSequence(flagOnGroundAnim);

var flaggerCrossedAnim = 
/* Begin pose exported from flagger.blend (flaggerArmature / Cross) */
{
  bone_count: 12,
  frame_count: 1,
  fps: 16.000000,
  rest_centers: [
    -1.460000, 0.880000, 0.009999,
    1.460000, 0.880000, 0.009999,
    -0.560000, 0.880000, 0.010000,
    0.560000, 0.880000, 0.010000,
    3.610000, 0.880000, -1.170632,
    -0.000000, 1.215542, 0.007747,
    0.000000, -0.880241, 0.000000,
    -0.270000, -2.209999, -0.000001,
    0.270000, -2.210001, -0.000002,
    -0.270000, -0.880000, 0.000000,
    0.270000, -0.880000, -0.000000,
    0.000000, -0.202794, -0.000000,
  ],
  poses: [
    {
      centers: [
      -1.049728, 0.128719, -0.065792,
      0.853953, 0.030246, 0.048865,
      -0.560000, 0.880000, 0.010000,
      0.560000, 0.880000, 0.010000,
      0.639945, 1.403622, -1.030167,
      0.000000, 1.215542, 0.007747,
      0.000000, -0.880241, 0.000000,
      -0.358991, -2.183388, -0.249311,
      0.524700, -2.166378, -0.221951,
      -0.270000, -0.880000, 0.000000,
      0.270000, -0.880000, -0.000000,
      0.000000, -0.202794, -0.000000,
      ],
      rotations: [
      -0.341563, -0.041545, 0.938940, -0.795283, 0.545164, -0.265183, -0.500859, -0.837300, -0.219248,
      -0.261487, -0.087112, -0.961268, 0.952717, 0.136405, -0.271522, 0.154775, -0.986816, 0.047325,
      0.544142, 0.834756, 0.084213, -0.795283, 0.545164, -0.265182, -0.267272, 0.077324, 0.960514,
      0.326615, -0.944170, 0.043184, 0.912273, 0.302975, -0.275615, 0.247144, 0.129416, 0.960298,
      -0.828240, -0.558263, 0.048598, -0.069637, 0.016484, -0.997436, 0.556031, -0.829501, -0.052529,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000,
      0.997836, -0.063852, 0.015715, 0.065702, 0.977877, -0.198595, -0.002687, 0.199197, 0.979956,
      0.985434, 0.170023, 0.003443, -0.166549, 0.968997, -0.182500, -0.034366, 0.179269, 0.983200,
      0.997685, -0.068001, -0.000613, 0.066910, 0.979993, 0.187451, -0.012147, -0.187058, 0.982274,
      0.980943, 0.194295, -0.000406, -0.191504, 0.967201, 0.166879, 0.032816, -0.163621, 0.985977,
      1.000000, -0.000000, 0.000000, 0.000000, 1.000000, 0.000000, -0.000000, 0.000000, 1.000000,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flaggerArmature / Cross) */
cachePoseSequence(flaggerCrossedAnim);

var flagCrossedAnim = 
/* Begin pose exported from flagger.blend (flagArmature / Cross) */
{
  bone_count: 2,
  frame_count: 1,
  fps: 16.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      0.639945, 1.403622, -1.030167,
      0.553243, -0.069932, -1.056593,
      ],
      rotations: [
      -0.828239, -0.558263, 0.048598, -0.069637, 0.016484, -0.997436, 0.556031, -0.829501, -0.052529,
      -0.822263, -0.501552, -0.268939, 0.204968, 0.179861, -0.962101, 0.530916, -0.846224, -0.045091,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / Cross) */

var flagCrossedAnim2 = 
/* Begin pose exported from flagger.blend (flagArmature / Cross2) */
{
  bone_count: 2,
  frame_count: 1,
  fps: 16.000000,
  rest_centers: [
    3.610000, 0.880000, -1.170632,
    2.610000, 0.880000, 0.009998,
  ],
  poses: [
    {
      centers: [
      -0.022882, 1.502941, -1.582705,
      -0.624908, 0.234503, -1.126410,
      ],
      rotations: [
      0.238019, -0.522604, 0.818677, -0.685294, 0.506949, 0.522852, -0.688272, -0.685483, -0.237474,
      0.026838, -0.316047, 0.948364, -0.735856, 0.635885, 0.232736, -0.676606, -0.704105, -0.215499,
      ]
    },
  ],
}
/* End pose exported from flagger.blend (flagArmature / Cross2) */
cachePoseSequence(flagCrossedAnim);

// Booleans and Sound Array Variables
var setStartFlameLoop = false;
var startFlameSoundAdded = false;
var holeshotFlameSoundsAdded = false;
var finishFlameSoundAdded = false;
var finishFlameSound;
var finishWhistleSound;
var holeshotFlameSounds;
var startFlameSound = [];

/*
#################
FLAME COORDINATES
#################
*/
const startFlameCoords = [
  [128.438416, 9.000000, 497.612274],
  [137.961914, 9.000000, 506.996399],
  [153.301193, 9.000000, 522.226196],
  [162.861298, 9.000000, 531.605957],
  [168.705368, 9.000000, 537.329834],
  [178.207001, 9.000000, 546.702881],
  [203.094864, 9.000000, 571.254089],
  [193.566559, 9.000000, 561.846985]
];

const holeshotCoords = [
  [315.363922, 7.250000, 283.171173],
  [323.246948, 7.250000, 291.764801]
];

const finishFlameCoords = [
  [459.547089, 20.500000, 361.974976],
  [459.601410, 20.500000, 395.998230]
];

// Finish Flame Pyro Animation Variables
var triggerFinishFlames = false;
var secondsSinceFinishUpdate = 0;
var currentFinishFrame = 0;
// 3rd arg in first line of sequence file
var finishFramesDelay = 4;
var timeStartedFinishFlame;
var finishFlamesHidden = false;

// Start Shoot Flame Pyro Animation Variables
var triggerStartShootFlames = false;
var secondsSinceStartShootUpdate = 0;
var currentStartShootFrame = 0;
var startShootFramesDelay = 4;
var timeStartedStartFlame;
var startFlamesHidden = false;

// Holeshot Flame Pyro Animation Variables
var triggerHoleshotFlames = false;
var secondsSinceHoleshotUpdate = 0;
var currentHoleshotFrame = 0;
var holeshotFramesDelay = 4;
var timeStartedHoleshotFlame;
var holeshotFlamesHidden = false;

var maxFramesPyro = 69;

/*
####################
SET UP PYRO TEXTURES
####################
*/
var finishFlamesTexture = mx.read_texture("@os2022bgsxobj/js/pyro/finishflames.seq");
var finishFlamesV2Texture = mx.read_texture("@os2022bgsxobj/js/pyro/finishflames2.seq");
var holeshotFlamesTexture = mx.read_texture("@os2022bgsxobj/js/pyro/holeshotflames.seq");
var startFlamesTexture = mx.read_texture("@os2022bgsxobj/js/pyro/holeshotflames.seq");

var startFlameLoopIndices = {start:1,end:8};
var holeshotFlameIndices = {start:9,end:10};
var finishFlameIndices = {start:11,end:12};
var startShootFlameIndices = {start:13,end:20};

// hide flames on start until called upon
hideAllFlames();
var showLoopPyroVal = 0;
if (mainEvent) {showLoopPyroVal = 1}
// hides or shows start flames on start of race
for (var i = startFlameLoopIndices.start - 1; i < startFlameLoopIndices.end; i++) {
  mx.color_billboard(i, 1, 1, 1, showLoopPyroVal);
}

/* 
###################################
        SHOW/HIDE FLAMES
###################################
*/
function hideAllFlames() {
  toggleStartFlames(0);
  toggleHoleshotFlames(0);
  toggleFinishFlames(0); 
}

function toggleStartFlames(value) {
  for (var i = startShootFlameIndices.start - 1; i < startShootFlameIndices.end; i++) mx.color_billboard(i, 1, 1, 1, value);
  startFlamesHidden = false;
  if (value == 0) startFlamesHidden = true;
}

function toggleHoleshotFlames(value) {
  for (var i = holeshotFlameIndices.start - 1; i < holeshotFlameIndices.end; i++) mx.color_billboard(i, 1, 1, 1, value);
  holeshotFlamesHidden = false;
  if (value == 0) holeshotFlamesHidden = true;
}

function toggleFinishFlames(value) {
  for (var i = finishFlameIndices.start - 1; i < finishFlameIndices.end; i++) mx.color_billboard(i, 1, 1, 1, value);
  finishFlamesHidden = false;
  if (value == 0) finishFlamesHidden = true;
}

// The Function that actually does all the work
function doPyro() {
  if (!mainEvent) return;
  doStartPyro();
  doHoleshotPyro();
  doFinishPyro();
}

function doStartPyro() {
  if (triggerStartShootFlames) {
    // if we go backwards in the demo and we are before the trigger of the flames we want to hide them
    if (mx.seconds - timeStartedStartFlame < 0) toggleStartFlames(0);
  
    if (mx.seconds - secondsSinceStartShootUpdate < startShootFramesDelay / 128) return;

    if (startFlamesHidden) toggleStartFlames(1);

    secondsSinceStartShootUpdate = mx.seconds;

    if (currentStartShootFrame <= maxFramesPyro) {
      mx.begin_custom_frame(startFlamesTexture);
      mx.paste_custom_frame(startFlamesTexture, currentStartShootFrame, 0, 0, 0, 0, 1, 1);
      mx.end_custom_frame(startFlamesTexture);
      currentStartShootFrame++;
    } else {
      triggerStartShootFlames = false;
      toggleStartFlames(0);
    }
  }
}

function doHoleshotPyro() {
  if (triggerHoleshotFlames) {
    // if we go backwards in the demo and we are before the trigger of the flames we want to hide them
    if (mx.seconds - timeStartedHoleshotFlame < 0) toggleHoleshotFlames(0);

    if (mx.seconds - secondsSinceHoleshotUpdate < holeshotFramesDelay / 128) return;

    if (holeshotFlamesHidden) toggleHoleshotFlames(1);

    secondsSinceHoleshotUpdate = mx.seconds;
    
    if (currentHoleshotFrame <= maxFramesPyro) {
      mx.begin_custom_frame(holeshotFlamesTexture);
      mx.paste_custom_frame(holeshotFlamesTexture, currentHoleshotFrame, 0, 0, 0, 0, 1, 1);
      mx.end_custom_frame(holeshotFlamesTexture);
      currentHoleshotFrame++;
    }
    else {
      triggerHoleshotFlames = false;
      toggleHoleshotFlames(0);
    }  
  }
}

function doFinishPyro() {
  if (triggerFinishFlames) {
    // if we go backwards in the demo and we are before the trigger of the flames we want to hide them
    if (mx.seconds - timeStartedFinishFlame < 0) toggleFinishFlames(0);

    if (mx.seconds - secondsSinceFinishUpdate < finishFramesDelay / 128) return;

    if (finishFlamesHidden) toggleFinishFlames(1);

    secondsSinceFinishUpdate = mx.seconds;

    if (currentFinishFrame <= maxFramesPyro) {
      mx.begin_custom_frame(finishFlamesTexture);
      mx.begin_custom_frame(finishFlamesV2Texture);
      mx.paste_custom_frame(finishFlamesTexture, currentFinishFrame, 0, 0, 0, 0, 1, 1);
      mx.paste_custom_frame(finishFlamesV2Texture, currentFinishFrame, 0, 0, 0, 0, 1, 1);
      mx.end_custom_frame(finishFlamesTexture);
      mx.end_custom_frame(finishFlamesV2Texture);
      currentFinishFrame++;
    } else {
      triggerFinishFlames = false;
      toggleFinishFlames(0);
    }   
  }
}

function triggerFinishFlameSound() {
  if (!finishFlameSoundAdded) {
    finishFlameSound = [];
    finishWhistleSound = [];
    for (var i = 0; i < finishFlameCoords.length; i++) {
      finishFlameSound[i] = mx.add_sound("@os2022bgsxobj/sounds/pyro/finishlineflame.raw");
      finishWhistleSound[i] = mx.add_sound("@os2022bgsxobj/sounds/pyro/finishlinewhistle.raw");
      mx.set_sound_freq(finishFlameSound[i], 44100);
      mx.set_sound_freq(finishWhistleSound[i], 44100);
      mx.set_sound_vol(finishFlameSound[i], 0.5);
      mx.set_sound_vol(finishWhistleSound[i], 2);
      mx.set_sound_pos(finishFlameSound[i], finishFlameCoords[i][0], finishFlameCoords[i][1], finishFlameCoords[i][2]);
      mx.set_sound_pos(finishWhistleSound[i], finishFlameCoords[i][0], finishFlameCoords[i][1], finishFlameCoords[i][2]);
    }
    finishFlameSoundAdded = true;
  }
  for (var i = 0; i < finishFlameSound.length; i++)
    mx.start_sound(finishFlameSound[i]);

  return;
}

function triggerholeshotFlameSounds() {
    if (!holeshotFlameSoundsAdded) {
      holeshotFlameSounds = [];
      for (var i = 0; i < holeshotCoords.length; i++) {
        holeshotFlameSounds[i] = mx.add_sound("@os2022bgsxobj/sounds/pyro/holeshotflame.raw");
        mx.set_sound_freq(holeshotFlameSounds[i], 44100);
        mx.set_sound_vol(holeshotFlameSounds[i], 2);
        mx.set_sound_pos(holeshotFlameSounds[i], holeshotCoords[i][0], holeshotCoords[i][1], holeshotCoords[i][2]);
      }
      holeshotFlameSoundsAdded = true;
    }

  for (var i = 0; i < holeshotFlameSounds.length; i++) mx.start_sound(holeshotFlameSounds[i]);
  
}

function triggerStartFlameSound(status) {
  if (status == "dropped") {
    if (startFlameSound != null){
      for (var i = 0; i < startFlameSound.length; i++){
        if (startFlameSound[i] != null){
          mx.stop_sound(startFlameSound[i]);
          mx.set_sound_loop(startFlameSound[i], 0);
          mx.set_sound_vol(startFlameSound[i], 20);
          mx.start_sound(startFlameSound[i]);
          setStartFlameLoop = false;
        }
      }
    }
    // hide start loop pyro
    for (var i = startFlameLoopIndices.start - 1; i < startFlameLoopIndices.end; i++) mx.color_billboard(i, 1, 1, 1, 0);
    // Show start shoot pyro
    for (var i = startShootFlameIndices.start - 1; i < startShootFlameIndices.end; i++) mx.color_billboard(i, 1, 1, 1, 1);
  }
  else if (status == "notdropped") {
    // hide start shoot pyro
    for (var i = startShootFlameIndices.start - 1; i < startShootFlameIndices.end; i++) mx.color_billboard(i, 1, 1, 1, 0);
    // show start loop pyro
    for (var i = startFlameLoopIndices.start - 1; i < startFlameLoopIndices.end; i++) mx.color_billboard(i, 1, 1, 1, 1);
  
    if (!startFlameSoundAdded) {
        startFlameSound = [];
        for (var i = 0; i < startFlameCoords.length; i++) {
          startFlameSound[i] = mx.add_sound("@os2022bgsxobj/sounds/pyro/startflameburst.raw");
          mx.set_sound_freq(startFlameSound[i], 44100);
          mx.set_sound_vol(startFlameSound[i], 0.5);
          mx.set_sound_pos(startFlameSound[i], startFlameCoords[i][0], startFlameCoords[i][1], startFlameCoords[i][2]);
          startFlameSoundAdded = true;
        }
    }
    if (!setStartFlameLoop) {
        for (var i = 0; i < startFlameSound.length; i++) {
          mx.stop_sound(startFlameSound[i]);
          mx.set_sound_loop(startFlameSound[i], 1);
          mx.set_sound_vol(startFlameSound[i], 0.5);
          mx.start_sound(startFlameSound[i]);
        }
        setStartFlameLoop = true;
    }
  }
}

function triggerFireworkSounds() {
  for (var i = 0; i < finishWhistleSound.length; i++) mx.start_sound(finishWhistleSound[i]);
}

function triggerAllFlameSounds() {
  triggerCrowdRoar(0.8);
  triggerAllPyro();
}

function triggerCrowdRoar(volume) {
  var randNumber;
  if (!stadium) {
    // Stop all sounds
    for (var i = 0; i < numOfBleachers; i++) {
      for (var j = 0; j < numOfRoarVariants; j++) {
        mx.stop_sound(crowdRoars[i][j]);
      }
    }
    for (var i = 0; i < numOfBleachers; i++) {
      randNumber = randomIntFromInterval(0, (numOfRoarVariants - 1));
      mx.set_sound_vol(crowdRoars[i][randNumber], volume);
      mx.start_sound(crowdRoars[i][randNumber]);
    }
  } else {
    // stop sounds
    for (var i = 0; i < numOfBleachers; i++) {
      mx.stop_sound(crowdRoars[i]);
    }
    randNumber = randomIntFromInterval(0, numOfBleachers - 1);
    mx.set_sound_vol(crowdRoars[randNumber], volume);
    mx.start_sound(crowdRoars[randNumber]);
  }
}

function triggerAllPyro() {
  triggerStartShootPyro();
  triggerFinishPyro();
  triggerHoleshotPyro();
}

function triggerStartShootPyro() {
  currentStartShootFrame = 0;
  secondsSinceStartShootUpdate = 0;
  triggerStartShootFlames = true;
  timeStartedStartFlame = mx.seconds;
  triggerStartFlameSound("dropped");
}

function triggerHoleshotPyro() {
  currentHoleshotFrame = 0;
  secondsSinceHoleshotUpdate = 0;
  triggerHoleshotFlames = true;
  timeStartedHoleshotFlame = mx.seconds;
  triggerholeshotFlameSounds();
}

function triggerFinishPyro() {
  currentFinishFrame = 0;
  secondsSinceFinishUpdate = 0;
  triggerFinishFlames = true;
  timeStartedFinishFlame = mx.seconds;
  triggerFinishFlameSound();
}

/*
################################################
dynamic crowd for position changes/battles
################################################
*/
// this number is the number of people that the crowd
// will cheer if there is a battle, in this case they will cheer if there is a battle
// within the top 3
var numOfPeopleToCheer = 3;
const timingGateToStartBattles = 16;
var startedBattleFunction = false;

// Index 0 is gap between 1st and 2nd, Index 1 is gap between 2nd and 3rd, etc.
var gapsBetweenRidersArr = [];
var resetCrowdDefaultVol = true;
const maxGapBetweenRiders = 2;
const maxCrowdVol = (((4 * numOfPeopleToCheer) + numOfBleachers)) + (2 * crowdConstantBaseVol);
var currentVolume = 0;
const volFadeTime = 2;
const volResetFadeTime = 5;
var gotTimeStartReset = false;
var timeStartedIncreaseOrDecrease;
var currentCrowdVol = crowdConstantBaseVol;
var setHolder = false;
var setResetHolder = false;
var volHolder;
var resetHolder;
var volDivisor = 1;
function battlesFunction() {

  var r = globalRunningOrder;
  var seconds = mx.seconds;
  var battleBetweenRiders = false;
  var i, currentRiderTimingGate, currentRiderSlot;
  if (r[0].position == timingGateToStartBattles + 1 && !startedBattleFunction) {
    ResetSlotPositionHolder();
    numOfPeopleToCheer++;
    if (r.length < numOfPeopleToCheer) {
      numOfPeopleToCheer = globalRunningOrder.length;
    }

    if (!mainEvent) {
      volDivisor = 2;
    }
    startedBattleFunction = true;
  }

  if (r[0].position < timingGateToStartBattles + 1 && startedBattleFunction) {
    startedBattleFunction = false;
    gotTimeStartReset = false;
    setResetHolder = false;
    resetCrowdVolume();
  }

  if (startedBattleFunction) {
    // checks for a position change
    for (var i = 0; i < numOfPeopleToCheer - 1; i++) {
      currentRiderSlot = r[i].slot;
      currentRiderTimingGate = r[i].position;
      if (currentRiderTimingGate != currentTimingGates[currentRiderSlot]) {
        // if there was a position change, crowd cheers
        if (checkPosChange(currentRiderSlot, i)) {
          var volFactor;

          if (mx.get_rider_down(r[i + 1].slot) == 1) {
            volFactor = (i + 1) * 2;
          } else {
            volFactor = i + 1;
          }
          
          var volume = ((2 / (volFactor)) / volDivisor);
          startRoar(volume);
        }
      }
    }
    // Get gaps between riders and store in gapsBetweenRidersArr array
    for (i = numOfPeopleToCheer - 1; i > 0; i--) {
      currentRiderSlot = r[i].slot;
      currentRiderTimingGate = r[i].position - 1;
      if (currentRiderTimingGate + 1 != currentTimingGates[currentRiderSlot]) {
        var nextRiderSlot = r[i-1].slot;
        // time the rider ahead hit the gate that the rider is currently at
        var timeRiderAheadGate = mx.get_timing(nextRiderSlot, currentRiderTimingGate);

        // if a rider missed a gate, skip iteration
        if (timeRiderAheadGate < 0) continue;

        // current rider hits current gate at current time, therefore
        gapsBetweenRidersArr[i-1] = seconds - timeRiderAheadGate;
      }
    }
    // Get lowest gap
    // if priority battle is 0, there's a battle between 1st and 2nd, if 1, 2nd and 3rd, etc.
    if (gapsBetweenRidersArr.length > 0) {
      var priorityBattle = 0;
      var lowestGap = gapsBetweenRidersArr[0];
      var numOfBattles = 0;

      if (gapsBetweenRidersArr.length > 1) {
        for (var i = 1; i < gapsBetweenRidersArr.length; i++) {
          if (gapsBetweenRidersArr[i] < lowestGap){
            lowestGap = gapsBetweenRidersArr[i];
            priorityBattle = i;
          }
          if (gapsBetweenRidersArr.length > priorityBattle + 2) {
            // number of battles for the same pos
            if (gapsBetweenRidersArr[priorityBattle + 2] - gapsBetweenRidersArr[priorityBattle] <= maxGapBetweenRiders)
              numOfBattles++;
          }
        }
      }
      if (lowestGap <= maxGapBetweenRiders) battleBetweenRiders = true;

      // if someone in the priority battle goes down, check for other battles then set the priority battle and lowest gap
      if (mx.get_rider_down(r[priorityBattle + 1].slot) == 1 || mx.get_rider_down(r[priorityBattle].slot) == 1) {
        if (gapsBetweenRidersArr.length > 1) {
          var secondLowestGap = undefinedTime;
          for (var i = 0; i < gapsBetweenRidersArr.length; i++) {
            if (i == priorityBattle) continue;
            if (gapsBetweenRidersArr[i] < secondLowestGap) {
              secondLowestGap = gapsBetweenRidersArr[i];
              lowestGap = secondLowestGap;
              priorityBattle = i;
            }
          }
          // no other battles
          if (lowestGap > maxGapBetweenRiders) {
            battleBetweenRiders = false;
          }
        }
        // no other battles
        else battleBetweenRiders = false;
      }
    }
    // If there's a battle, set the volume of the crowd constant based on the gap and position
    if (battleBetweenRiders) {
      setCrowdVolume(numOfBattles, lowestGap, priorityBattle);
    }
    else if (!resetCrowdDefaultVol) {
      resetCrowdVolume();
    }
  }
}

function setCrowdVolume(numOfBattles, lowestGap, priorityBattle) {
  var volume = (((((3 * numOfBattles) + numOfBleachers) / ((lowestGap + 0.9) * (priorityBattle + 1))) + (1.5 * crowdConstantBaseVol)) / volDivisor);
  var seconds = mx.seconds;
  // If crowd has already reached desired calculated volume, return
  if (currentCrowdVol == volume) return;

  if (currentCrowdVol < crowdConstantBaseVol) {
    currentCrowdVol = crowdConstantBaseVol;
  }

  // If volume is new, need to fade to new volume, get the time starting the increase/decrease
  if (volume != currentVolume) {
    timeStartedIncreaseOrDecrease = seconds;
    setHolder = false;
  }
  // volume holder
  currentVolume = volume;

  // Another holder that holds the current crowd volume at the start of the fade
  if (!setHolder) {
    volHolder = currentCrowdVol;
    setHolder = true;
    // sets reset values to false because this means that there is a battle fade going on
    gotTimeStartReset = false;
    setResetHolder = false;
    resetCrowdDefaultVol = false;
  }

  // vol/sec calculated by (end vol - start vol) / fade time
  var volPerSec = (currentVolume - volHolder) / volFadeTime;
  // t is time in seconds since the start of the fade
  var t = seconds - timeStartedIncreaseOrDecrease;
  // current crowd volume is the start vol + (vol/sec * time since start of fade)
  // If there's an increase, vol/sec * t will be positive.  If there's a decrease, vol/sec * t will be negative. 
  currentCrowdVol = volHolder + (volPerSec * t);

  for (var i = 0; i < numOfBleachers; i++) {
    mx.set_sound_vol(crowdConstants[i], currentCrowdVol);
  }
}

function resetCrowdVolume() {
  var seconds = mx.seconds;
  if (!gotTimeStartReset) {
    timeStartedIncreaseOrDecrease = seconds;
    gotTimeStartReset = true;
  }
  // sets the start fade vol to the current crowd volume
  if (!setResetHolder) {
    resetHolder = currentCrowdVol;
    setResetHolder = true;
  }

  // vol/sec, t, and current crowd vol calculated just like above when battle fades happen
  var volPerSec = (crowdConstantBaseVol - resetHolder) / volResetFadeTime;
  var t = seconds - timeStartedIncreaseOrDecrease;
  currentCrowdVol = resetHolder + (volPerSec * t);

  // if in the demo and crowd volume somehow exceeds the max crowd vol or is less than the base, reset to the base vol
  if (currentCrowdVol > maxCrowdVol || currentCrowdVol < crowdConstantBaseVol) {
    currentCrowdVol = crowdConstantBaseVol;
  }

  // set all crowd constant sounds to the current crowd volume calculated 
  for (var i = 0; i < numOfBleachers; i++) {
    mx.set_sound_vol(crowdConstants[i], currentCrowdVol);
  }

  // if crowd volume equals the base volume, the volume has been reset
  if (currentCrowdVol <= crowdConstantBaseVol) {
    // set the crowd volume to the base just in case of skipping for demos
    for (var i = 0; i < numOfBleachers; i++) {
      mx.set_sound_vol(crowdConstants[i], crowdConstantBaseVol);
    }
    resetCrowdDefaultVol = true;
  }
}

function startRoar(volume) {
  var randomNum = randomIntFromInterval(0, numOfCheerVariants - 1);;
  if (!stadium) {
    for (var i = 0; i < numOfBleachers; i++) {
      mx.set_sound_vol(allCheerSounds[randomNum][i], volume);
      mx.start_sound(allCheerSounds[randomNum][i]);
    }
    return;
  }

  mx.set_sound_vol(allCheerSounds[randomNum], volume);
  mx.start_sound(allCheerSounds[randomNum]);
}/*
################################################################################
## Gate Sounds
##
################################################################################
*/
var gateDropTime = -1;
var gateSoundPositions = [
  [149, 0, 517],
  [166, 0, 534],
  [183, 0, 551]
];
  
var gateSounds = [];
var gateDropped = false;
  
for (var i = 0; i < gateSoundPositions.length; i++) {
    gateSounds[i] = mx.add_sound("@os2022bgsxobj/sounds/gate/gatedrop.raw");
    mx.set_sound_freq(gateSounds[i], 44100);
    mx.set_sound_vol(gateSounds[i], 0.5);
    mx.set_sound_pos(gateSounds[i], gateSoundPositions[i][0], gateSoundPositions[i][1], gateSoundPositions[i][2]);
}

function gateSound() {
  if (!gateDropped && gateDropTime < 0) {
    gateDropTime = mx.get_gate_drop_time();
  }

  if (gateDropTime > 0 && !gateDropped && mx.seconds >= gateDropTime) {
    for (var i = 0; i < gateSounds.length; i++) 
      mx.start_sound(gateSounds[i]);
    
    gateDropped = true;

    if (mainEvent) {
      triggerAllFlameSounds();
    }
  }

  if (gateDropped && mx.seconds < gateDropTime) {
    gateDropped = false;
    hiddenFlames = false;
  }
  
  if (mainEvent && !gateDropped && mx.seconds > 0) {
    triggerStartFlameSound("notdropped");
    hideAllFlames();
  }
}

// this variable is for determining if someone is going backwards in the demo
var backwards = false;
var holeshot = false;
var holeshotRiderSlot;
const holeshotGate = 2;

function determineHoleshot(){ 
  var r = globalRunningOrder;
  // this first if is for optimization so the rest isn't called after first is 2 gates away from the holeshot
  if (r[0].position <= (holeshotGate + 3)){ 
    if (r[0].position == (holeshotGate + 1) && !backwards) {
      if (!holeshot){
        holeshotRiderSlot = r[0].slot;
        holeshot = true;
        if (mainEvent) {
          triggerHoleshotPyro();
        }
      }
    }
    else {
      // for demos going backwards in time
      if (r[0].position >= (holeshotGate + 1)) backwards = true;
      else backwards = false;
      holeshot = false;
    }
  }
}

// Make name comparison at the finish to determine if the rider should be booed or not when they win
function makeNameComparisonFinish(slot) {
    var randNumber;
    if (!stadium) {
        if (slotsToBoo.indexOf(slot) != -1) {
            for (var i = 0; i < numOfBleachers; i++) {
                  randNumber = randomIntFromInterval(0, (allBooSounds.length - 1));
                  mx.set_sound_vol(allBooSounds[randNumber][i], booSoundVol);
                  mx.start_sound(allBooSounds[randNumber][i]);
            }
            return;
        }
        
        for (var i = 0; i < numOfBleachers; i++) {
          randNumber = randomIntFromInterval(0, (allCheerSounds.length - 1));
          mx.set_sound_vol(allCheerSounds[randNumber][i], cheerSoundVol);
          mx.start_sound(allCheerSounds[randNumber][i]);
        }
        return;
    }

    if (slotsToBoo.indexOf(slot) != -1) {
        randNumber = randomIntFromInterval(0, allBooSounds.length - 1);
        mx.set_sound_vol(allBooSounds[randNumber], booSoundVol);
        mx.start_sound(allBooSounds[randNumber]);
        return;
    }

    randNumber = randomIntFromInterval(0, allCheerSounds.length - 1);
    mx.set_sound_vol(allCheerSounds[randNumber], cheerSoundVol);
    mx.start_sound(allCheerSounds[randNumber]);

  }
  
var playFinishSoundAndFlame = false;
function lapsRemainingString(l) {
  if (l == 0) {
      if (racingEvent) {
          if (!playFinishSoundAndFlame) {
              if (mainEvent) {
                  triggerAllFlameSounds();
                  triggerFireworkSounds();
                  makeNameComparisonFinish(globalRunningOrder[0].slot);
              }
              // someone wins a heat or lcq
              else triggerCrowdRoar(0.4);
              playFinishSoundAndFlame = true;
          }
      }
      return "Finish";
  }
  if (l == 1) {
      if (mainEvent && playFinishSoundAndFlame) {
          playFinishSoundAndFlame = false;
      }
      return "Final Lap";
  }
  return l.toFixed(0) + " Laps"
}

function timeOrLapsRemaining() {
    var t, l;
  
    if (globalFinishTime == 0) {
        return lapsRemainingString(globalFinishLaps - mx.index_to_lap(globalRunningOrder[0].position));
    }
        
    t = timeRemaining();
  
    if (t == 0) {
        l = lapsRemaining();
        if (l <= globalFinishLaps)
           return lapsRemainingString(l);
    }
  
    return timeToString(t, false);
}
  
function lapsRemaining() {
    var final_lap = lapsBeforeTime(globalFinishTime) + 1 + globalFinishLaps;
    return final_lap - mx.index_to_lap(globalRunningOrder[0].position);
}
  
function lapsBeforeTime(seconds) {
    var r, i, last, t;

    if (seconds == 0)
       return 0;

    seconds += mx.get_gate_drop_time();

    r = globalRunningOrder;

    last = mx.index_to_lap(r[0].position);

    /* search backwards to find leader's last lap before time expired */
    for (i = last; i > 0; i--) {
        t = mx.get_timing(r[0].slot, mx.lap_to_index(i));
        if (t < seconds)
            break;
    }

    /* search entire field forwards to find last lap before time expired */
    for (; i <= last; i++) {
        if (!indexReachedBefore(mx.lap_to_index(i), seconds))
            break;
    }

    return i - 1;
  }
  
function timeRemaining() {
    var drop = mx.get_gate_drop_time();
    var secs = mx.seconds - drop;

    if (drop < 0 || secs < 0)
       return globalFinishTime;

    return Math.max(0.0, globalFinishTime - secs);
}
  
function indexReachedBefore(index, seconds) {
    var i, r, t;
  
    r = globalRunningOrder;
  
    for (i = 0; i < r.length; i++) {
        t = mx.get_timing(r[i].slot, index);
        if (t >= 0 && t < seconds)
            return true;
    }
  
    return false;
}

function breakTime(t, full) {
   var min, sec, ms;

   ms = Math.floor(t * 1000.0);
   sec = Math.floor(ms / 1000);
   
   if (!full) {
    sec = Math.ceil(t);
   }

   min = Math.floor(sec / 60);

   ms -= sec * 1000;
   sec -= min * 60;

   return { min: min, sec: sec, ms: ms };
}

function leftFillString(s, pad, n) {
    n -= s.length;

    while (n > 0) {
        if (n & 1)
        s = pad + s;

        n >>= 1;
        pad += pad;
    }

   return s;
}

// converts raw seconds to formatted time
function timeToString(t, full) {
   var s;

   t = breakTime(t, full);

   s = leftFillString(t.min.toString(), " ", 0) + ":";
   s += leftFillString(t.sec.toString(), "0", 2);
   if (full) {
    s += "." + leftFillString(t.ms.toString(), "0", 3);
   }

   return s;
}

/*
########################################
get, sort, and display laptimes function
########################################
*/
var bestPlayerLaptimes = [];
var allPlayerLaptimes = [];
var currentPlayerLaps = [];
var invalidLaptimes = [];
var invalidLapNumbers = [];
var gotRunningOrder = false;
var displayLeadLap = false;
var debugLaps = true;
var displayedInvalidLaps = false;

function displayLaptimes() {
	var r, slot, timingGate;

  r = globalRunningOrder;

	if (!gotRunningOrder && mx.seconds >= 0) {
		// sets an unchanging running order for storing unchanging element positions
		for (var i = 0; i < r.length; i++) {
			// best laps set to undefined time for every rider at the start of the session
			bestPlayerLaptimes[r[i].slot] = [undefinedTime, r[i].slot];
      allPlayerLaptimes[r[i].slot] = [undefinedTime];
      invalidLaptimes[r[i].slot] = [];
      invalidLapNumbers[r[i].slot] = [];
      currentPlayerLaps[r[i].slot] = 0;
		}
		// update screen on start
		if (!racingEvent) {
      updateScreen();
    }
      
		gotRunningOrder = true;
	}

	for (var i = 0; i < r.length; i++) {
	  // initialize rider names array
	  slot = r[i].slot;
	  timingGate = r[i].position;

    var lapNumber = mx.index_to_lap(timingGate);
    
    // If going back in a demo and lap number is less than the set lap number, reset their best lap
    if (lapNumber < currentPlayerLaps[slot]) {
      currentPlayerLaps[slot] = lapNumber;
      if (allPlayerLaptimes[slot].length == 1) {
        allPlayerLaptimes[slot] = [undefinedTime];
        bestPlayerLaptimes[slot][0] = undefinedTime;
        updateScreen();
        continue;
      }
      
      
      allPlayerLaptimes[slot].pop();
      var laps = allPlayerLaptimes[slot].slice();
      var prevBest = laps.sort(function(a, b) {return a - b;});
      var index = 0;
      var validLap = false;
      for (var i = 0; !validLap; i++) {
        if (i == allPlayerLaptimes[slot].length) {
          prevBest[0] = undefinedTime;
          index = 0;
          break;
        }

        var allPlayerLapIndex = allPlayerLaptimes[slot].indexOf(prevBest[i]);
        var invalidLapIndex = invalidLapNumbers[slot].indexOf(allPlayerLapIndex + 1);

        if (invalidLapIndex === -1) {
          validLap = true;
          index = i;
        }
      }

      if (prevBest[index] != bestPlayerLaptimes[slot][0]) {
        bestPlayerLaptimes[slot][0] = prevBest[index];
        updateScreen();
      }
    }

    // new lap
	  if (lapNumber > currentPlayerLaps[slot]) {
      if (timingGate == firstLapLength) {
        currentPlayerLaps[slot] = lapNumber;
        continue;
      }

      // For time trial catching
      if (r.length > allPlayerLaptimes.length) {
        for (i = allPlayerLaptimes.length - 1; i < r.length; i++) {
          bestPlayerLaptimes[i] = [undefinedTime, slot];
          allPlayerLaptimes[i] = [undefinedTime];
          invalidLaptimes[i] = [];
          invalidLapNumbers[i] = [];
        }
      }

      // client tabbed out during someone crossing the finish line catch up all previous laps then process the current lap
      var difference = lapNumber - currentPlayerLaps[slot] - 1;
      if (difference > 0) {
        catchUpLaps(slot, difference);
      }

      var laptime = getLaptime(slot, timingGate);
      
      currentPlayerLaps[slot] = lapNumber;
      //mx.message("currentPlayerLaps[" + mx.get_rider_name(slot) + "]: " + lapNumber.toString());
      laptimeProcessing(laptime, lapNumber, slot);
      
	  }

    // client tabbed out during and other players did laptimes when client was tabbed out
    var difference = lapNumber - currentPlayerLaps[slot];
    if (difference > 0) {
      catchUpLaps(slot, difference);
    }
  }

  // display invalid laps if everyone finished
  if (!racingEvent && everyRiderFinished && !displayedInvalidLaps) {
    displayInvalidLaptimes();
    displayedInvalidLaps = true;
  }
}

function displayInvalidLaptimes() {
  var printedHeader = false;
  var ridersWithInvalidLaps = 0;
  var output;
  for (var slot = 0; slot < invalidLaptimes.length; slot++) {
    // if we have undefined slot, continue
    if (invalidLaptimes[slot] == undefined) continue;

    // if we have an empty array, where the rider had no invalid laps, continue to next rider
    var riderInvalidLapsArrLen = invalidLaptimes[slot].length;
    if (riderInvalidLapsArrLen == 0) continue;

    
    invalidLaptimes[slot].sort(function(a, b){return a-b});
    var bestRiderLap = bestPlayerLaptimes[slot][0];

    // If their best invalid lap was slower than a lap that counted, continue to next rider
    if (invalidLaptimes[slot][0] > bestRiderLap) continue;
    
    // Increment the number of riders with invalid laps
    ridersWithInvalidLaps++;

    // Print the header of invalid laps if we have at least one person with an invalid laptime
    if (!printedHeader) {
      printHeader("\x1b[31m", "Invalid Laptimes:", 22, true);
      printedHeader = true;
    }
    var riderName = mx.get_rider_name(slot);

    // Add the first invalid lap to the output
    output = riderName + " - (\x1b[31m" + timeToString(invalidLaptimes[slot][0], true);

    // Add out any other invalid laps to the output
    for (var i = 1; i < riderInvalidLapsArrLen; i++) {
      // if we are at a lap that's 1.5 seconds slower than the faster than the slowest lap or it's slower than their best counted, exit loop
      if (invalidLaptimes[slot][i] > invalidLaptimes[slot][0] + 1.5 || invalidLaptimes[slot][i] > bestRiderLap) break;
      output += "\x1b[0m, \x1b[31m" + timeToString(invalidLaptimes[slot][i], true);
    }

    // Finish the output by closing parenthesis and send the message in chat
    output += "\x1b[0m)";
    mx.message(output);
  }

  if (ridersWithInvalidLaps > 0) mx.message("");

}

function isFastestLap(laptime) {

  var bestPlayerLapsSrtd = bestPlayerLaptimes.slice();
  bestPlayerLapsSrtd.sort(function (a, b){return a[0] - b[0];});
  var bestLap = bestPlayerLapsSrtd[0][0];
  if (bestLap == laptime) return true;

  return false;
}

// Calculates the lap time and returns an array with the laptime and a boolean that will determine if the lap was valid or not
function getLaptime(slot, currentGate) {
  var endGate = currentGate - 1;
  var startGate = endGate - normalLapLength;
  var isLapGood = true;
  // If the rider missed a timing gate between the lap, don't count it
  for (var i = startGate + 1; i < endGate; i++) {
    if (mx.get_timing(slot, i) < 0) {
      isLapGood = false;
      break;
    }
  }
  var startLapTime = mx.get_timing(slot, startGate);
  var finishLapTime = mx.get_timing(slot, endGate);
  return [finishLapTime - startLapTime, isLapGood];
}

// Catches up laptimes for when someone was either tabbed out or joined the server mid-session
function catchUpLaps(slot, difference) {

  for (var i = 0; i < difference; i++) {
    if (currentPlayerLaps[slot] == 0) continue;
    var startGate = mx.lap_to_index(i + currentPlayerLaps[slot]);
    var endGate = startGate + normalLapLength;
    
    var isLapGood = true;
    for (var j = startGate + 1; j < endGate; j++) {
      if (mx.get_timing(slot, j) < 0) {
        isLapGood = false;
        break;
      }
    }
    
    var startLapTime = mx.get_timing(slot, startGate);
    var finishLapTime = mx.get_timing(slot, endGate);
    var laptime = [finishLapTime - startLapTime, isLapGood];

    laptimeProcessing(laptime, (i + currentPlayerLaps[slot] + 1), slot);

  }

  currentPlayerLaps[slot] += difference;
}

function laptimeProcessing(laptime, lapNumber, slot) {

  // Lap 2 is the first lap that counts, so take the lap number and subtract 2 to get the index
  allPlayerLaptimes[slot][lapNumber - 2] = laptime[0];
  var newPB = false;
	// check to see if lap is faster
	if (bestPlayerLaptimes[slot][0] > laptime[0]) {
    newPB = true;
  }

  // If the rider missed a timing gate and it's there best, don't count the lap as a pb
  if (laptime[1] == false) {
    if (newPB) newPB = false;
    // If this rider has already had this invalid lap number and laptime added, return and don't add
    if (invalidLapNumbers[slot].indexOf(lapNumber - 1) > -1) return;
    // These two arrays have the same length
    invalidLaptimes[slot].push(laptime[0]);
    invalidLapNumbers[slot].push(lapNumber - 1);
  }

  if (newPB) {

    bestPlayerLaptimes[slot][0] = laptime[0];
    var riderName = mx.get_rider_name(slot); 
	  // update screen
	  if (!racingEvent) {
      try {
        updateScreen();
      } catch (e) {
        mx.message("error updating screen:" + e);
      }
      // For time trial catching
      if (riderName == "") {
        riderName = "Ghost Rider";
      }
      // Display person ran best lap of the session
      if (isFastestLap(laptime[0])) {
        mx.message("\x1b[32m" + riderName + '\x1b[0m runs fastest lap of the session: \x1b[32m' + timeToString(laptime[0], true));
      }
    }
  }
}
/* 
timing gate at which to activate mechanic sounds
assuming gates are ordered numerically and zero indexed.
ex. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, etc.
*/
const mechanicGate = 43;

/* this is the number of times the rider needs pass the mechanic gate above
before activating mechanics. Ex. 1 means the first time the rider passes the mechanic gate*/
const lapToActivateMechanics = 1;

// If you want songs enabled on the speakers
const songsEnabled = false;
  
/* This is for boos/cheers on the track, list them in the same order of where the bleacher sound positions are*/
const gatesToCheerOrBoo = [15,16,18,19,30,31,40,41,42];

var crowdConstants;
var crowdRoars = [];
const crowdRoarDirectories = [
  "@os2022bgsxobj/sounds/cheers/cheer1.raw",
  "@os2022bgsxobj/sounds/cheers/cheer3.raw",
  "@os2022bgsxobj/sounds/cheers/cheer4.raw",
  "@os2022bgsxobj/sounds/cheers/roar1.raw",
  "@os2022bgsxobj/sounds/cheers/roar2.raw",
  "@os2022bgsxobj/sounds/cheers/horn2.raw"
];
const numOfRoarVariants = crowdRoarDirectories.length;

var allCheerSounds = [];
var allBooSounds = [];

const cheerVariantDirectories = [
  "@os2022bgsxobj/sounds/cheers/cheer1.raw",
  "@os2022bgsxobj/sounds/cheers/cheer2.raw",
  "@os2022bgsxobj/sounds/cheers/cheer3.raw",
  "@os2022bgsxobj/sounds/cheers/cheer4.raw",
  "@os2022bgsxobj/sounds/cheers/roar1.raw",
  "@os2022bgsxobj/sounds/cheers/roar2.raw",
  "@os2022bgsxobj/sounds/cheers/horn1.raw",
  "@os2022bgsxobj/sounds/cheers/horn2.raw"

];
const numOfCheerVariants = cheerVariantDirectories.length;

const booVariantDirectories = [
  "@os2022bgsxobj/sounds/boos/boo1.raw",
  "@os2022bgsxobj/sounds/boos/boo2.raw",
  "@os2022bgsxobj/sounds/boos/boo3.raw",
  "@os2022bgsxobj/sounds/boos/boo4.raw"
];
const numOfBooVariants = booVariantDirectories.length;

// leave blank
var allMechanicSounds = [];
// to add another variant, make an array of the sound directories to store and add that
// array directory name into all directories array.
const joeSoundDirectories = [
  "@os2022bgsxobj/sounds/mechanic/joe/joe1.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe2.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe3.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe4.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe5.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe6.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe7.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe8.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe9.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe10.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe11.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe12.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe13.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe14.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe15.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe16.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe17.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe18.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe19.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe20.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe21.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe22.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe23.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe24.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe25.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe26.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe27.raw", 
  "@os2022bgsxobj/sounds/mechanic/joe/joe28.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe29.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe30.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/joe31.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe32.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe33.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/joe34.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe35.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe36.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/joe37.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe38.raw", "@os2022bgsxobj/sounds/mechanic/joe/joe39.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/joe40.raw"
];
const sethSoundDirectories = [
  "@os2022bgsxobj/sounds/mechanic/seth/seth1.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth2.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth3.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth4.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth5.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth6.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth7.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth8.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth9.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth10.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth11.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth12.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth13.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth14.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth15.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth16.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth17.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth18.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth19.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth20.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth21.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth22.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth23.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth24.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth25.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth26.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth27.raw", 
  "@os2022bgsxobj/sounds/mechanic/seth/seth28.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth29.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth30.raw",
  "@os2022bgsxobj/sounds/mechanic/seth/seth31.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth32.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth33.raw",
  "@os2022bgsxobj/sounds/mechanic/seth/seth34.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth35.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth36.raw",
  "@os2022bgsxobj/sounds/mechanic/seth/seth37.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth38.raw", "@os2022bgsxobj/sounds/mechanic/seth/seth39.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/seth40.raw"
];
const hubSoundDirectories = [
  "@os2022bgsxobj/sounds/mechanic/hub/hub1.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub2.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub3.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub4.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub5.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub6.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub7.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub8.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub9.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub10.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub11.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub12.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub13.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub14.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub15.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub16.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub17.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub18.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub19.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub20.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub21.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub22.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub23.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub24.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub25.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub26.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub27.raw", 
  "@os2022bgsxobj/sounds/mechanic/hub/hub28.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub29.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub30.raw",
  "@os2022bgsxobj/sounds/mechanic/hub/hub31.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub32.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub33.raw",
  "@os2022bgsxobj/sounds/mechanic/hub/hub34.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub35.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub36.raw",
  "@os2022bgsxobj/sounds/mechanic/hub/hub37.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub38.raw", "@os2022bgsxobj/sounds/mechanic/hub/hub39.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/hub40.raw"
];
const someSoundDirectories = [
  "@os2022bgsxobj/sounds/mechanic/some/some1.raw", "@os2022bgsxobj/sounds/mechanic/some/some2.raw", "@os2022bgsxobj/sounds/mechanic/some/some3.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some4.raw", "@os2022bgsxobj/sounds/mechanic/some/some5.raw", "@os2022bgsxobj/sounds/mechanic/some/some6.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some7.raw", "@os2022bgsxobj/sounds/mechanic/some/some8.raw", "@os2022bgsxobj/sounds/mechanic/some/some9.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some10.raw", "@os2022bgsxobj/sounds/mechanic/some/some11.raw", "@os2022bgsxobj/sounds/mechanic/some/some12.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some13.raw", "@os2022bgsxobj/sounds/mechanic/some/some14.raw", "@os2022bgsxobj/sounds/mechanic/some/some15.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some16.raw", "@os2022bgsxobj/sounds/mechanic/some/some17.raw", "@os2022bgsxobj/sounds/mechanic/some/some18.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some19.raw", "@os2022bgsxobj/sounds/mechanic/some/some20.raw", "@os2022bgsxobj/sounds/mechanic/some/some21.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some22.raw", "@os2022bgsxobj/sounds/mechanic/some/some23.raw", "@os2022bgsxobj/sounds/mechanic/some/some24.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some25.raw", "@os2022bgsxobj/sounds/mechanic/some/some26.raw", "@os2022bgsxobj/sounds/mechanic/some/some27.raw", 
  "@os2022bgsxobj/sounds/mechanic/some/some28.raw", "@os2022bgsxobj/sounds/mechanic/some/some29.raw", "@os2022bgsxobj/sounds/mechanic/some/some30.raw",
  "@os2022bgsxobj/sounds/mechanic/some/some31.raw", "@os2022bgsxobj/sounds/mechanic/some/some32.raw", "@os2022bgsxobj/sounds/mechanic/some/some33.raw",
  "@os2022bgsxobj/sounds/mechanic/some/some34.raw", "@os2022bgsxobj/sounds/mechanic/some/some35.raw", "@os2022bgsxobj/sounds/mechanic/some/some36.raw",
  "@os2022bgsxobj/sounds/mechanic/some/some37.raw", "@os2022bgsxobj/sounds/mechanic/some/some38.raw", "@os2022bgsxobj/sounds/mechanic/some/some39.raw",
  "@os2022bgsxobj/sounds/mechanic/joe/some40.raw"
];

const allMechanicDirectories = [
  joeSoundDirectories,
  sethSoundDirectories,
  hubSoundDirectories,
  someSoundDirectories
];

// Change list to boo or cheer specific riders when they pass by the crowd
const booRiderNames = [
  "brayden tharp",
  "alexis leclair",
  "rogan mcintosh",
  "roborider",
  "spencer turley",
  "larry reyes jr",
  "jr reyes",
  "tyler lang",
  "rasmus balzer",
  "tyler more"
];

const cheerRiderNames = [
  "cade matherly",
  "alexis leclair",
  "jakob hubbard",
  "braden carter",
  "seth garrett",
  "greg conrad",
  "tanner rogers",
  "colton hansen",
  "maxime vanderbeek",
  "brandon larsen",
  "tyler more"
];

var slotsToCheer = [];
var slotsToBoo = [];

// ADD POSITIONS FOR MECHANICS X Y Z
// How this works is every slot number will be signed a unique mechanic position
const mechanicPositions = [
  [0, 0, 0], [1, 0, 1], 
  [265, 6, 436], [265, 6, 436], 
  [4, 0, 4], [5, 0, 5], 
  [6, 0, 6], [7, 0, 7], 
  [8, 0, 8], [9, 0, 9], 
  [10, 0, 10], [11, 0, 11], 
  [12, 0, 12], [13, 0, 13], 
  [14, 0, 14], [15, 0, 15], 
  [16, 0, 16], [17, 0, 17], 
  [18, 0, 18], [19, 0, 19], 
  [20, 0, 20], [21, 0, 21]
];
const numOfMechanicPositions = mechanicPositions.length;

/*
####################
CHANGE EVERY TRACK
####################
*/
var speakerPositions = [
  [581.5,30,148],
  [312,30,95],
  [140,30,216]
];
var numOfSpeakers = speakerPositions.length;
var mainEventScreams = [];
if (songsEnabled) {
  var timeToStartSongs = 20;
  var songs = [[]];
  // song lengths in seconds, 1:1 correlation with songDirectories
  var songLengths = [];
  // song files
  var songDirectories = [
  ];
  shuffleSongs(songDirectories, songLengths);
}
var time = globalFinishTime / 60;
var fourFiftyMain = false;
if (time == 20) fourFiftyMain = true;
for (var i = 0; i < numOfSpeakers; i++){
  if (fourFiftyMain)
    mainEventScreams[i] = mx.add_sound("@os2022bgsxobj/sounds/crowd/maineventscream2.raw");
  else
    mainEventScreams[i] = mx.add_sound("@os2022bgsxobj/sounds/crowd/maineventscream.raw");
  
  if (songsEnabled) {
    if (i < numOfSpeakers - 1)
      songs.push([]);

    for (var j = 0; j < songDirectories.length; j++){
      songs[i][j] = mx.add_sound(songDirectories[j]);
      mx.set_sound_freq(songs[i][j], 48000);
      mx.set_sound_vol(songs[i][j], 1);
      mx.set_sound_pos(songs[i][j], speakerPositions[i][0], speakerPositions[i][1], speakerPositions[i][2]);
    }
  }

  mx.set_sound_freq(mainEventScreams[i], 44100);
  mx.set_sound_vol(mainEventScreams[i], 1);
  mx.set_sound_pos(mainEventScreams[i], speakerPositions[i][0], speakerPositions[i][1], speakerPositions[i][2]);
}

function shuffleSongs(directories, lengths) {
    var currentIndex = directories.length;
    var randomIndex;
  
    // While there remain elements to shuffle...
    while (currentIndex != 0) {
  
      // Pick a remaining element...
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex--;
  
      // swap elements
      var temp = directories[currentIndex];
      directories[currentIndex] = directories[randomIndex];
      directories[randomIndex] = temp;
  
      temp = lengths[currentIndex];
      lengths[currentIndex] = lengths[randomIndex];
      lengths[randomIndex] = temp;
      
    }
}

function initializeMechanicSounds() {
  for (var i = 0; i < allMechanicDirectories.length; i++) {
    allMechanicSounds.push([]);
    for (var j = 0; j < allMechanicDirectories[i].length; j++){
      allMechanicSounds[i][j] = mx.add_sound(allMechanicDirectories[i][j]);
      mx.set_sound_freq(allMechanicSounds[i][j], 44100);
      mx.set_sound_vol(allMechanicSounds[i][j], 1);
      //mx.message('[' + i.toString() + '][' + j.toString() + '] ' + allMechanicSounds[i][j].toString());
    }
  }
}

function initializeCheerAndBooAllSoundArrays() {
    if (numOfCheerVariants == numOfBooVariants) {
      for (var i = 0; i < numOfCheerVariants; i++) {
        allCheerSounds.push([]);
        allBooSounds.push([]);
      }
      return;
    }

    for (var i = 0; i < numOfCheerVariants; i++)
      allCheerSounds.push([]);
    for (var i = 0; i < numOfBooVariants; i++)
      allBooSounds.push([]);
}

const cheerSoundVol = 5;
const booSoundVol = 5;
function addCheerBooSounds() {
    if (!stadium) {
        initializeCheerAndBooAllSoundArrays();
        // otherwise do two different nested loops
        for (var i = 0; i < numOfBooVariants; i++) {
          for (var j = 0; j < numOfBleachers; j++) {
            allBooSounds[i][j] = mx.add_sound(booVariantDirectories[i]);
            mx.set_sound_freq(allBooSounds[i][j], 44100);
            mx.set_sound_vol(allBooSounds[i][j], booSoundVol);
            mx.set_sound_pos(allBooSounds[i][j], bleacherSoundPositions[j][0], bleacherSoundPositions[j][1], bleacherSoundPositions[j][2]);
          }
        }
    
        for (var i = 0; i < numOfCheerVariants; i++) {
          for (var j = 0; j < numOfBleachers; j++) {
            allCheerSounds[i][j] = mx.add_sound(cheerVariantDirectories[i]);
            mx.set_sound_freq(allCheerSounds[i][j], 44100);
            mx.set_sound_vol(allCheerSounds[i][j], cheerSoundVol);
            mx.set_sound_pos(allCheerSounds[i][j], bleacherSoundPositions[j][0], bleacherSoundPositions[j][1], bleacherSoundPositions[j][2]);
          }
        }
        return;
    }

    for (var i = 0; i < numOfBooVariants; i++) {
        allBooSounds[i] = mx.add_sound(booVariantDirectories[i]);
        mx.set_sound_freq(allBooSounds[i], 44100);
    }
    for (var i = 0; i < numOfCheerVariants; i++) {
        allCheerSounds[i] = mx.add_sound(cheerVariantDirectories[i]);
        mx.set_sound_freq(allCheerSounds[i], 44100);
    }
}

/*
################################################
dynamic crowd and mechanic sounds based on rider
################################################
*/

// this number determines who the rider's mechanic is
var mechanicNumberIdentifiers = [];
var soundDelay = 0;
const secondsToDelay = 3;
var initializedMechanicIdentifiers = false;
var playedScream = false;
var timeToPlayScream;
var playingSong = false;
var timeStartedSong = 20;
var currentSongIndex = -1;

initializeCrowdSounds();
initializeMechanicSounds();

function dynamicMechanicAndFans() {

  var randNumber, slot, timingGate, i;
  var runningOrder = globalRunningOrder;

  if (!initializedMechanicIdentifiers) {
    initializeMechanicIdentifiers();
    initializedMechanicIdentifiers = true;
  }
  // use time to seed random numbers
  var seconds = mx.seconds;

  if (seconds > timeToPlayScream && !playedScream && mainEvent) {
    for (var i = 0; i < mainEventScreams.length; i++)
      mx.start_sound(mainEventScreams[i]);
    playedScream = true;
  }

  if (playedScream && seconds < timeToPlayScream) {playedScream = false;}

  if (songsEnabled) {songFunction();}

  for (i = 0; i < runningOrder.length; i++) {
      slot = runningOrder[i].slot;
      timingGate = runningOrder[i].position;
      /*
      ###################
      crowds at bleachers
      ###################

      if you do not want boos/cheers just delete this whole if statement section
      */
  
      if (timingGate != currentTimingGates[slot] && (seconds >= soundDelay)) {
          // Runs a loop every time someone hits a gate that's in the gatesToCheerOrBoo array
          for (var x = 0; x < gatesToCheerOrBoo.length; x++) {
            // every lap, and first sound only plays when you hit the first timing gate in the slot
            if ((timingGate - (gatesToCheerOrBoo[x] + 1)) % normalLapLength == 0 && timingGate >= gatesToCheerOrBoo[x] + 1) {
                // make's name comparison, sends in running order, index, and the array
                makeNameComparison(slot, x, seconds);
                break;
            }
          }
        }
      /*
      ##############
      mechanics area
      ##############
      */ 
      if (((timingGate - (mechanicGate + 1)) % normalLapLength == 0) && 
          (timingGate > ((mechanicGate + 1) * (lapToActivateMechanics - 1))) && 
          (timingGate != currentTimingGates[slot])) {

            var position = i + 1;
            // pick from first place prompts
            if (position == 1)
              randNumber = Math.floor((seconds % 5));

            // pick from front running sounds for top 5 that's not first
            else if (position <= 5)
              randNumber = Math.floor((seconds % 6)) + 5;

            // pick from 6th-10th sounds
            else if (position <= 10)
              randNumber = Math.floor((seconds % 5)) + 11;

            // pick from midpack1 sounds (11th-15th)
            else if (position <= 15)
              randNumber = Math.floor((seconds % 4)) + 16;

            // pick from midpack2 sounds (16th-21st)
            else if (position <= 21)
              randNumber = Math.floor((seconds % 5)) + 20;

            // pick from last place prompts
            else if (position == runningOrder.length)
              randNumber = Math.floor((seconds % 5)) + 35;

            // pick from endpack sounds
            else
              randNumber = Math.floor((seconds % 10)) + 25;
    
            if (slot <= numOfMechanicPositions)
              assignPositionsForMechanicsAndPlaySound(slot, mechanicNumberIdentifiers, randNumber);
        }
    }
}

function initializeMechanicIdentifiers() {
    var runningOrder = globalRunningOrder;
    if (mainEvent) {
        // Use last place's slot number to seed a random number between 3 and 6 seconds
        timeToPlayScream = (runningOrder[runningOrder.length-1].slot % 4) + 3;
    }
    if (runningOrder.length > numOfMechanicPositions) {
        mx.message('Warning: Not Every Rider Will Be Assigned a Mechanic');    
    }
      
    for (i = 0; i < runningOrder.length; i++) {
        slot = runningOrder[i].slot;    
        /*
        if the running order is longer than the mechanic positions length,
        not all riders will be assigned a mechanic, only the ones within the confines
        of the mechanic positions length
        */    
        // assign mechanic sounds based on slot num
        if (i <= numOfMechanicPositions) {

            if (slot % 4 == 0) {
              mechanicNumberIdentifiers[slot] = 3;
              continue;
            }

            if (slot % 3 == 0) {
              mechanicNumberIdentifiers[slot] = 2;
              continue;
            }

            if (slot % 2 == 0) {
              mechanicNumberIdentifiers[slot] = 1;
              continue;
            }
            mechanicNumberIdentifiers[slot] = 0;
        }
    }
}

function songFunction() {
  try {
    if (playingSong) {
      if (mx.seconds > songLengths[currentSongIndex] + timeStartedSong || mx.seconds - timeStartedSong < 0) {
        if (mx.seconds - timeStartedSong < 0) {
          currentSongIndex--;
        }
        for (var i = 0; i < numOfSpeakers; i++) {
          mx.stop_sound(songs[i][currentSongIndex]);
        }
        playingSong = false;
      }
    }
  
    if (!playingSong && mainEvent && mx.seconds > timeToStartSongs){
      currentSongIndex++;
      if (currentSongIndex == songs.length)
        currentSongIndex = 0;
      for (var i = 0; i < numOfSpeakers; i++) {
        mx.start_sound(songs[i][currentSongIndex]);
      }
      playingSong = true;
      timeStartedSong = mx.seconds;
    }
  }
  catch(e) {
    mx.message("song error: " + e);
  }
}

function assignPositionsForMechanicsAndPlaySound(slotNumber, mechanicNumberIdentifiers, randNumber) {
  /*var mechNum = mechanicNumberIdentifiers[slotNumber];
  mx.message('slot number: ' + slotNumber);
  mx.message('setting sound position for: [' + mechNum + '][' + randNumber + '] at ' + mechanicPositions[slotNumber]);
  mx.set_sound_pos(allMechanicSounds[mechNum][randNumber], mechanicPositions[slotNumber][0], mechanicPositions[slotNumber][1], mechanicPositions[slotNumber][2]);
  mx.start_sound(allMechanicSounds[mechNum][randNumber]);*/
}

function makeNameComparison(slot, benchPos, seconds) {
  // use time to seed random numbers
  seconds = seconds.toFixed(3);
  var randNumber, randFunc, randFunc2;
  var luckyNumber = 2;

  if (slotsToCheer.indexOf(slot) != -1) {
    // cheer sounds have a 10% chance of playing
    randFunc = seed((seconds * 1000) << 2);
    randNumber = Math.floor(randFunc() * 100) % 10;

    if (randNumber == luckyNumber) {
      randFunc2 = seed((randFunc()) * mx.tics_per_second);
      randNumber = Math.floor(randFunc2() * 100) % numOfCheerVariants;

      mx.set_sound_vol(allCheerSounds[randNumber][benchPos], cheerSoundVol);
      mx.start_sound(allCheerSounds[randNumber][benchPos]);
      // delay so sounds don't overlay
      soundDelay = seconds + secondsToDelay;
    }
  }

  if (slotsToBoo.indexOf(slot) != -1) {
    // boo sounds have a 10% chance of playing
    randFunc = seed((seconds * 1000) << 2);
    randNumber = Math.floor(randFunc() * 100) % 10;

    if (randNumber == luckyNumber) {
      randFunc2 = seed((randFunc()) * mx.tics_per_second);
      randNumber = Math.floor(randFunc2() * 100) % numOfBooVariants;
      
      mx.set_sound_vol(allBooSounds[randNumber][benchPos], booSoundVol);
      mx.start_sound(allBooSounds[randNumber][benchPos]);
      // delay so sounds don't overlay
      soundDelay = seconds + secondsToDelay;
    }
  }
}
  
function addRoarSounds() {
    if (!stadium) {
      for (var i = 0; i < numOfBleachers; i++) {
        crowdRoars.push([]);
        for (var j = 0; j < numOfRoarVariants; j++) {
          crowdRoars[i][j] = mx.add_sound(crowdRoarDirectories[j]);
          mx.set_sound_freq(crowdRoars[i][j], 44100);
          mx.set_sound_pos(crowdRoars[i][j], bleacherSoundPositions[i][0], bleacherSoundPositions[i][1], bleacherSoundPositions[i][2]);
        }
      }
      return;
    }
  
    for (var i = 0; i < numOfRoarVariants; i++) {
      crowdRoars[i] = mx.add_sound(crowdRoarDirectories[i]);
      mx.set_sound_freq(crowdRoars[i], 44100);
    }
}
  
function addCrowdConstant() {
  if (!stadium) {
    crowdConstants = [];
    // Set Sound Positions for crashes and constant sound at all bleacher positions
    for (var j = 0; j < numOfBleachers; j++) {
        // define all crowd constants at each bleacher position
        crowdConstants[j] = mx.add_sound("@os2022bgsxobj/sounds/crowd/crowdconstant.raw");
        mx.set_sound_freq(crowdConstants[j], 44100);

        if (racingEvent) {
          mx.set_sound_vol(crowdConstants[j], crowdConstantBaseVol);
        } else {
          mx.set_sound_vol(crowdConstants[j], crowdConstantBaseVol / 4);
        } 

        mx.set_sound_loop(crowdConstants[j], 1);
        mx.set_sound_pos(crowdConstants[j], bleacherSoundPositions[j][0], bleacherSoundPositions[j][1], bleacherSoundPositions[j][2]);
        mx.start_sound(crowdConstants[j]);
    }
    return;
  }

  crowdConstants = mx.add_sound("@os2022bgsxobj/sounds/crowd/constant.raw");
  mx.set_sound_freq(crowdConstants, 44100);
  mx.set_sound_vol(crowdConstants, crowdConstantBaseVol);
  mx.set_sound_loop(crowdConstants, 1);

}

function initializeCrowdSounds() {
  addCheerBooSounds();
  addRoarSounds();
  addCrowdConstant();
}

var displayedAwards = false;
var mostConsistentRider;
function riderAwards() {
  // If it's not a main event, don't display awards
  if (!mainEvent) return;
  
  if (everyRiderFinished && !displayedAwards) {
    displayedAwards = true;
    calculatePositionsGained();
    try {
      mostConsistentRider = getRiderConsistency();
    } catch (e) {
      mx.message("consistency calculation error: " + e);
    }
  
    var msg;
    var extraSpace = false;
    
    // Initial Header
    printHeader("\x1b[33m", "Awards:", 11, extraSpace);
    mx.message("Note: Hard Charger / Anchor do not account for cuts.");
    mx.message("");
    msg = "Nobody";
    extraSpace = true;
    
    try {
      // Holeshot
      printHeader("\x1b[36m", "Holeshot Award:", 21, extraSpace);
      
      var riderName = mx.get_rider_name(holeshotRiderSlot);
      if (riderName) msg = riderName.toString();
      mx.message(msg);
      mx.message("");
    } catch (e) {
      mx.message("holeshot error");
    }
    
    msg = "Nobody";
      // Hard Charger Award
      printHeader("\x1b[32m", "Hard Charger Award:", 27, extraSpace)

    var positionsGained = 0;
    if (riderPositionsGained[0]){
      positionsGained = riderPositionsGained[0][0];
      riderName = mx.get_rider_name(riderPositionsGained[0][1]);
      if (positionsGained != 0) {
        msg = "\x1b[32m+" + positionsGained.toString() + ' Positions\x1b[0m - ' + riderName.toString();
      } 
    }

    mx.message(msg);
    mx.message("");
    msg = "Nobody";

    // Anchor Award
    printHeader("\x1b[31m", "Anchor Award:", 19, extraSpace);

    if (riderPositionsGained[riderPositionsGained.length - 1][0] != riderPositionsGained[0][0]) {
      positionsGained = riderPositionsGained[riderPositionsGained.length - 1][0];
      riderName = mx.get_rider_name(riderPositionsGained[riderPositionsGained.length - 1][1]);
      if (positionsGained != 0) {
        msg = "\x1b[31m" + positionsGained.toString() + ' Positions\x1b[0m - ' + riderName.toString();
      } 
    }
    
    mx.message(msg);
    mx.message("");
    msg = "Nobody";

    // On the Clock Award
    printHeader("\x1b[34m", "On The Clock Award:", 26, extraSpace);
    
    var fastestRider = getFastestLap();
    if (fastestRider[0] != undefinedTime) {
      riderName = mx.get_rider_name(fastestRider[1]);
      msg = "\x1b[34m" + timeToString(fastestRider[0], true) + '\x1b[0m - ' + riderName.toString();
    }
   
    mx.message(msg);
    mx.message("");
    msg = "Nobody";

    try {
      // Consistency Award
      printHeader("\x1b[35m", "Consistency Award:", 25, extraSpace);
      if (mostConsistentRider) {
        var stdDeviation = mostConsistentRider[0].toFixed(3);
        riderName = mx.get_rider_name(mostConsistentRider[1]);
        msg = "\x1b[35mStd. Dev: " + stdDeviation.toString() + "\x1b[0m - " + riderName.toString();
      }
      mx.message(msg);
    } catch (e) {
      mx.message("consistency error: " + e);
    }
  }
}

function printHeader(color, header, dashLength, space) {
  var dashes = "";
  for (var i = 0; i < dashLength; i++) {
    dashes += "-";
  }
  mx.message(color + dashes);
  mx.message(color + header);
  mx.message(color + dashes);
  if (space) mx.message("");
}

// zero indexed, 0 is 1st, 1 is 2nd, etc.
var riderPositionsAfterL1 = [];
var riderFinishPositions = [];
var riderPositionsGained;

// calculate stats
function calculatePositionsGained () {
  var r = globalRunningOrder;
  var numNullArrs = 0;
  // reset the rider positions gained
  riderPositionsGained = [];
  for (var i = 0; i < r.length; i++) {
    var slot = r[i].slot;
    if (riderPositionsAfterL1[slot] && riderFinishPositions[slot]) {
      riderPositionsGained.push([]);
      // first store the number of positions gained
      riderPositionsGained[i - numNullArrs][0] = riderPositionsAfterL1[slot] - riderFinishPositions[slot];
      // then their slot number associated
      riderPositionsGained[i - numNullArrs][1] = slot;
    } else {
      numNullArrs++;
    }
  }

  // sort in descending order by largest num of positions gained.
  riderPositionsGained.sort(function (a, b) {
    if (a[0] < b[0]) {
      return 1;
    }

    if (a[0] == b[0]) {
      // If the two riders gained or lost the same number of positions but the finish position of A rider was worse then B rider, then A rider gained 'less' positions
      if (riderFinishPositions[a[1]] > riderFinishPositions[b[1]]) {
        return 1;
      }
    }
    return -1;
  });
}

function getFastestLap() {
  // copy bestPlayerLaptimes into temp array
  var bestPlayerLapsSrtd = bestPlayerLaptimes.slice();
  // srt array and return
  bestPlayerLapsSrtd.sort(function (a, b){return a[0] - b[0];});
  return bestPlayerLapsSrtd[0];
}

function getRiderConsistency() {
  var avgLaps = [];
  var stdDeviations = [];

  var r = globalRunningOrder;

  // go through player slots
  for (var i = 0; i < r.length; i++) {
    var slot = r[i].slot;
    var sum = 0;
    avgLaps[slot] = undefined;
    stdDeviations[slot] = undefined;
    
    var lapsCounted = 0;
    if (allPlayerLaptimes[slot].length > 0) {
      var playersInvalidLaps = invalidLaptimes[slot];  
      // calculate average laptime for each player
      for (var j = 0; j < allPlayerLaptimes[slot].length; j++) {
        // if the laptime is valid
        var index = playersInvalidLaps.indexOf(allPlayerLaptimes[slot][j]);
        if (index === -1) {
          sum += allPlayerLaptimes[slot][j];
          lapsCounted++;
        }
      }
      avgLaps[slot] = sum / lapsCounted;
      // std deviation = sqrt((lap - avglap)^2 for all laps / num of laps)
      sum = 0;
      for (var j = 0; j < allPlayerLaptimes[slot].length; j++) {
        // if the laptime is invalid
        var index = playersInvalidLaps.indexOf(allPlayerLaptimes[slot][j]);
        if (index !== -1) {
          // remove from the player invalid laps
          playersInvalidLaps.splice(index, 1);
          continue;
        }
        sum += Math.pow(allPlayerLaptimes[slot][j] - avgLaps[slot], 2);
      }

      var variance = sum / lapsCounted;
      var deviation = Math.sqrt(variance);
      if (deviation > 0) {
        stdDeviations[slot] = [deviation, slot];
      }
    }
  }

  // sort by array by each rider's standard deviation
  stdDeviations.sort(function (a, b){return a[0] - b[0];})
  
  // filter out undefined.
  for (var i = 0; i < r.length; i++) {
    var slot = r[i].slot;
    if (!stdDeviations[slot]) {
      stdDeviations.splice(slot,1);
    }
  }

  if (stdDeviations.length > 0) {
    // returns an array with the consistency and slot associated
    return stdDeviations[0];
  }
  
  return undefined
}

function resetCurrentTimingGates() {
  var timingGate, slot;
  for (var i = 0; i < globalRunningOrder.length; i++) {
    slot = globalRunningOrder[i].slot;
    timingGate = globalRunningOrder[i].position;
    if (timingGate != currentTimingGates[slot]){
      // for demos going back in time, reset their down check gate
      if (timingGate < currentTimingGates[slot]) {
        currentTimingGates[slot] = timingGate;
        riderDownCheckGates[slot] = 0;
        soundDelay = 0;
      }
      currentTimingGates[slot] = timingGate;
    }
  }
}

function checkPosChange(slot, position) {
  if (slotPositionHolder[position] != slot) {
    ResetSlotPositionHolder(); 
    return true;
  }
  return false;
}

function ResetSlotPositionHolder() {
  for (var i = 0; i < globalRunningOrder.length; i++) {
    slotPositionHolder[i] = globalRunningOrder[i].slot;
  }
}

function checkTopFivePositionChange() {
  var change = false;
  var ppl = 5;
  if (globalRunningOrder.length < ppl) {
    ppl = globalRunningOrder.length;
  }
  for (var i = 0; i < ppl; i++) {
    var slot = globalRunningOrder[i].slot;
    var gate = globalRunningOrder[i].position;
    if (checkPosChange(slot, i) || (gate <= 1 && gate != currentTimingGates[slot])) {
      change = true;
      break;
    }
  }
  return change;
}

function setUpCheerBooSlots() {
  if (!racingEvent) return;

  for (var i = 0; i < globalRunningOrder.length; i++) {
    var slot = globalRunningOrder[i].slot;
    var riderName = mx.get_rider_name(slot).toLowerCase();
    for (var j = 0; j < booRiderNames.length; j++) {
      if (riderName.includes(booRiderNames[j])) {
        slotsToBoo[slotsToBoo.length] = slot;
        break;
      }
    }
    for (var j = 0; j < cheerRiderNames.length; j++) {
      if (riderName.includes(cheerRiderNames[j])) {
        slotsToCheer[slotsToCheer.length] = slot;
        break;
      }
    }
  }
}

function seed(s) {
  var mask = 0xffffffff;
  var m_w  = (123456789 + s) & mask;
  var m_z  = (987654321 - s) & mask;

  return function() {
    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;
    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;

    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;
    result /= 4294967296;
    return result;
  }
}

// Updates Cam Position
function updateCamPosition() {
  // gets and stores the camera location into the p and r array variables
  mx.get_camera_location(p, r);
}

function updateSoundPositions() {
  mx.set_sound_pos(crowdConstants, p[0], p[1], p[2]);
    
  // Sets each sound at the camera postition and will be called to play later
  for (var i = 0; i < numOfCrashVariants; i++) {
    mx.set_sound_pos(crashSounds[i], p[0], p[1], p[2]);
  }
  for (var i = 0; i < crowdRoars.length; i++) {
    mx.set_sound_pos(crowdRoars[i], p[0], p[1], p[2]);
  }
  for (var i = 0; i < numOfCheerVariants; i++) {
      mx.set_sound_pos(allCheerSounds[i], p[0], p[1], p[2]);
  }
  for (var i = 0; i < numOfBooVariants; i++) {
    mx.set_sound_pos(allBooSounds[i], p[0], p[1], p[2]);
  }
}

function determineMainEvent() {
  var time = globalFinishTime / 60;
  var laps = globalFinishLaps;
  if ((time == 15 || time == 20) && laps == 1) {
    mainEvent = true;
    racingEvent = true;
  }
  else if ((time == 6 || time == 5) && laps == 1) {
    racingEvent = true;
  }
}

// min and max included 
function randomIntFromInterval(min, max) {return Math.floor(Math.random() * (max - min + 1) + min);}

/*
###############################
      BALE COORDINATES
###############################
*/
const baleUpStartIndex = 6;
const baleCoordsUp = [
  [266.018646, -5.000000, 438.696808, -0.684825],
  [284.193237, -5.000000, 420.691467, -0.947597],
  [274.541595, -5.000000, 429.045013, -0.758380],
  [251.907822, -5.000000, 460.145142, -0.402116],
  [258.229523, -5.000000, 448.969452, -0.614020],
  [247.455322, -5.000000, 475.834930, -0.112428],
  [309.863434, -5.000000, 407.824677, -1.251727],
  [324.396606, -5.000000, 405.088043, -1.480141],
  [249.374390, -5.000000, 499.992462, 0.270154],
  [319.340118, -5.000000, 345.775848, -0.415814],
  [247.342438, -5.000000, 488.139465, 0.099668],
  [337.289398, -5.000000, 390.421936, 1.176001],
  [328.540283, -5.000000, 385.229401, 0.910669],
  [321.428436, -5.000000, 377.609650, 0.588003],
  [317.138855, -5.000000, 367.675690, 0.276909],
  [316.517975, -5.000000, 356.387115, -0.083836],
  [296.786530, -5.000000, 412.985748, -1.083203]
];

var balesToPushUp = [];
const numOfBalesToPushUp = baleCoordsUp.length;

const baleDownStartIndex = 24;
const baleCoordsDown = [
  [361.818756, 0.000000, 368.099213, -0.692641],
  [346.484894, 0.000000, 387.481903, -0.692641],
  [255.023163, 0.000000, 501.121552, -0.700494],
  [269.041138, 0.000000, 484.039978, -0.700494],
  [276.136200, 0.000000, 475.378845, -0.700494],
  [312.056152, 0.000000, 430.399048, -0.692641],
  [319.359924, 0.000000, 421.059967, -0.692641],
  [327.525818, 0.000000, 410.849426, -0.692641],
  [354.567291, 0.000000, 377.358459, -0.692641],
  [262.296143, 0.000000, 492.341492, -0.700494]
];
var balesToPushDown = [];
const numOfBalesToPushDown = baleCoordsDown.length;

initializeBalesToPushArrays();

function initializeBalesToPushArrays() {
    // balesToPush output: [bale index, x,y,z,a]
    for (var i = 0; i < numOfBalesToPushUp; i++)
      balesToPushUp.push([i + baleUpStartIndex, baleCoordsUp[i]]);
    for (var i = 0; i < numOfBalesToPushDown; i++)
      balesToPushDown.push([i + baleDownStartIndex, baleCoordsDown[i]]);
}
  
/*
###############################
      MOVE BALES FUNCTION
###############################
*/

const delayForBales = 25;
var doneMovingBales = false;
const timeToMoveBales = 2.5;
const unitsToMoveBales = Math.abs(balesToPushUp[0][1][1]);
// speed of the movement of the bales in ft/sec
const speedOfBales = unitsToMoveBales/timeToMoveBales;
var gotDelay = false;
var movedOutside = false;
var moveBalesDelay = undefinedTime;
function moveBales() {
  var seconds = mx.seconds;
  var index,x,y,z,a,t;
  if (gateDropTime > 0 && !gotDelay) { 
    moveBalesDelay = delayForBales + gateDropTime;
    gotDelay = true;
  }
  if ((moveBalesDelay - 1) <= seconds <= (moveBalesDelay + timeToMoveBales + 1) || seconds <= 1) {
    if (seconds > moveBalesDelay) {
      if (seconds >= moveBalesDelay + timeToMoveBales)
        t = timeToMoveBales;
      else
        t = (seconds - moveBalesDelay);
    }
    else
      t = 0;
    // moves statues up y axis
    for (var i = 0; i < numOfBalesToPushUp; i++) {
      index = balesToPushUp[i][0];
      x = balesToPushUp[i][1][0];
      y = balesToPushUp[i][1][1] + (speedOfBales * t);
      z = balesToPushUp[i][1][2];
      a = balesToPushUp[i][1][3];
      mx.move_statue(index, x, y, z, a);
    }
    // move statues down y axis
    for (var i = 0; i < numOfBalesToPushDown; i++) {
      index = balesToPushDown[i][0];
      x = balesToPushDown[i][1][0];
      y = balesToPushDown[i][1][1] - (speedOfBales * t);
      z = balesToPushDown[i][1][2];
      a = balesToPushDown[i][1][3];
      mx.move_statue(index, x, y, z, a);
    }
  }
}

var doneBeginningWork = false;
function frameHandler(seconds) {
  globalRunningOrder = mx.get_running_order();

  if (!doneBeginningWork) {
    resetCurrentTimingGates();
    ResetSlotPositionHolder();
    setUpCheerBooSlots();
    doneBeginningWork = true;
  }

  updateCamPosition();
  if (stadium) updateSoundPositions();

  gateSound();
  determineHoleshot();
  updateRiderFinishFlags();
  displayLaptimes();

  if (racingEvent) {
    isRiderDown();
    dynamicMechanicAndFans();
    battlesFunction();
    doPyro();
    try {
      riderAwards();
    } catch (e) {
      mx.message("rider awards error: " + e);
    }
    updateScreen();
  }

  moveBales();
  flaggersFrameHandler(seconds);
  resetCurrentTimingGates();

  frameHandlerPrev(seconds);
}

var frameHandlerPrev = mx.frame_handler;
mx.frame_handler = frameHandler;

